From a306046daaf32535164ab62b4f3509bb83481cc6 Mon Sep 17 00:00:00 2001
From: "Yener D." <yener90ts@googlemail.com>
Date: Sat, 18 May 2019 18:28:43 +0200
Subject: [PATCH 26/38] Add hall support for QTI lid sensors

With this change it is possible, to get BU52061NVX ROHM lid sensor running.

Change-Id: I9f9cacfea89c9a8f1047c404489ba168c75c7d84
---
 core/res/res/values/config.xml                |  5 +++
 core/res/res/values/symbols.xml               |  1 +
 .../server/policy/PhoneWindowManager.java     | 39 +++++++++++++++++++
 3 files changed, 45 insertions(+)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index e051f4c235f..08a99e2be74 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -850,6 +850,11 @@
          The default is false. -->
     <bool name="config_lidControlsSleep">false</bool>
 
+    <!-- Indicate the type number of the lid sensor, which is used in QTI sensor framework.
+         0 disables using of the sensor framework for hall.
+         The default is 0. -->
+    <integer name="config_lidSensorType">0</integer>
+
     <!-- Desk dock behavior -->
 
     <!-- The number of degrees to rotate the display when the device is in a desk dock.
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index a6f33f03734..5cc3d96e0da 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1742,6 +1742,7 @@
   <java-symbol type="integer" name="config_lidKeyboardAccessibility" />
   <java-symbol type="integer" name="config_lidNavigationAccessibility" />
   <java-symbol type="integer" name="config_lidOpenRotation" />
+  <java-symbol type="integer" name="config_lidSensorType" />
   <java-symbol type="integer" name="config_longPressOnHomeBehavior" />
   <java-symbol type="layout" name="global_actions" />
   <java-symbol type="layout" name="global_actions_item" />
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index 232adf3aad4..d7fa0e25e99 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -194,6 +194,10 @@ import android.hardware.camera2.CameraAccessException;
 import android.hardware.camera2.CameraCharacteristics;
 import android.hardware.camera2.CameraManager;
 import android.hardware.display.DisplayManager;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
 import android.hardware.hdmi.HdmiControlManager;
 import android.hardware.hdmi.HdmiPlaybackClient;
 import android.hardware.hdmi.HdmiPlaybackClient.OneTouchPlayCallback;
@@ -819,6 +823,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     // (See LineageSettings.Secure.RING_HOME_BUTTON_BEHAVIOR.)
     int mRingHomeBehavior;
 
+    // Create Lid Event Listener
+    private LidSensorEventListener mEvtListener = null;
+    private Sensor mSensor = null;
+    private SensorManager mSensorManager = null;
+    private int mLidSensorType = 0;
+
     Display mDisplay;
 
     int mLandscapeRotation = 0;  // default landscape rotation
@@ -1225,6 +1235,20 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    class LidSensorEventListener implements SensorEventListener {
+
+        @Override
+        public void onSensorChanged(SensorEvent event) {
+            if (event.values != null && event.values.length != 0) {
+                notifyLidSwitchChanged(0, ((int) event.values[0]) == 0);
+            }
+        }
+
+        @Override
+        public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        }
+    }
+
     class MyOrientationListener extends WindowOrientationListener {
 
         private SparseArray<Runnable> mRunnableCache;
@@ -2372,6 +2396,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 com.android.internal.R.bool.config_lidControlsScreenLock);
         mLidControlsSleep = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_lidControlsSleep);
+        mLidSensorType = mContext.getResources().getInteger(
+                com.android.internal.R.integer.config_lidSensorType);
         mTranslucentDecorEnabled = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_enableTranslucentDecor);
 
@@ -2614,6 +2640,19 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         filter = new IntentFilter();
         filter.addAction(ACTION_TORCH_OFF);
         context.registerReceiver(torchReceiver, filter);
+
+        if (mLidSensorType > 0) {
+            Slog.d(TAG, "new LidSensorManager");
+            mSensorManager = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);
+            mSensor = mSensorManager.getDefaultSensor(mLidSensorType, true);
+            if (mSensor == null) {
+                Slog.d(TAG, "get sensor fail...");
+                mEvtListener = null;
+                return;
+            }
+            mEvtListener = new LidSensorEventListener();
+            mSensorManager.registerListener(mEvtListener, mSensor, SensorManager.SENSOR_DELAY_UI);
+        }
     }
 
     private void updateKeyAssignments() {
-- 
2.17.1

