From e8578cb00ed5472821e0c0304f4967f9daedc2e4 Mon Sep 17 00:00:00 2001
From: Roman Birg <roman@cyngn.com>
Date: Mon, 19 Jan 2015 16:22:56 -0800
Subject: [PATCH 31/38] SystemUI: Add Compass tile

- Port to Oreo - LorDClockAN

CompassTile: Set default state inactive

CompassTile: Do not use slashed icon

CompassTile: Add a device supports compass check

- Previously it showed up on devices even without compass support
  making it a bloat

Change-Id: If8e8b4179bd15d6329669637191d649223d9fd20
---
 .../SystemUI/res/drawable/ic_qs_compass.xml   |  31 +++
 packages/SystemUI/res/values/cm_arrays.xml    |  31 +++
 packages/SystemUI/res/values/cm_strings.xml   |  17 ++
 packages/SystemUI/res/values/config.xml       |   2 +-
 .../systemui/qs/tileimpl/QSFactoryImpl.java   |   3 +
 .../systemui/qs/tiles/CompassTile.java        | 226 ++++++++++++++++++
 6 files changed, 309 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/res/drawable/ic_qs_compass.xml
 create mode 100644 packages/SystemUI/res/values/cm_arrays.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/qs/tiles/CompassTile.java

diff --git a/packages/SystemUI/res/drawable/ic_qs_compass.xml b/packages/SystemUI/res/drawable/ic_qs_compass.xml
new file mode 100644
index 00000000000..627cd0f2e43
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_qs_compass.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+ * Copyright (C) 2015 The CyanogenMod Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="48dp"
+    android:height="48dp"
+    android:viewportWidth="48"
+    android:viewportHeight="48">
+
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M25.9,3.3l7.8,19.1c0.4,1,0.4,2.2,0,3.3l-7.8,19.1c-0.7,1.7-3.1,1.7-3.8,0l-7.8-19.1c-0.4-1-0.4-2.2,0-3.3
+l7.8-19.1C22.8,1.6,25.2,1.6,25.9,3.3Z
+M24,20c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S26.2,20,24,20z
+M26,14v-4c0-1.1-0.9-2-2-2 s-2,0.9-2,2v4c0,1.1,0.9,2,2,2S26,15.1,26,14z" />
+</vector>
diff --git a/packages/SystemUI/res/values/cm_arrays.xml b/packages/SystemUI/res/values/cm_arrays.xml
new file mode 100644
index 00000000000..a7dbab9e3c3
--- /dev/null
+++ b/packages/SystemUI/res/values/cm_arrays.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2015 The CyanogenMod Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+
+    <!-- Cardinal directions for the compass tile -->
+    <string-array name="cardinal_directions">
+        <item>@string/quick_settings_compass_N</item>  <!-- North -->
+        <item>@string/quick_settings_compass_NE</item> <!-- North east -->
+        <item>@string/quick_settings_compass_E</item>  <!-- East -->
+        <item>@string/quick_settings_compass_SE</item> <!-- South east -->
+        <item>@string/quick_settings_compass_S</item>  <!-- South -->
+        <item>@string/quick_settings_compass_SW</item> <!-- South west -->
+        <item>@string/quick_settings_compass_W</item>  <!-- West -->
+        <item>@string/quick_settings_compass_NW</item> <!-- North west -->
+    </string-array>
+
+</resources>
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index 72efa4a640e..e28f1f7e671 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -56,6 +56,23 @@
     <string name="accessibility_quick_settings_caffeine_off">Caffeine off.</string>
     <string name="accessibility_quick_settings_caffeine_on">Caffeine on.</string>
 
+    <!-- Compass QS Tile -->
+    <string name="quick_settings_compass_label">Compass</string>
+    <string name="quick_settings_compass_value"><xliff:g id="degrees">%1$.0f</xliff:g>\u00b0 <xliff:g id="direction">%2$s</xliff:g></string>
+    <string name="quick_settings_compass_init">Initializing\u2026</string>
+    <string name="accessibility_quick_settings_compass_off">Compass off.</string>
+    <string name="accessibility_quick_settings_compass_on">Compass on.</string>
+    <string name="accessibility_quick_settings_compass_changed_off">Compass turned off.</string>
+    <string name="accessibility_quick_settings_compass_changed_on">Compass turned on.</string>
+    <string name="quick_settings_compass_N">N</string>
+    <string name="quick_settings_compass_NE">NE</string>
+    <string name="quick_settings_compass_E">E</string>
+    <string name="quick_settings_compass_SE">SE</string>
+    <string name="quick_settings_compass_S">S</string>
+    <string name="quick_settings_compass_SW">SW</string>
+    <string name="quick_settings_compass_W">W</string>
+    <string name="quick_settings_compass_NW">NW</string>
+ 
     <!-- Heads up QS tile -->
     <string name="quick_settings_heads_up_label">Heads up</string>
     <string name="accessibility_quick_settings_heads_up_off">Heads up off.</string>
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index ce7f929da6d..6676b536634 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -123,7 +123,7 @@
 
     <!-- Tiles native to System UI. Order should match "quick_settings_tiles_default" -->
     <string name="quick_settings_tiles_stock" translatable="false">
-        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,nfc,location,hotspot,inversion,saver,work,cast,night,adb_network,ambient_display,caffeine,heads_up,livedisplay,reading_mode,sync,usb_tether,volume_panel
+        wifi,cell,battery,dnd,flashlight,rotation,bt,airplane,nfc,location,hotspot,inversion,saver,work,cast,night,adb_network,ambient_display,caffeine,heads_up,livedisplay,reading_mode,sync,usb_tether,volume_panel,compass
     </string>
 
     <!-- The tiles to display in QuickSettings -->
diff --git a/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java b/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
index 6ab32b8fbd5..7e1588ff8de 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java
@@ -33,6 +33,7 @@ import com.android.systemui.qs.tiles.CaffeineTile;
 import com.android.systemui.qs.tiles.CastTile;
 import com.android.systemui.qs.tiles.CellularTile;
 import com.android.systemui.qs.tiles.ColorInversionTile;
+import com.android.systemui.qs.tiles.CompassTile;
 import com.android.systemui.qs.tiles.DataSaverTile;
 import com.android.systemui.qs.tiles.DndTile;
 import com.android.systemui.qs.tiles.FlashlightTile;
@@ -115,6 +116,8 @@ public class QSFactoryImpl implements QSFactory {
                 return new AmbientDisplayTile(mHost);
             case "caffeine":
                 return new CaffeineTile(mHost);
+            case "compass":
+                return new CompassTile(mHost);
             case "heads_up":
                 return new HeadsUpTile(mHost);
             case "livedisplay":
diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/CompassTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/CompassTile.java
new file mode 100644
index 00000000000..c5cef84a995
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/CompassTile.java
@@ -0,0 +1,226 @@
+/*
+ * Copyright (C) 2015 The CyanogenMod Project
+ *               2017 AICP
+ *               2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.qs.tiles;
+
+import android.content.Context;
+import android.content.Intent;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.service.quicksettings.Tile;
+import android.widget.ImageView;
+
+import com.android.systemui.R;
+import com.android.systemui.plugins.qs.QSIconView;
+import com.android.systemui.plugins.qs.QSTile.BooleanState;
+import com.android.systemui.qs.QSHost;
+import com.android.systemui.qs.tileimpl.QSTileImpl;
+
+import org.lineageos.internal.logging.LineageMetricsLogger;
+
+public class CompassTile extends QSTileImpl<BooleanState> implements SensorEventListener {
+    private final static float ALPHA = 0.97f;
+
+    private boolean mActive = false;
+
+    private SensorManager mSensorManager;
+    private Sensor mAccelerationSensor;
+    private Sensor mGeomagneticFieldSensor;
+
+    private float[] mAcceleration;
+    private float[] mGeomagnetic;
+
+    private ImageView mImage;
+    private boolean mListeningSensors;
+
+    public CompassTile(QSHost host) {
+        super(host);
+        mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);
+        mAccelerationSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+        mGeomagneticFieldSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
+    }
+
+    @Override
+    public BooleanState newTileState() {
+        return new BooleanState();
+    }
+
+    @Override
+    protected void handleDestroy() {
+        super.handleDestroy();
+        setListeningSensors(false);
+        mSensorManager = null;
+        mImage = null;
+    }
+
+    @Override
+    public QSIconView createTileView(Context context) {
+        QSIconView iconView = super.createTileView(context);
+        mImage = (ImageView) iconView.findViewById(android.R.id.icon);
+        return iconView;
+    }
+
+    @Override
+    protected void handleClick() {
+        mActive = !mActive;
+        refreshState();
+        setListeningSensors(mActive);
+    }
+
+    @Override
+    public void handleLongClick() {
+        handleClick();
+    }
+
+    @Override
+    public Intent getLongClickIntent() {
+        return null;
+    }
+
+    private void setListeningSensors(boolean listening) {
+        if (listening == mListeningSensors) return;
+        mListeningSensors = listening;
+        if (mListeningSensors) {
+            mSensorManager.registerListener(
+                    this, mAccelerationSensor, SensorManager.SENSOR_DELAY_GAME);
+            mSensorManager.registerListener(
+                    this, mGeomagneticFieldSensor, SensorManager.SENSOR_DELAY_GAME);
+        } else {
+            mSensorManager.unregisterListener(this);
+        }
+    }
+
+    @Override
+    public CharSequence getTileLabel() {
+        return mContext.getString(R.string.quick_settings_compass_label);
+    }
+
+    @Override
+    protected void handleUpdateState(BooleanState state, Object arg) {
+        Float degrees = arg == null ? 0 :(float) arg;
+
+        state.value = mActive;
+        state.icon = ResourceIcon.get(R.drawable.ic_qs_compass);
+
+        if (state.value) {
+            state.state = Tile.STATE_ACTIVE;
+            if (arg != null) {
+                state.label = formatValueWithCardinalDirection(degrees);
+
+                float target = 360 - degrees;
+                float relative = target - mImage.getRotation();
+                if (relative > 180) relative -= 360;
+
+                mImage.setRotation(mImage.getRotation() + relative / 2);
+
+            } else {
+                state.label = mContext.getString(R.string.quick_settings_compass_init);
+                mImage.setRotation(0);
+            }
+            state.contentDescription = mContext.getString(
+                    R.string.accessibility_quick_settings_compass_on);
+        } else {
+            state.label = mContext.getString(R.string.quick_settings_compass_label);
+            state.contentDescription = mContext.getString(
+                    R.string.accessibility_quick_settings_compass_off);
+            state.state = Tile.STATE_INACTIVE;
+            if (mImage != null) {
+                mImage.setRotation(0);
+            }
+        }
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return LineageMetricsLogger.TILE_COMPASS;
+    }
+
+    @Override
+    protected String composeChangeAnnouncement() {
+        if (mState.value) {
+            return mContext.getString(R.string.accessibility_quick_settings_compass_changed_on);
+        } else {
+            return mContext.getString(R.string.accessibility_quick_settings_compass_changed_off);
+        }
+    }
+
+    @Override
+    public boolean isAvailable() {
+        return mAccelerationSensor != null && mGeomagneticFieldSensor != null;
+    }
+
+    @Override
+    public void handleSetListening(boolean listening) {
+        if (!listening) {
+            setListeningSensors(false);
+            mActive = false;
+        }
+    }
+
+    private String formatValueWithCardinalDirection(float degree) {
+        int cardinalDirectionIndex = (int) (Math.floor(((degree - 22.5) % 360) / 45) + 1) % 8;
+        String[] cardinalDirections = mContext.getResources().getStringArray(
+                R.array.cardinal_directions);
+
+        return mContext.getString(R.string.quick_settings_compass_value, degree,
+                cardinalDirections[cardinalDirectionIndex]);
+    }
+
+    @Override
+    public void onSensorChanged(SensorEvent event) {
+        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
+            if (mAcceleration == null) {
+                mAcceleration = event.values.clone();
+            }
+        } else {
+            // Magnetic field sensor
+            if (mGeomagnetic == null) {
+                mGeomagnetic = event.values.clone();
+            }
+        }
+
+        if (!mActive || !mListeningSensors || mAcceleration == null || mGeomagnetic == null) {
+            // Nothing to do at this moment
+            return;
+        }
+
+        float R[] = new float[9];
+        float I[] = new float[9];
+        if (!SensorManager.getRotationMatrix(R, I, mAcceleration, mGeomagnetic)) {
+            // Rotation matrix couldn't be calculated
+            return;
+        }
+
+        // Get the current orientation
+        float[] orientation = new float[3];
+        SensorManager.getOrientation(R, orientation);
+
+        // Convert azimuth to degrees
+        Float newDegree = Float.valueOf((float) Math.toDegrees(orientation[0]));
+        newDegree = (newDegree + 360) % 360;
+
+        refreshState(newDegree);
+    }
+
+    @Override
+    public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        // noop
+    }
+}
-- 
2.17.1

