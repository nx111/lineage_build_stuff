From 2b52c6118504f4c559ac27795210716acbc8c045 Mon Sep 17 00:00:00 2001
From: Yukako Murakami <Yukako.1.Murakami@sony.com>
Date: Thu, 30 Aug 2018 19:56:39 +0900
Subject: [PATCH 05/41] Do not move the multi-window divider when showing IME

The multi-window divider does not move
if the height of the bottom stack is enough
(the remaining height when showing IME is more than config value).

Bug: 113122828
Change-Id: I2a62f7a44cba663382eb9c18b9a1ba4dc8650e1b

# Conflicts:
#	core/res/res/values/config.xml
#	core/res/res/values/symbols.xml
---
 core/res/res/values/config.xml                |  3 +++
 core/res/res/values/symbols.xml               |  3 +++
 .../java/com/android/server/wm/TaskStack.java | 25 ++++++++++++++-----
 3 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index cf9bd122baf..4f0b4891d20 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -3527,4 +3527,7 @@
     <!-- Component name for default assistant on this device -->
     <string name="config_defaultAssistantComponentName"></string>
 
+    <!-- Minimal height of bottom stack when IME is displayed -->
+    <dimen name="config_bottom_stack_minimal_height">0dp</dimen>
+
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index d893468a53f..f1383af6c93 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -3419,4 +3419,7 @@
   <java-symbol type="integer" name="db_wal_truncate_size" />
 
   <java-symbol type="string" name="config_defaultAssistantComponentName" />
+
+  <!-- Minimal height of bottom stack when IME is displayed -->
+  <java-symbol type="dimen" name="config_bottom_stack_minimal_height" />
 </resources>
diff --git a/services/core/java/com/android/server/wm/TaskStack.java b/services/core/java/com/android/server/wm/TaskStack.java
index 76c9c262cd7..f4a665cf5bc 100644
--- a/services/core/java/com/android/server/wm/TaskStack.java
+++ b/services/core/java/com/android/server/wm/TaskStack.java
@@ -127,6 +127,7 @@ public class TaskStack extends WindowContainer<Task> implements
     private float mAdjustImeAmount;
     private float mAdjustDividerAmount;
     private final int mDockedStackMinimizeThickness;
+    private final int mBottomStackMinimalHeight;
 
     // If this is true, we are in the bounds animating mode. The task will be down or upscaled to
     // perfectly fit the region it would have been cropped to. We may also avoid certain logic we
@@ -163,6 +164,8 @@ public class TaskStack extends WindowContainer<Task> implements
         setController(controller);
         mDockedStackMinimizeThickness = service.mContext.getResources().getDimensionPixelSize(
                 com.android.internal.R.dimen.docked_stack_minimize_thickness);
+        mBottomStackMinimalHeight = service.mContext.getResources().getDimensionPixelSize(
+                com.android.internal.R.dimen.config_bottom_stack_minimal_height);
         EventLog.writeEvent(EventLogTags.WM_STACK_CREATED, stackId);
     }
 
@@ -1223,14 +1226,19 @@ public class TaskStack extends WindowContainer<Task> implements
                 getDisplayContent().mDividerControllerLocked.getContentWidthInactive();
 
         if (dockedSide == DOCKED_TOP) {
-            // If this stack is docked on top, we make it smaller so the bottom stack is not
+            // If this stack is docked on top,
+            // when the height of the bottom stack is enough, we do not change stack size.
+            // Otherwise we make it smaller so the bottom stack is not
             // occluded by IME. We shift its bottom up by the height of the IME, but
             // leaves at least 30% of the top stack visible.
+            final boolean moveDivider = mBottomStackMinimalHeight == 0 ? true
+                    : imeTop - getRawBounds().bottom - dividerWidth < mBottomStackMinimalHeight;
             final int minTopStackBottom =
                     getMinTopStackBottom(displayStableRect, getRawBounds().bottom);
-            final int bottom = Math.max(
+            final int bottom = moveDivider ? Math.max(
                     getRawBounds().bottom - yOffset + dividerWidth - dividerWidthInactive,
-                    minTopStackBottom);
+                    minTopStackBottom)
+                    : getRawBounds().bottom;
             mTmpAdjustedBounds.set(getRawBounds());
             mTmpAdjustedBounds.bottom = (int) (mAdjustImeAmount * bottom + (1 - mAdjustImeAmount)
                     * getRawBounds().bottom);
@@ -1239,18 +1247,23 @@ public class TaskStack extends WindowContainer<Task> implements
             // When the stack is on bottom and has no focus, it's only adjusted for divider width.
             final int dividerWidthDelta = dividerWidthInactive - dividerWidth;
 
-            // When the stack is on bottom and has focus, it needs to be moved up so as to
+            // When the stack is on bottom and has focus,
+            // if the height of the bottom stack is enough, we do not change stack size.
+            // Otherwise it needs to be moved up so as to
             // not occluded by IME, and at the same time adjusted for divider width.
             // We try to move it up by the height of the IME window, but only to the extent
             // that leaves at least 30% of the top stack visible.
             // 'top' is where the top of bottom stack will move to in this case.
+            final boolean moveDivider = mBottomStackMinimalHeight == 0 ? true
+                    : imeTop - getRawBounds().top < mBottomStackMinimalHeight;
             final int topBeforeImeAdjust =
                     getRawBounds().top - dividerWidth + dividerWidthInactive;
             final int minTopStackBottom =
                     getMinTopStackBottom(displayStableRect,
                             getRawBounds().top - dividerWidth);
-            final int top = Math.max(
-                    getRawBounds().top - yOffset, minTopStackBottom + dividerWidthInactive);
+            final int top = moveDivider ? Math.max(
+                    getRawBounds().top - yOffset, minTopStackBottom + dividerWidthInactive)
+                    : topBeforeImeAdjust;
 
             mTmpAdjustedBounds.set(getRawBounds());
             // Account for the adjustment for IME and divider width separately.
-- 
2.17.1

