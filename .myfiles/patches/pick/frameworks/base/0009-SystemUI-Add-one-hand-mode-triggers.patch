From ea9c38b87ab01f5247e90667443e31d2da4e6c5a Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 16 Oct 2018 14:33:30 +0200
Subject: [PATCH 09/48] SystemUI: Add one hand mode triggers

Change-Id: Id4009d80d72bf23c6777ab1d722d204d04a1d87e
---
 packages/SystemUI/AndroidManifest.xml         |   2 +
 packages/SystemUI/res/values/dimens.xml       |   3 +
 .../systemui/onehand/SlideTouchEvent.java     | 154 ++++++++++++++++++
 .../statusbar/phone/NavigationBarView.java    |   6 +
 4 files changed, 165 insertions(+)
 create mode 100644 packages/SystemUI/src/com/android/systemui/onehand/SlideTouchEvent.java

diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 5599b5a2837..dbbc58fb8ba 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -213,6 +213,8 @@
 
     <uses-permission android:name="android.permission.HIDE_NON_SYSTEM_OVERLAY_WINDOWS" />
 
+    <uses-permission android:name="android.permission.ONE_HANDED_MODE" />
+
     <protected-broadcast android:name="com.android.settingslib.action.REGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settingslib.action.UNREGISTER_SLICE_RECEIVER" />
 
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index 79e1fae98c2..d643a08e92c 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -1023,4 +1023,7 @@
     <!-- How much we expand the touchable region of the status bar below the notch to catch touches
          that just start below the notch. -->
     <dimen name="display_cutout_touchable_region_size">12dp</dimen>
+
+    <dimen name="navbar_single_hand_mode_horizontal_threshhold">90dp</dimen>
+    <dimen name="navbar_single_hand_mode_vertical_threshhold">48dp</dimen>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/onehand/SlideTouchEvent.java b/packages/SystemUI/src/com/android/systemui/onehand/SlideTouchEvent.java
new file mode 100644
index 00000000000..951ca4a63cf
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/onehand/SlideTouchEvent.java
@@ -0,0 +1,154 @@
+package com.android.systemui.onehand;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.RemoteException;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.IWindowManager;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.ViewConfiguration;
+import android.view.WindowManagerGlobal;
+
+import com.android.systemui.R;
+
+public class SlideTouchEvent {
+    private static final String TAG = "SlideTouchEvent";
+
+    private static final String EXTRA_ALIGNMENT_STATE = "alignment_state";
+    private static final int EXTRA_ALIGNMENT_STATE_UNALIGNED = -1;
+    private static final int EXTRA_ALIGNMENT_STATE_LEFT = 0;
+    private static final int EXTRA_ALIGNMENT_STATE_RIGHT = 1;
+
+    private static final String ACTION_ONEHAND_TRIGGER_EVENT =
+            "com.android.server.wm.onehand.intent.action.ONEHAND_TRIGGER_EVENT";
+
+    /**
+     * The units you would like the velocity in. A value of 1 provides pixels per millisecond, 1000 provides pixels per second, etc.
+     */
+    private static final int UNITS = 1000;
+
+    public static final float SCALE = (float) 3 / 4;
+
+    private float[] mDownPoint = new float[2];
+    private float mTriggerSingleHandMode;
+    private float mVerticalProhibit;
+
+    private int mMinimumFlingVelocity;
+    private int mMaximumFlingVelocity;
+
+    private VelocityTracker mVelocityTracker;
+    private Context mContext;
+    private IWindowManager wm;
+
+    private boolean mFlag = false;
+
+    public SlideTouchEvent(Context context) {
+        mContext = context;
+        init();
+    }
+
+    private void init() {
+        if (null == mContext) {
+            Log.e(TAG, "SlideTouchEvent init return...");
+            return;
+        }
+
+        wm = WindowManagerGlobal.getWindowManagerService();
+
+        final ViewConfiguration configuration = ViewConfiguration.get(mContext);
+        mMinimumFlingVelocity = configuration.getScaledMinimumFlingVelocity();
+        mMaximumFlingVelocity = configuration.getScaledMaximumFlingVelocity();
+
+        mTriggerSingleHandMode = mContext.getResources().getDimension(R.dimen.navbar_single_hand_mode_horizontal_threshhold);
+        mVerticalProhibit = mContext.getResources().getDimension(R.dimen.navbar_single_hand_mode_vertical_threshhold);
+    }
+
+    public void handleTouchEvent(MotionEvent event) {
+        if (event == null) {
+            return;
+        }
+
+        try {
+            if (!wm.isOneHandedModeAvailable()) {
+                return;
+            }
+        } catch (RemoteException e) {
+            e.rethrowAsRuntimeException();
+        }
+
+        if (mVelocityTracker == null) {
+            mVelocityTracker = VelocityTracker.obtain();
+        }
+
+        mVelocityTracker.addMovement(event);
+
+        switch (event.getActionMasked()) {
+            case MotionEvent.ACTION_DOWN:
+                mFlag = true;
+                mDownPoint[0] = event.getX();
+                mDownPoint[1] = event.getY();
+                break;
+            case MotionEvent.ACTION_POINTER_UP:
+                if (event.getActionIndex() == 0) {
+                    mFlag = false;
+                }
+                break;
+            case MotionEvent.ACTION_UP:
+                if (!mFlag) {
+                    break;
+                }
+                mFlag = false;
+                final VelocityTracker velocityTracker = mVelocityTracker;
+                velocityTracker.computeCurrentVelocity(UNITS, mMaximumFlingVelocity);
+
+                final int pointerId = event.getPointerId(0);
+                final float velocityX = velocityTracker.getXVelocity(pointerId);
+
+                Log.i(TAG, "vel=" + Math.abs(velocityX) + ", MinimumFlingVelocity=" + mMinimumFlingVelocity);
+                if (Math.abs(velocityX) > mMinimumFlingVelocity) {
+                    final int historySize = event.getHistorySize();
+
+                    for (int i = 0; i < historySize + 1; i++) {
+                        float x = i < historySize ? event.getHistoricalX(i) : event.getX();
+                        float y = i < historySize ? event.getHistoricalY(i) : event.getY();
+                        float distanceX = mDownPoint[0] - x;
+                        float distanceY = mDownPoint[1] - y;
+                        if (Math.abs(distanceY) > Math.abs(distanceX) || Math.abs(distanceY) > mVerticalProhibit) {
+                            Log.i(TAG, "Sliding distanceY > distancex, " + distanceY + ", " + distanceX);
+                            return;
+                        }
+                        if (Math.abs(distanceX) > mTriggerSingleHandMode) {
+                            if (Configuration.ORIENTATION_PORTRAIT == mContext.getResources().getConfiguration().orientation) {
+                                toggleOneHandMode(distanceX);
+                            }
+                        } else {
+                            Log.i(TAG, "Sliding distance is too short, can not trigger the one hand mode");
+                        }
+                    }
+                }
+                break;
+            default:
+                break;
+        }
+    }
+
+    private void toggleOneHandMode(float distanceX) {
+        if (distanceX > 0) {
+            sendBroadcast(EXTRA_ALIGNMENT_STATE_LEFT);
+        }
+
+        if (distanceX < 0) {
+            sendBroadcast(EXTRA_ALIGNMENT_STATE_RIGHT);
+        }
+    }
+
+    private void sendBroadcast(int state) {
+        Intent intent = new Intent();
+        intent.setAction(ACTION_ONEHAND_TRIGGER_EVENT);
+        intent.putExtra(EXTRA_ALIGNMENT_STATE, state);
+        mContext.sendBroadcast(intent);
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
index 217f307d9b6..b9c7cd97f8b 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NavigationBarView.java
@@ -65,6 +65,7 @@ import com.android.systemui.OverviewProxyService;
 import com.android.systemui.R;
 import com.android.systemui.RecentsComponent;
 import com.android.systemui.SysUiServiceProvider;
+import com.android.systemui.onehand.SlideTouchEvent;
 import com.android.systemui.plugins.PluginListener;
 import com.android.systemui.plugins.PluginManager;
 import com.android.systemui.plugins.statusbar.phone.NavGesture;
@@ -160,6 +161,7 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
 
     private final SparseArray<ButtonDispatcher> mButtonDispatchers = new SparseArray<>();
     private Configuration mConfiguration;
+    private SlideTouchEvent mSlideTouchEvent;
 
     private NavigationBarInflaterView mNavigationInflaterView;
     private RecentsComponent mRecentsComponent;
@@ -292,6 +294,8 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
         mOverviewProxyService = Dependency.get(OverviewProxyService.class);
         mRecentsOnboarding = new RecentsOnboarding(context, mOverviewProxyService);
 
+        mSlideTouchEvent = new SlideTouchEvent(context);
+
         mConfiguration = new Configuration();
         mConfiguration.updateFrom(context.getResources().getConfiguration());
         reloadNavIcons();
@@ -339,6 +343,7 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
     @Override
     public boolean onInterceptTouchEvent(MotionEvent event) {
         final boolean deadZoneConsumed = shouldDeadZoneConsumeTouchEvents(event);
+        mSlideTouchEvent.handleTouchEvent(event);
         switch (event.getActionMasked()) {
             case ACTION_DOWN:
                 int x = (int) event.getX();
@@ -364,6 +369,7 @@ public class NavigationBarView extends FrameLayout implements PluginListener<Nav
     @Override
     public boolean onTouchEvent(MotionEvent event) {
         shouldDeadZoneConsumeTouchEvents(event);
+        mSlideTouchEvent.handleTouchEvent(event);
         if (mGestureHelper.onTouchEvent(event)) {
             return true;
         }
-- 
2.17.1

