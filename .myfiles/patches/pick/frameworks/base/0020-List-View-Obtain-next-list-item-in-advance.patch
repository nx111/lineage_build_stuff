From 24193850be5b052a03a2b877b1ac946d697d8434 Mon Sep 17 00:00:00 2001
From: Sudharshun Iyengar <sudharsh@codeaurora.org>
Date: Fri, 18 May 2018 16:29:02 -0700
Subject: [PATCH 20/38] List View: Obtain next list item in advance

This feature improves rendering headroom by starting an obtain view
in between two choreographers on the UI thread. The item is obtained
only if the feature detectes the possibility of an obtain view on the
next choreographer frame.

CRs-Fixed: 2258374

Change-Id: I2013902e184c90281f71c68a866c077fe60559d7
---
 core/java/android/widget/AbsListView.java | 23 ++++++
 core/java/android/widget/ListView.java    | 94 ++++++++++++++++++++++-
 2 files changed, 113 insertions(+), 4 deletions(-)

diff --git a/core/java/android/widget/AbsListView.java b/core/java/android/widget/AbsListView.java
index 7c2ba6b66d2..81f5412c4b6 100644
--- a/core/java/android/widget/AbsListView.java
+++ b/core/java/android/widget/AbsListView.java
@@ -116,6 +116,11 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te
     private static final double TOUCH_SLOP_MIN = 0.6;
     private static final double TOUCH_SLOP_MAX = 1.0;
 
+    /**
+     * Property to enable/disable pre-obtain view
+     */
+    private final boolean PREOBTAIN_ENABLE = SystemProperties.getBoolean("ro.vendor.scroll.preobtain.enable", false);
+
     /**
      * Disables the transcript mode.
      *
@@ -245,6 +250,11 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te
      */
     private final Thread mOwnerThread;
 
+    /**
+     * Absolute incremental delta Y value from the previous choreographer action
+     */
+    int mOldIncrementalDeltaY;
+
     /**
      * Controls if/how the user may choose/check items in the list
      */
@@ -5315,6 +5325,10 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te
             fillGap(down);
         }
 
+        if(PREOBTAIN_ENABLE) {
+            mOldIncrementalDeltaY = absIncrementalDeltaY;
+            findNextGap(down);
+        }
         mRecycler.fullyDetachScrapViews();
         boolean selectorOnScreen = false;
         if (!inTouchMode && mSelectedPosition != INVALID_POSITION) {
@@ -5371,6 +5385,15 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te
      */
     abstract void fillGap(boolean down);
 
+    /**
+     * Find if the next choreographer frame would have an obtain view call.
+     *
+     * @param down true if the scroll is going down, false if it is going up
+     */
+    void findNextGap(boolean down) {
+
+    }
+
     void hideSelector() {
         if (mSelectedPosition != INVALID_POSITION) {
             if (mLayoutMode != LAYOUT_SPECIFIC) {
diff --git a/core/java/android/widget/ListView.java b/core/java/android/widget/ListView.java
index fc9e8e70c20..035757577be 100644
--- a/core/java/android/widget/ListView.java
+++ b/core/java/android/widget/ListView.java
@@ -48,6 +48,7 @@ import android.view.accessibility.AccessibilityNodeInfo.CollectionInfo;
 import android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo;
 import android.view.accessibility.AccessibilityNodeProvider;
 import android.widget.RemoteViews.RemoteView;
+import android.os.Handler;
 
 import com.android.internal.R;
 
@@ -204,6 +205,9 @@ public class ListView extends AbsListView {
     private final Rect mTempRect = new Rect();
     private Paint mDividerPaint;
 
+    private Handler mHandler = null;
+    private FillNextGap mFillNextGap = null;
+
     // the single allocated result per list view; kinda cheesey but avoids
     // allocating these thingies too often.
     private final ArrowScrollFocusResult mArrowScrollFocusResult = new ArrowScrollFocusResult();
@@ -739,6 +743,10 @@ public class ListView extends AbsListView {
      */
     @Override
     void fillGap(boolean down) {
+        fillGap(down, false);
+    }
+
+    private void fillGap(boolean down, boolean isPreObtain) {
         final int count = getChildCount();
         if (down) {
             int paddingTop = 0;
@@ -747,7 +755,7 @@ public class ListView extends AbsListView {
             }
             final int startOffset = count > 0 ? getChildAt(count - 1).getBottom() + mDividerHeight :
                     paddingTop;
-            fillDown(mFirstPosition + count, startOffset);
+            fillDown(mFirstPosition + count, startOffset, isPreObtain);
             correctTooHigh(getChildCount());
         } else {
             int paddingBottom = 0;
@@ -756,11 +764,60 @@ public class ListView extends AbsListView {
             }
             final int startOffset = count > 0 ? getChildAt(0).getTop() - mDividerHeight :
                     getHeight() - paddingBottom;
-            fillUp(mFirstPosition - 1, startOffset);
+            fillUp(mFirstPosition - 1, startOffset, isPreObtain);
             correctTooLow(getChildCount());
         }
     }
 
+    @Override
+    void findNextGap(boolean down) {
+        final int count = getChildCount();
+        if(mHandler == null) {
+            mHandler = new Handler();
+        }
+        if(mFillNextGap == null) {
+            mFillNextGap = new FillNextGap();
+        }
+        if(down) {
+            int paddingTop = 0;
+            if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
+                paddingTop = getListPaddingTop();
+            }
+            final int nextTop = count > 0 ? getChildAt(count - 1).getBottom() + mDividerHeight :
+                    paddingTop;
+
+            int end = (mBottom - mTop);
+            if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
+                end -= mListPadding.bottom;
+            }
+
+            if((nextTop - mOldIncrementalDeltaY) < end) {
+                if(mFillNextGap != null && mHandler != null) {
+                    mFillNextGap.down = down;
+                    mHandler.post(mFillNextGap);
+                }
+            }
+        }
+        else {
+            int paddingBottom = 0;
+            if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
+                paddingBottom = getListPaddingBottom();
+            }
+            final int nextBottom = count > 0 ? getChildAt(0).getTop() - mDividerHeight :
+                    getHeight() - paddingBottom;
+            int end = 0;
+            if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
+                end = mListPadding.top;
+            }
+            if((nextBottom + mOldIncrementalDeltaY) > end) {
+                if(mFillNextGap != null && mHandler != null) {
+                    mFillNextGap.down = down;
+                    mHandler.post(mFillNextGap);
+                }
+            }
+        }
+    }
+
     /**
      * Fills the list from pos down to the end of the list view.
      *
@@ -773,14 +830,22 @@ public class ListView extends AbsListView {
      *         range that we draw.
      */
     private View fillDown(int pos, int nextTop) {
+        return fillDown(pos, nextTop, false);
+    }
+
+    private View fillDown(int pos, int nextTop, boolean isPreObtain) {
         View selectedView = null;
 
+        int correction = 0;
         int end = (mBottom - mTop);
         if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
             end -= mListPadding.bottom;
         }
 
-        while (nextTop < end && pos < mItemCount) {
+        if(isPreObtain) {
+            correction = mOldIncrementalDeltaY;
+        }
+        while ((nextTop - correction) < end && pos < mItemCount) {
             // is this the selected item?
             boolean selected = pos == mSelectedPosition;
             View child = makeAndAddView(pos, nextTop, true, mListPadding.left, selected);
@@ -807,17 +872,26 @@ public class ListView extends AbsListView {
      * @return The view that is currently selected
      */
     private View fillUp(int pos, int nextBottom) {
+        return fillUp(pos, nextBottom, false);
+    }
+
+    private View fillUp(int pos, int nextBottom, boolean isPreObtain) {
         View selectedView = null;
 
+        int correction = 0;
         int end = 0;
         if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {
             end = mListPadding.top;
         }
 
-        while (nextBottom > end && pos >= 0) {
+        if(isPreObtain) {
+            correction = mOldIncrementalDeltaY;
+        }
+        while ((nextBottom + correction) > end && pos >= 0) {
             // is this the selected item?
             boolean selected = pos == mSelectedPosition;
             View child = makeAndAddView(pos, nextBottom, false, mListPadding.left, selected);
+
             nextBottom = child.getTop() - mDividerHeight;
             if (selected) {
                 selectedView = child;
@@ -4152,4 +4226,16 @@ public class ListView extends AbsListView {
             mDataSetObserver.onChanged();
         }
     }
+
+    /**
+     * Runnable object created from this class will be pushed into the UI thread's
+     * message queue to start filling a gap in the list view, if any, as soon as
+     * the UI thread finishes current choreographer work.
+     */
+    private class FillNextGap implements Runnable {
+        public boolean down;
+        public void run() {
+            fillGap(down, true);
+        }
+    }
 }
-- 
2.17.1

