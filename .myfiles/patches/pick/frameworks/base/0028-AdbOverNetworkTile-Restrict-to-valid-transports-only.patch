From c76f1e1a2190fb3424ba52c827761750590e0e52 Mon Sep 17 00:00:00 2001
From: Bruno Martins <bgcngm@gmail.com>
Date: Thu, 20 Jun 2019 17:52:31 +0100
Subject: [PATCH 28/36] AdbOverNetworkTile: Restrict to valid transports only

 * There we go again, this time considering VPN usecase.

Change-Id: I9d7f214c0b7c930d4470099ab6e66edd746e73d1
---
 .../systemui/qs/tiles/AdbOverNetworkTile.java   | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
index 82e2ab2014e..671940555d7 100644
--- a/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/AdbOverNetworkTile.java
@@ -17,12 +17,17 @@
 
 package com.android.systemui.qs.tiles;
 
+import static android.net.NetworkCapabilities.TRANSPORT_ETHERNET;
+import static android.net.NetworkCapabilities.TRANSPORT_WIFI;
+import static android.net.NetworkCapabilities.TRANSPORT_VPN;
+
 import android.content.Context;
 import android.content.Intent;
 import android.database.ContentObserver;
 import android.net.ConnectivityManager;
 import android.net.LinkAddress;
 import android.net.Network;
+import android.net.NetworkCapabilities;
 import android.net.Uri;
 import android.os.UserHandle;
 import android.provider.Settings;
@@ -53,6 +58,7 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
 
     private final ConnectivityManager mConnectivityManager;
 
+    private Network mNetwork;
     private String mNetworkAddress;
 
     private static final Intent SETTINGS_DEVELOPMENT =
@@ -120,11 +126,18 @@ public class AdbOverNetworkTile extends QSTileImpl<BooleanState> {
     }
 
     private boolean canEnableAdbNetwork() {
-        return isAdbEnabled() && isNetworkAvailable();
+        return isAdbEnabled() && isNetworkAvailable() && isNetworkUsingValidTransport();
     }
 
     private boolean isNetworkAvailable() {
-        return mNetworkAddress != null;
+        mNetwork = mConnectivityManager.getActiveNetwork();
+        return mNetwork != null;
+    }
+
+    private boolean isNetworkUsingValidTransport() {
+        NetworkCapabilities networkCaps = mConnectivityManager.getNetworkCapabilities(mNetwork);
+        return networkCaps.hasTransport(TRANSPORT_ETHERNET) ||
+                networkCaps.hasTransport(TRANSPORT_WIFI) || networkCaps.hasTransport(TRANSPORT_VPN);
     }
 
     private void toggleAction() {
-- 
2.17.1

