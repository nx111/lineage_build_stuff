From cf3852688d9ab0004a83878211da51dbe2b838e3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?eray=20or=C3=A7unus?= <erayorcunus@gmail.com>
Date: Fri, 22 Mar 2019 01:15:45 +0300
Subject: [PATCH 32/40] SystemUI: Bring back lockscreen tuner (1/2)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* Enables us to change lockscreen shortcuts, but they will be disabled as default.
  (Leaving SystemUI/config.xml as it is makes this possible.)

* Adds Voice Assist and Camera shortcuts to tuner and replaces "None" shortcut
  with real "None". Until now, "None" was either "None" or default shortcut, depending
  on "config_keyguardShowBlablaAffordance".

* It will be located under Settings > Security & Location > Lock screen preferences

Change-Id: Ibb107e550ff492219fb6fedd63f8fc8ee89753a9
Signed-off-by: eray or√ßunus <erayorcunus@gmail.com>
---
 packages/SystemUI/LineageManifest.xml         | 14 +++++
 packages/SystemUI/res/values/cm_strings.xml   |  3 +
 .../phone/KeyguardBottomAreaView.java         | 61 +++++++++++++++++--
 .../phone/NotificationPanelView.java          | 14 ++++-
 .../systemui/statusbar/phone/StatusBar.java   | 15 +++--
 .../systemui/tuner/LockscreenFragment.java    | 40 +++++++++++-
 .../systemui/tuner/ShortcutPicker.java        | 51 +++++++++++++++-
 .../android/systemui/tuner/TunerActivity.java |  2 +
 8 files changed, 181 insertions(+), 19 deletions(-)

diff --git a/packages/SystemUI/LineageManifest.xml b/packages/SystemUI/LineageManifest.xml
index ce7adbfd808..2eb679c34c0 100644
--- a/packages/SystemUI/LineageManifest.xml
+++ b/packages/SystemUI/LineageManifest.xml
@@ -64,6 +64,20 @@
             </intent-filter>
         </activity-alias>
 
+        <activity-alias
+            android:name=".tuner.LockscreenFragment"
+            android:targetActivity=".tuner.TunerActivity"
+            android:icon="@drawable/tuner"
+            android:theme="@style/TunerSettings"
+            android:label="@string/tuner_lock_screen"
+            android:process=":tuner"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="com.android.settings.action.LOCK_SCREEN_TUNER" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity-alias>
+
         <activity-alias
             android:name=".tuner.TunerActivity"
             android:targetActivity=".tuner.TunerActivity"
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index 72efa4a640e..22ddc837645 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -95,4 +95,7 @@
 
     <!-- Button that controls inversion of layout of navigation bar -->
     <string name="nav_bar_layout_inverse">Invert layout</string>
+
+    <!-- Hint for custom lockscreen shortcuts -->
+    <string name="custom_swipe_hint">Swipe from icon for <xliff:g name="target">%s</xliff:g></string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
index 60d62d52995..a20c02fa729 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java
@@ -23,6 +23,8 @@ import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_LEFT_BUTT
 import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_LEFT_UNLOCK;
 import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_RIGHT_BUTTON;
 import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_RIGHT_UNLOCK;
+import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_SHORTCUT_CAMERA;
+import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_SHORTCUT_VOICE_ASSIST;
 
 import android.app.ActivityManager;
 import android.app.ActivityOptions;
@@ -162,9 +164,11 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
 
     private IntentButton mRightButton = new DefaultRightButton();
     private Extension<IntentButton> mRightExtension;
+    private CharSequence mRightButtonTarget;
     private String mRightButtonStr;
     private IntentButton mLeftButton = new DefaultLeftButton();
     private Extension<IntentButton> mLeftExtension;
+    private CharSequence mLeftButtonTarget;
     private String mLeftButtonStr;
     private LockscreenGestureLogger mLockscreenGestureLogger = new LockscreenGestureLogger();
     private boolean mDozing;
@@ -358,6 +362,7 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
 
     private void updateRightAffordanceIcon() {
         IconState state = mRightButton.getIcon();
+        mRightButtonTarget = state.contentDescription;
         mRightAffordanceView.setVisibility(!mDozing && state.isVisible ? View.VISIBLE : View.GONE);
         mRightAffordanceView.setImageDrawable(state.drawable, state.tint);
         mRightAffordanceView.setContentDescription(state.contentDescription);
@@ -410,6 +415,7 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
 
     private void updateLeftAffordanceIcon() {
         IconState state = mLeftButton.getIcon();
+        mLeftButtonTarget = state.contentDescription;
         mLeftAffordanceView.setVisibility(!mDozing && state.isVisible ? View.VISIBLE : View.GONE);
         mLeftAffordanceView.setImageDrawable(state.drawable, state.tint);
         mLeftAffordanceView.setContentDescription(state.contentDescription);
@@ -804,15 +810,36 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
         inflateCameraPreview();
     }
 
+    public CharSequence getShortcutTargetName(boolean rightIcon){
+        if (rightIcon) {
+            return mRightButtonTarget;
+        } else {
+            return mLeftButtonTarget;
+        }
+    }
+
+    private IntentButton translateTunerButton(IntentButton button) {
+        IconState buttonIcon = button.getIcon();
+
+        if (!buttonIcon.isVisible) {
+            if (buttonIcon.contentDescription.equals(LOCKSCREEN_SHORTCUT_CAMERA)) {
+                return new DefaultRightButton(true);
+            } else if (buttonIcon.contentDescription.equals(LOCKSCREEN_SHORTCUT_VOICE_ASSIST)) {
+                return new DefaultLeftButton(true);
+            }
+        }
+        return button;
+    }
+
     private void setRightButton(IntentButton button) {
-        mRightButton = button;
+        mRightButton = translateTunerButton(button);
         updateRightAffordanceIcon();
         updateCameraVisibility();
         inflateCameraPreview();
     }
 
     private void setLeftButton(IntentButton button) {
-        mLeftButton = button;
+        mLeftButton = translateTunerButton(button);
         if (!(mLeftButton instanceof DefaultLeftButton)) {
             mLeftIsVoiceAssist = false;
         }
@@ -857,12 +884,22 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
     private class DefaultLeftButton implements IntentButton {
 
         private IconState mIconState = new IconState();
+        private boolean mForceVisibility;
+
+        public DefaultLeftButton(boolean forceVisibility) {
+            mForceVisibility = forceVisibility;
+        }
+
+        public DefaultLeftButton() {
+            this(false);
+        }
 
         @Override
         public IconState getIcon() {
             mLeftIsVoiceAssist = canLaunchVoiceAssist();
             final boolean showAffordance =
-                    getResources().getBoolean(R.bool.config_keyguardShowLeftAffordance);
+                    getResources().getBoolean(R.bool.config_keyguardShowLeftAffordance) ||
+                    mForceVisibility;
             if (mLeftIsVoiceAssist) {
                 mIconState.isVisible = mUserSetupComplete && showAffordance;
                 if (mLeftAssistIcon == null) {
@@ -890,14 +927,26 @@ public class KeyguardBottomAreaView extends FrameLayout implements View.OnClickL
     private class DefaultRightButton implements IntentButton {
 
         private IconState mIconState = new IconState();
+        private boolean mForceVisibility;
+
+        public DefaultRightButton(boolean forceVisibility) {
+            mForceVisibility = forceVisibility;
+        }
+
+        public DefaultRightButton() {
+            this(false);
+        }
 
         @Override
         public IconState getIcon() {
             ResolveInfo resolved = resolveCameraIntent();
-            boolean isCameraDisabled = (mStatusBar != null) && !mStatusBar.isCameraAllowedByAdmin();
+            boolean isCameraDisabled =
+                    (mStatusBar != null) && !mStatusBar.isCameraAllowedByAdmin();
+            final boolean showAffordance =
+                    getResources().getBoolean(R.bool.config_keyguardShowCameraAffordance) ||
+                    mForceVisibility;
             mIconState.isVisible = !isCameraDisabled && resolved != null
-                    && getResources().getBoolean(R.bool.config_keyguardShowCameraAffordance)
-                    && mUserSetupComplete;
+                    && showAffordance && mUserSetupComplete;
             mIconState.drawable = mContext.getDrawable(R.drawable.ic_camera_alt_24dp);
             mIconState.contentDescription =
                     mContext.getString(R.string.accessibility_camera_button);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
index ce4ebb2fa05..ffbd86588ed 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelView.java
@@ -36,6 +36,7 @@ import android.graphics.PorterDuff;
 import android.graphics.PorterDuffXfermode;
 import android.graphics.Rect;
 import android.os.PowerManager;
+import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.util.FloatProperty;
 import android.util.Log;
@@ -2186,13 +2187,20 @@ public class NotificationPanelView extends PanelView implements
             }
         });
         rightIcon = getLayoutDirection() == LAYOUT_DIRECTION_RTL ? !rightIcon : rightIcon;
+
+        // Create swipe hint with app name. If it's empty, event calls below will use default hints
+        CharSequence hint = mKeyguardBottomArea.getShortcutTargetName(rightIcon);
+        if (!TextUtils.isEmpty(hint)) {
+            hint = mContext.getString(R.string.custom_swipe_hint, hint);
+        }
+
         if (rightIcon) {
-            mStatusBar.onCameraHintStarted();
+            mStatusBar.onCameraHintStarted(hint);
         } else {
             if (mKeyguardBottomArea.isLeftVoiceAssist()) {
-                mStatusBar.onVoiceAssistHintStarted();
+                mStatusBar.onVoiceAssistHintStarted(hint);
             } else {
-                mStatusBar.onPhoneHintStarted();
+                mStatusBar.onPhoneHintStarted(hint);
             }
         }
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index 45ac8c2fec4..b71e54dfa7a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -4416,19 +4416,22 @@ public class StatusBar extends SystemUI implements DemoMode, TunerService.Tunabl
         mKeyguardIndicationController.hideTransientIndicationDelayed(HINT_RESET_DELAY_MS);
     }
 
-    public void onCameraHintStarted() {
+    public void onCameraHintStarted(CharSequence hint) {
         mFalsingManager.onCameraHintStarted();
-        mKeyguardIndicationController.showTransientIndication(R.string.camera_hint);
+        hint = (TextUtils.isEmpty(hint) ? mContext.getString(R.string.camera_hint) : hint);
+        mKeyguardIndicationController.showTransientIndication(hint);
     }
 
-    public void onVoiceAssistHintStarted() {
+    public void onVoiceAssistHintStarted(CharSequence hint) {
         mFalsingManager.onLeftAffordanceHintStarted();
-        mKeyguardIndicationController.showTransientIndication(R.string.voice_hint);
+        hint = (TextUtils.isEmpty(hint) ? mContext.getString(R.string.voice_hint) : hint);
+        mKeyguardIndicationController.showTransientIndication(hint);
     }
 
-    public void onPhoneHintStarted() {
+    public void onPhoneHintStarted(CharSequence hint) {
         mFalsingManager.onLeftAffordanceHintStarted();
-        mKeyguardIndicationController.showTransientIndication(R.string.phone_hint);
+        hint = (TextUtils.isEmpty(hint) ? mContext.getString(R.string.phone_hint) : hint);
+        mKeyguardIndicationController.showTransientIndication(hint);
     }
 
     public void onTrackingStopped(boolean expand) {
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
index 2df1793acb4..3f8057bcc34 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/LockscreenFragment.java
@@ -25,6 +25,7 @@ import android.content.pm.LauncherApps;
 import android.content.pm.LauncherApps.ShortcutQuery;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.ShortcutInfo;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.ScaleDrawable;
 import android.os.Bundle;
@@ -72,6 +73,9 @@ public class LockscreenFragment extends PreferenceFragment {
     public static final String LOCKSCREEN_LEFT_UNLOCK = "sysui_keyguard_left_unlock";
     public static final String LOCKSCREEN_RIGHT_BUTTON = "sysui_keyguard_right";
     public static final String LOCKSCREEN_RIGHT_UNLOCK = "sysui_keyguard_right_unlock";
+    public static final String LOCKSCREEN_SHORTCUT_CAMERA = "c";
+    public static final String LOCKSCREEN_SHORTCUT_NONE = "n";
+    public static final String LOCKSCREEN_SHORTCUT_VOICE_ASSIST = "v";
 
     private final ArrayList<Tunable> mTunables = new ArrayList<>();
     private TunerService mTunerService;
@@ -96,7 +100,7 @@ public class LockscreenFragment extends PreferenceFragment {
         Preference shortcut = findPreference(buttonSetting);
         SwitchPreference unlock = (SwitchPreference) findPreference(unlockKey);
         addTunable((k, v) -> {
-            boolean visible = !TextUtils.isEmpty(v);
+            boolean visible = v.contains("/") || v.contains("::");
             unlock.setVisible(visible);
             setSummary(shortcut, v);
         }, buttonSetting);
@@ -129,6 +133,10 @@ public class LockscreenFragment extends PreferenceFragment {
             ActivityInfo info = getActivityinfo(getContext(), value);
             shortcut.setSummary(info != null ? info.loadLabel(getContext().getPackageManager())
                     : null);
+        } else if (value.equals(LOCKSCREEN_SHORTCUT_VOICE_ASSIST)) {
+            shortcut.setSummary(R.string.accessibility_voice_assist_button);
+        } else if (value.equals(LOCKSCREEN_SHORTCUT_CAMERA)) {
+            shortcut.setSummary(R.string.accessibility_camera_button);
         } else {
             shortcut.setSummary(R.string.lockscreen_none);
         }
@@ -344,12 +352,42 @@ public class LockscreenFragment extends PreferenceFragment {
                     if (info != null) {
                         return new ActivityButton(mContext, info);
                     }
+                // Voice Assist or Camera shortcut
+                } else if (buttonStr.equals(LOCKSCREEN_SHORTCUT_CAMERA) ||
+                        buttonStr.equals(LOCKSCREEN_SHORTCUT_VOICE_ASSIST)) {
+                    return new FakeButton(buttonStr);
+                // Remove shortcut
+                } else if (buttonStr.equals(LOCKSCREEN_SHORTCUT_NONE)) {
+                    return new FakeButton("");
                 }
             }
             return null;
         }
     }
 
+    private static class FakeButton implements IntentButton {
+        private final IconState mIconState;
+
+        public FakeButton(String description) {
+            mIconState = new IconState();
+            mIconState.contentDescription = description;
+            mIconState.isVisible = false;
+            mIconState.drawable = new ColorDrawable(0);
+            mIconState.tint = false;
+        }
+
+        @Override
+        public IconState getIcon() {
+            return mIconState;
+        }
+
+        @Override
+        public Intent getIntent() {
+            // Just a placeholder
+            return new Intent(Intent.ACTION_DIAL);
+        }
+    }
+
     private static class ShortcutButton implements IntentButton {
         private final Shortcut mShortcut;
         private final IconState mIconState;
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/ShortcutPicker.java b/packages/SystemUI/src/com/android/systemui/tuner/ShortcutPicker.java
index 533388a1a5d..07c4149ad05 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/ShortcutPicker.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/ShortcutPicker.java
@@ -15,6 +15,9 @@
 package com.android.systemui.tuner;
 
 import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_LEFT_BUTTON;
+import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_SHORTCUT_CAMERA;
+import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_SHORTCUT_NONE;
+import static com.android.systemui.tuner.LockscreenFragment.LOCKSCREEN_SHORTCUT_VOICE_ASSIST;
 
 import android.content.Context;
 import android.content.pm.LauncherActivityInfo;
@@ -29,6 +32,7 @@ import android.support.v7.preference.PreferenceCategory;
 import android.support.v7.preference.PreferenceScreen;
 import android.support.v7.preference.PreferenceViewHolder;
 
+import com.android.systemui.assist.AssistManager;
 import com.android.systemui.Dependency;
 import com.android.systemui.R;
 import com.android.systemui.tuner.ShortcutParser.Shortcut;
@@ -40,8 +44,9 @@ import java.util.List;
 public class ShortcutPicker extends PreferenceFragment implements Tunable {
 
     private final ArrayList<SelectablePreference> mSelectablePreferences = new ArrayList<>();
+    private CustomPreference mDefaultPreference;
+    private CustomPreference mNonePreference;
     private String mKey;
-    private SelectablePreference mNonePreference;
     private TunerService mTunerService;
 
     @Override
@@ -52,12 +57,34 @@ public class ShortcutPicker extends PreferenceFragment implements Tunable {
         PreferenceCategory otherApps = new PreferenceCategory(context);
         otherApps.setTitle(R.string.tuner_other_apps);
 
-        mNonePreference = new SelectablePreference(context);
+        // True "none" preference
+        mNonePreference = new CustomPreference(context, LOCKSCREEN_SHORTCUT_NONE);
         mSelectablePreferences.add(mNonePreference);
         mNonePreference.setTitle(R.string.lockscreen_none);
         mNonePreference.setIcon(R.drawable.ic_remove_circle);
         screen.addPreference(mNonePreference);
 
+        // Default shortcuts (voice assist and camera)
+        mKey = getArguments().getString(ARG_PREFERENCE_ROOT);
+        if (LOCKSCREEN_LEFT_BUTTON.equals(mKey)) {
+            mDefaultPreference = new CustomPreference(context, LOCKSCREEN_SHORTCUT_VOICE_ASSIST);
+            mSelectablePreferences.add(mDefaultPreference);
+            if (canLaunchVoiceAssist()) {
+                mDefaultPreference.setTitle(R.string.accessibility_voice_assist_button);
+                mDefaultPreference.setIcon(R.drawable.ic_mic_26dp);
+            } else {
+                mDefaultPreference.setTitle(R.string.accessibility_phone_button);
+                mDefaultPreference.setIcon(R.drawable.ic_phone_24dp);
+            }
+            screen.addPreference(mDefaultPreference);
+        } else {
+            mDefaultPreference = new CustomPreference(context, LOCKSCREEN_SHORTCUT_CAMERA);
+            mSelectablePreferences.add(mDefaultPreference);
+            mDefaultPreference.setTitle(R.string.accessibility_camera_button);
+            mDefaultPreference.setIcon(R.drawable.ic_camera_alt_24dp);
+            screen.addPreference(mDefaultPreference);
+        }
+
         LauncherApps apps = getContext().getSystemService(LauncherApps.class);
         List<LauncherActivityInfo> activities = apps.getActivityList(null,
                 Process.myUserHandle());
@@ -97,11 +124,15 @@ public class ShortcutPicker extends PreferenceFragment implements Tunable {
         //screen.addPreference(otherApps);
 
         setPreferenceScreen(screen);
-        mKey = getArguments().getString(ARG_PREFERENCE_ROOT);
         mTunerService = Dependency.get(TunerService.class);
         mTunerService.addTunable(this, mKey);
     }
 
+    private boolean canLaunchVoiceAssist() {
+        AssistManager mAssistManager = Dependency.get(AssistManager.class);
+        return mAssistManager.canVoiceAssistBeLaunchedFromKeyguard();
+    }
+
     @Override
     public boolean onPreferenceTreeClick(Preference preference) {
         mTunerService.setValue(mKey, preference.toString());
@@ -197,4 +228,18 @@ public class ShortcutPicker extends PreferenceFragment implements Tunable {
             return mShortcut.toString();
         }
     }
+
+    private static class CustomPreference extends SelectablePreference {
+        private String mIdentifier;
+
+        public CustomPreference(Context context, String id) {
+            super(context);
+            mIdentifier = id;
+        }
+
+        @Override
+        public String toString() {
+            return mIdentifier;
+        }
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java b/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java
index de7caa24d3f..77f5d384bfe 100644
--- a/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java
+++ b/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java
@@ -50,6 +50,8 @@ public class TunerActivity extends SettingsDrawerActivity implements
                 fragment = new PowerNotificationControlsFragment();
             } else if ("com.android.settings.action.STATUS_BAR_TUNER".equals(action)) {
                 fragment = new StatusBarTuner();
+            } else if ("com.android.settings.action.LOCK_SCREEN_TUNER".equals(action)) {
+                fragment = new LockscreenFragment();
             } else {
                 fragment = new TunerFragment();
             }
-- 
2.17.1

