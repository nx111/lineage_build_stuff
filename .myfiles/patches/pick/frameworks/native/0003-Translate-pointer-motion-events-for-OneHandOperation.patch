From 420246af461f61469f9fec916f57d46944ad68fc Mon Sep 17 00:00:00 2001
From: Satoshi Sanno <satoshi.sanno@sony.com>
Date: Thu, 10 Aug 2017 17:34:02 +0900
Subject: [PATCH 3/5] Translate pointer motion events for OneHandOperation
 Display Shrink

This patch is a part of the mechanism of display shrink.
In one handed mode, it translates pointer motion events into a position
that considers shrinking.
And if the user touches the out of shrunk display, it notifies to
InputDispatcherPolicy.

Bug: 112870197
Change-Id: I1d7882379daa67c4fd38a6326d7c8cfe204f09e7
---
 services/inputflinger/Android.bp          |  1 +
 services/inputflinger/InputDispatcher.cpp | 45 ++++++++++++++++++++++-
 services/inputflinger/InputDispatcher.h   | 23 ++++++++++++
 3 files changed, 67 insertions(+), 2 deletions(-)

diff --git a/services/inputflinger/Android.bp b/services/inputflinger/Android.bp
index ddda43dd3..de084a471 100644
--- a/services/inputflinger/Android.bp
+++ b/services/inputflinger/Android.bp
@@ -43,6 +43,7 @@ cc_library_shared {
         "-Wextra",
         "-Werror",
         "-Wno-unused-parameter",
+        "-DONEHANDED_SUPPORT",
         // TODO: Move inputflinger to its own process and mark it hidden
         //-fvisibility=hidden
     ],
diff --git a/services/inputflinger/InputDispatcher.cpp b/services/inputflinger/InputDispatcher.cpp
index 0047d06f1..48090866b 100644
--- a/services/inputflinger/InputDispatcher.cpp
+++ b/services/inputflinger/InputDispatcher.cpp
@@ -250,6 +250,12 @@ InputDispatcher::InputDispatcher(const sp<InputDispatcherPolicyInterface>& polic
     mKeyRepeatState.lastKeyEntry = NULL;
 
     policy->getDispatcherConfiguration(&mConfig);
+
+    mPointerOffsetX = 0;
+    mPointerOffsetY = 0;
+    mPointerScale = 1.0f;
+    mPointerWidth = 0;
+    mPointerHeight = 0;
 }
 
 InputDispatcher::~InputDispatcher() {
@@ -514,6 +520,13 @@ void InputDispatcher::addRecentEventLocked(EventEntry* entry) {
 
 sp<InputWindowHandle> InputDispatcher::findTouchedWindowAtLocked(int32_t displayId,
         int32_t x, int32_t y) {
+#ifdef ONEHANDED_SUPPORT
+        bool outSidedScreenAndOneHandModeActivated = mPointerScale != 1
+                && (x < 0 || y < 0 || x >= mPointerWidth || y >= mPointerHeight);
+#else
+        bool outSidedScreenAndOneHandModeActivated = false;
+#endif
+
     // Traverse windows from front to back to find touched window.
     size_t numWindows = mWindowHandles.size();
     for (size_t i = 0; i < numWindows; i++) {
@@ -526,7 +539,8 @@ sp<InputWindowHandle> InputDispatcher::findTouchedWindowAtLocked(int32_t display
                 if (!(flags & InputWindowInfo::FLAG_NOT_TOUCHABLE)) {
                     bool isTouchModal = (flags & (InputWindowInfo::FLAG_NOT_FOCUSABLE
                             | InputWindowInfo::FLAG_NOT_TOUCH_MODAL)) == 0;
-                    if (isTouchModal || windowInfo->touchableRegionContainsPoint(x, y)) {
+                    if ((isTouchModal && !outSidedScreenAndOneHandModeActivated)
+                            || windowInfo->touchableRegionContainsPoint(x, y)) {
                         // Found window.
                         return windowHandle;
                     }
@@ -1254,12 +1268,20 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
                 continue; // wrong display
             }
 
+#ifdef ONEHANDED_SUPPORT
+            bool outSidedScreenAndOnHandModeActivated = mPointerScale != 1
+                    && (x < 0 || y < 0 || x >= mPointerWidth || y >= mPointerHeight);
+#else
+            bool outSidedScreenAndOnHandModeActivated = false;
+#endif
+
             int32_t flags = windowInfo->layoutParamsFlags;
             if (windowInfo->visible) {
                 if (! (flags & InputWindowInfo::FLAG_NOT_TOUCHABLE)) {
                     isTouchModal = (flags & (InputWindowInfo::FLAG_NOT_FOCUSABLE
                             | InputWindowInfo::FLAG_NOT_TOUCH_MODAL)) == 0;
-                    if (isTouchModal || windowInfo->touchableRegionContainsPoint(x, y)) {
+                    if ((isTouchModal && !outSidedScreenAndOnHandModeActivated) // Sorry, the outsided touch belongs to one hand, not you
+                            || windowInfo->touchableRegionContainsPoint(x, y)) {
                         newTouchedWindowHandle = windowHandle;
                         break; // found touched window, exit window loop
                     }
@@ -1290,6 +1312,12 @@ int32_t InputDispatcher::findTouchedWindowTargetsLocked(nsecs_t currentTime,
             newTouchedWindowHandle = mTempTouchState.getFirstForegroundWindowHandle();
             if (newTouchedWindowHandle == NULL) {
                 ALOGI("Dropping event because there is no touchable window at (%d, %d).", x, y);
+
+#ifdef ONEHANDED_SUPPORT
+                if (!isHoverAction)
+                    mPolicy->notifyOutSideScreenTouch(x, y);
+#endif
+
                 injectionResult = INPUT_EVENT_INJECTION_FAILED;
                 goto Failed;
             }
@@ -2574,6 +2602,19 @@ void InputDispatcher::notifyMotion(const NotifyMotionArgs* args) {
     { // acquire lock
         mLock.lock();
 
+
+#ifdef ONEHANDED_SUPPORT
+        // Translate only pointer motion events.
+        if (args->source & AINPUT_SOURCE_CLASS_POINTER) {
+            // We do not want to translate the injected motion event.
+            for (size_t i = 0; i < args->pointerCount; i++) {
+                // Using the helper method of PoitnerCoords is much better than calculate it our self
+                ((NotifyMotionArgs*)args)->pointerCoords[i].applyOffset(mPointerOffsetX, mPointerOffsetY);
+                ((NotifyMotionArgs*)args)->pointerCoords[i].scale(mPointerScale);
+            }
+        }
+#endif
+
         if (shouldSendMotionToInputFilterLocked(args)) {
             mLock.unlock();
 
diff --git a/services/inputflinger/InputDispatcher.h b/services/inputflinger/InputDispatcher.h
index 705692df6..d05a7e526 100644
--- a/services/inputflinger/InputDispatcher.h
+++ b/services/inputflinger/InputDispatcher.h
@@ -266,6 +266,8 @@ public:
      */
     virtual bool checkInjectEventsPermissionNonReentrant(
             int32_t injectorPid, int32_t injectorUid) = 0;
+
+    virtual void notifyOutSideScreenTouch(int x, int y) { /* No op by default */ }
 };
 
 
@@ -277,6 +279,11 @@ protected:
     virtual ~InputDispatcherInterface() { }
 
 public:
+    virtual void updatePointerMappingParameters(int offsetX, int offestY, float scale, int width,
+            int height) {
+        ALOGE("calling into default no op updatePointerMappingParameters");
+        // NO_OP
+    }
     /* Dumps the state of the input dispatcher.
      *
      * This method may be called on any thread (usually by the input manager). */
@@ -372,6 +379,16 @@ protected:
 public:
     explicit InputDispatcher(const sp<InputDispatcherPolicyInterface>& policy);
 
+    virtual void updatePointerMappingParameters(int offsetX, int offestY, float scale, int width,
+            int height) {
+        AutoMutex _l(mLock);
+        mPointerOffsetX = offsetX;
+        mPointerOffsetY = offestY;
+        mPointerScale = scale;
+        mPointerWidth = width;
+        mPointerHeight = height;
+    }
+
     virtual void dump(std::string& dump);
     virtual void monitor();
 
@@ -1028,6 +1045,12 @@ private:
     // Contains the last window which received a hover event.
     sp<InputWindowHandle> mLastHoverWindowHandle;
 
+    int32_t mPointerOffsetX;
+    int32_t mPointerOffsetY;
+    float mPointerScale;
+    int32_t mPointerWidth;
+    int32_t mPointerHeight;
+
     // Finding targets for input events.
     int32_t handleTargetsNotReadyLocked(nsecs_t currentTime, const EventEntry* entry,
             const sp<InputApplicationHandle>& applicationHandle,
-- 
2.17.1

