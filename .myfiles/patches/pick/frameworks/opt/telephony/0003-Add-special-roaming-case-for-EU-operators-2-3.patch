From 3de2c64de16bcbe8c9b6624c6fd42ba967432854 Mon Sep 17 00:00:00 2001
From: blunden <blunden2@gmail.com>
Date: Sat, 18 May 2019 17:30:51 +0200
Subject: [PATCH 3/5] Add special roaming case for EU operators [2/3]

As of 15 June 2017, mobile operators should no longer apply
surcharges to customers travelling within the EU [1]. Add an
extra roaming state to take into account this special case, which
is subject to certain limitations and can't be considered equal
to the "not roaming" case.

[1] http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:32016R2286

Change-Id: I00f672aae1f7dc980a85df130e942784f0702a3a
---
 .../telephony/ServiceStateTracker.java        | 54 +++++++++++++++++++
 1 file changed, 54 insertions(+)

diff --git a/src/java/com/android/internal/telephony/ServiceStateTracker.java b/src/java/com/android/internal/telephony/ServiceStateTracker.java
index 635562713..8c43ce924 100644
--- a/src/java/com/android/internal/telephony/ServiceStateTracker.java
+++ b/src/java/com/android/internal/telephony/ServiceStateTracker.java
@@ -32,6 +32,7 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.content.res.Resources;
+import android.database.ContentObserver;
 import android.hardware.radio.V1_0.CellInfoType;
 import android.os.AsyncResult;
 import android.os.BaseBundle;
@@ -354,6 +355,15 @@ public class ServiceStateTracker extends Handler {
     private final NitzStateMachine mNitzState;
     private final ContentResolver mCr;
 
+    private ContentObserver mEuRoamingObserver = new ContentObserver(new Handler()) {
+        @Override
+        public void onChange(boolean selfChange) {
+            Rlog.i(LOG_TAG, "EU roaming state changed");
+            mEuRoamingEnabled = Settings.Global.getInt(mCr, Settings.Global.EU_ROAMING, 0) != 0;
+            updateRoamingState();
+        }
+    };
+
     //GSM
     private int mPreferredNetworkType;
     private int mMaxDataCalls = 1;
@@ -464,6 +474,8 @@ public class ServiceStateTracker extends Handler {
     private String mRegistrationDeniedReason;
     private String mCurrentCarrier = null;
 
+    private boolean mEuRoamingEnabled = false;
+
     private final TransportManager mTransportManager;
     private final SparseArray<NetworkRegistrationManager> mRegStateManagers = new SparseArray<>();
 
@@ -527,6 +539,10 @@ public class ServiceStateTracker extends Handler {
         mRadioPowerLog.log("init : airplane mode = " + airplaneMode + " enableCellularOnBoot = " +
                 enableCellularOnBoot);
 
+        mCr.registerContentObserver(
+                Settings.Global.getUriFor(Settings.Global.EU_ROAMING), true,
+                mEuRoamingObserver);
+        mEuRoamingEnabled = Settings.Global.getInt(mCr, Settings.Global.EU_ROAMING, 0) != 0;
 
         setSignalStrengthDefaultValues();
         mPhone.getCarrierActionAgent().registerForCarrierAction(CARRIER_ACTION_SET_RADIO_ENABLED,
@@ -4517,6 +4533,35 @@ public class ServiceStateTracker extends Handler {
         }
     }
 
+    private boolean euOperatorInEuCountry(String operatorNumeric) {
+        if (TextUtils.isEmpty(operatorNumeric) || (operatorNumeric.length() < 5)) {
+            // Not a valid network
+            return false;
+        }
+        final String homeNumeric = getHomeOperatorNumeric();
+        if (TextUtils.isEmpty(homeNumeric) || (homeNumeric.length() < 5)) {
+            // Not a valid SIM MCC
+            return false;
+        }
+        final String networkMCC = operatorNumeric.substring(0, 3);
+        final String homeMCC = homeNumeric.substring(0, 3);
+        final String networkCountry = MccTable.countryCodeForMcc(Integer.parseInt(networkMCC));
+        final String homeCountry = MccTable.countryCodeForMcc(Integer.parseInt(homeMCC));
+        if (networkCountry.isEmpty() || homeCountry.isEmpty()) {
+            // Not a valid country
+            return false;
+        }
+        if (networkCountry.equals(homeCountry)) {
+            // Domestic roaming
+            return false;
+        }
+        List<String> euCountriesList = Arrays.asList(
+            "at", "be", "bg", "cy", "cz", "de", "dk", "ee", "el", "es", "fi", "fr", "hr", "hu",
+            "ie", "it", "lt", "lu", "lv", "mt", "nl", "pl", "pt", "ro", "se", "si", "sk", "uk"
+        );
+        return euCountriesList.contains(homeCountry) && euCountriesList.contains(networkCountry);
+    }
+
     /**
      * Check ISO country by MCC to see if phone is roaming in same registered country
      */
@@ -4566,6 +4611,9 @@ public class ServiceStateTracker extends Handler {
                     if (inSameCountry(currentServiceState.getVoiceOperatorNumeric())) {
                         currentServiceState.setVoiceRoamingType(
                                 ServiceState.ROAMING_TYPE_DOMESTIC);
+                    } else if (mEuRoamingEnabled &&
+                            euOperatorInEuCountry(currentServiceState.getVoiceOperatorNumeric())) {
+                        currentServiceState.setVoiceRoamingType(ServiceState.ROAMING_TYPE_EU);
                     } else {
                         currentServiceState.setVoiceRoamingType(
                                 ServiceState.ROAMING_TYPE_INTERNATIONAL);
@@ -4590,6 +4638,9 @@ public class ServiceStateTracker extends Handler {
                         if (inSameCountry(currentServiceState.getVoiceOperatorNumeric())) {
                             currentServiceState.setVoiceRoamingType(
                                     ServiceState.ROAMING_TYPE_DOMESTIC);
+                        } else if (mEuRoamingEnabled &&
+                                euOperatorInEuCountry(currentServiceState.getVoiceOperatorNumeric())) {
+                            currentServiceState.setVoiceRoamingType(ServiceState.ROAMING_TYPE_EU);
                         } else {
                             currentServiceState.setVoiceRoamingType(
                                     ServiceState.ROAMING_TYPE_INTERNATIONAL);
@@ -4636,6 +4687,9 @@ public class ServiceStateTracker extends Handler {
                         // take it as 3GPP roaming
                         if (inSameCountry(currentServiceState.getDataOperatorNumeric())) {
                             currentServiceState.setDataRoamingType(ServiceState.ROAMING_TYPE_DOMESTIC);
+                       } else if (mEuRoamingEnabled &&
+                                euOperatorInEuCountry(currentServiceState.getDataOperatorNumeric())) {
+                            currentServiceState.setDataRoamingType(ServiceState.ROAMING_TYPE_EU);
                         } else {
                             currentServiceState.setDataRoamingType(
                                     ServiceState.ROAMING_TYPE_INTERNATIONAL);
-- 
2.17.1

