From 6a1286c54df1988924cc88578ac632480a716505 Mon Sep 17 00:00:00 2001
From: CEnnis91 <cennis91@gmail.com>
Date: Thu, 2 May 2013 13:29:53 -0400
Subject: [PATCH 2/4] OMGRainbows

No longer will we get bad reviews on CWM recovery for its lack
of rainbows! Originally design by gweedo767, this patch brings
back the wrap count mechanism from v2.0.2.4 to toggle Rainbow
Mode for the user. In the original design, every character has
a different color, but that method requires modifying graphics.c
which will cause breakage in devices with custom graphics.c.
This Rainbow Mode has a different color for each line, instead.
The wrap_count has been set to 5 instead of the previous 3 so
the toggle won't occur as often, if on accident.

(port to CM12.1 by cyanogen)

Change-Id: Ie9f6f1b6ed94ee69d4d8d9fe27f9a5417cc3f212

improve Rainbow Mode

 * Require 5 consecutive menu "wraps" in the same direction to help
   prevent accidental toggling

 * Align colors into stripes (i.e. columns)
   a) less prone to induce dizziness in some people when they change
   b) better resembles a rainbow

 * Move the stripes to the right when the selection moves up and
   move the stripes to the left when the selection moves down

[yodevil]
 * Offset different rows by 1 color, so that colorss are diagonally
   aligned instead of vertically.

 * Refractor SelectMenu code to avoid clogging it and preserve
   readability

Change-Id: I3feae173b22f5703c554ca33e634881749ff54cf
---
 minui/graphics.cpp          | 32 +++++++++++++++++++++++
 minui/include/minui/minui.h |  3 +++
 screen_ui.cpp               | 52 ++++++++++++++++++++++++++++++-------
 screen_ui.h                 |  5 ++++
 4 files changed, 83 insertions(+), 9 deletions(-)

diff --git a/minui/graphics.cpp b/minui/graphics.cpp
index 56e22a23..46d50b4f 100644
--- a/minui/graphics.cpp
+++ b/minui/graphics.cpp
@@ -136,6 +136,36 @@ static void text_blend(uint8_t* src_p, int src_row_bytes, uint32_t* dst_p, int d
   }
 }
 
+static int rainbow_index = 0;
+static int rainbow_enabled = 0;
+static int rainbow_colors[] = { 255, 0, 0,        // red
+                                255, 127, 0,      // orange
+                                255, 255, 0,      // yellow
+                                0, 255, 0,        // green
+                                60, 80, 255,      // blue
+                                143, 0, 255 };    // violet
+static int num_rb_colors =
+        (sizeof(rainbow_colors)/sizeof(rainbow_colors[0])) / 3;
+
+static void rainbow(int col) {
+  int rainbow_color = ((rainbow_index + col) % num_rb_colors) * 3;
+  gr_color(rainbow_colors[rainbow_color], rainbow_colors[rainbow_color+1],
+              rainbow_colors[rainbow_color+2], 255);
+}
+
+void set_rainbow_mode(int enabled) {
+  rainbow_enabled = enabled;
+}
+
+void move_rainbow(int x) {
+  rainbow_index += x;
+  if (rainbow_index < 0) {
+    rainbow_index = num_rb_colors - 1;
+  } else if (rainbow_index >= num_rb_colors) {
+    rainbow_index = 0;
+  }
+}
+
 void gr_text(const GRFont* font, int x, int y, const char* s, bool bold) {
   if (!font || !font->texture || (gr_current & alpha_mask) == 0) return;
 
@@ -151,6 +181,8 @@ void gr_text(const GRFont* font, int x, int y, const char* s, bool bold) {
 
   unsigned char ch;
   while ((ch = *s++)) {
+    if (rainbow_enabled) rainbow(x / font->char_width + (gr_fb_height() - y) / (font->char_height * 3));
+
     if (outside(x, y) || outside(x + font->char_width - 1, y + font->char_height - 1)) break;
 
     if (ch < ' ' || ch > '~') {
diff --git a/minui/include/minui/minui.h b/minui/include/minui/minui.h
index 4eb78267..c4fd7d97 100644
--- a/minui/include/minui/minui.h
+++ b/minui/include/minui/minui.h
@@ -152,4 +152,7 @@ std::vector<std::string> get_locales_in_png(const std::string& png_name);
 // functions.
 void res_free_surface(GRSurface* surface);
 
+void set_rainbow_mode(int enabled);
+void move_rainbow(int x);
+
 #endif
diff --git a/screen_ui.cpp b/screen_ui.cpp
index 1a415d2b..f1d4b713 100644
--- a/screen_ui.cpp
+++ b/screen_ui.cpp
@@ -154,7 +154,9 @@ ScreenRecoveryUI::ScreenRecoveryUI()
       max_stage(-1),
       locale_(""),
       rtl_locale_(false),
-      updateMutex(PTHREAD_MUTEX_INITIALIZER) {}
+      updateMutex(PTHREAD_MUTEX_INITIALIZER),
+      rainbow(false),
+      wrap_count(0) {}
 
 GRSurface* ScreenRecoveryUI::GetCurrentFrame() const {
   if (currentIcon == INSTALLING_UPDATE || currentIcon == ERASING) {
@@ -1190,31 +1192,54 @@ void ScreenRecoveryUI::StartMenu(bool is_main, menu_type_t type, const char* con
 }
 
 int ScreenRecoveryUI::SelectMenu(int sel) {
+  int wrapped = 0;
   pthread_mutex_lock(&updateMutex);
   if (show_menu) {
     int old_menu_sel = menu_sel;
 
     // Handle wrapping and back item
+    menu_sel = sel;
     if (sel < 0 && (menu_is_main_ || sel < -1)) {
-      sel = (int)menu_items_.size() - 1;
+      menu_sel = (int)menu_items_.size() - 1;
+      wrapped = -1;
     }
     if (sel >= (int)menu_items_.size()) {
-      sel = (menu_is_main_ ? 0 : -1);
+      menu_sel = (menu_is_main_ ? 0 : -1);
+      wrapped = 1;
     }
-    menu_sel = sel;
 
     // Scroll
-    if (menu_sel != -1 && sel < menu_show_start) {
-      menu_show_start = sel;
+    if (menu_sel != -1 && menu_sel < menu_show_start) {
+      menu_show_start = menu_sel;
     }
-    if (sel >= menu_show_start + menu_show_count) {
-      menu_show_start = sel - (menu_show_count - 1);
+    if (menu_sel >= menu_show_start + menu_show_count) {
+      menu_show_start = menu_sel - (menu_show_count - 1);
+    }
+
+    // Rainbows
+    if (rainbow) {
+      if (sel > old_menu_sel) {
+        move_rainbow(-1);
+      } else if (sel < old_menu_sel) {
+        move_rainbow(1);
+      }
+    }
+    if (wrapped != 0) {
+      if (wrap_count / wrapped > 0) {
+        wrap_count += wrapped;
+      } else {
+        wrap_count = wrapped;
+      }
+      if (wrap_count / wrapped >= 5) {
+        wrap_count = 0;
+        OMGRainbows();
+      }
     }
 
     if (menu_sel != old_menu_sel) update_screen_locked();
   }
   pthread_mutex_unlock(&updateMutex);
-  return sel;
+  return menu_sel;
 }
 
 int ScreenRecoveryUI::SelectMenu(const Point& point) {
@@ -1273,6 +1298,10 @@ int ScreenRecoveryUI::ScrollMenu(int updown) {
       menu_sel = menu_show_start + menu_show_count - 1;
     }
 
+    // Rainbows
+    int sign = (updown > 0) - (updown < 0);
+    move_rainbow(sign);
+
     update_screen_locked();
   }
   pthread_mutex_unlock(&updateMutex);
@@ -1342,3 +1371,8 @@ void ScreenRecoveryUI::SetLocale(const std::string& new_locale) {
     }
   }
 }
+
+void ScreenRecoveryUI::OMGRainbows() {
+  rainbow = rainbow ? false : true;
+  set_rainbow_mode(rainbow);
+}
diff --git a/screen_ui.h b/screen_ui.h
index 53632ccb..f39a441b 100644
--- a/screen_ui.h
+++ b/screen_ui.h
@@ -277,11 +277,16 @@ class ScreenRecoveryUI : public RecoveryUI {
   pthread_mutex_t updateMutex;
 
  private:
+  bool rainbow;
+  int wrap_count;
+
   void SetLocale(const std::string&);
 
   // Display the background texts for "erasing", "error", "no_command" and "installing" for the
   // selected locale.
   void SelectAndShowBackgroundText(const std::vector<std::string>& locales_entries, size_t sel);
+
+  void OMGRainbows();
 };
 
 #endif  // RECOVERY_UI_H
-- 
2.17.1

