From 11969091253174555ecd1e8d6f7442d452015d84 Mon Sep 17 00:00:00 2001
From: Steve Kondik <shade@chemlab.org>
Date: Sun, 24 Nov 2013 21:40:09 -0800
Subject: [PATCH 07/62] recovery: Puke out an /etc/fstab so stuff like
 busybox/toybox is happy

 * And disregard special mount flags on purpose because of certain
   dubious packages which "exec busybox mount".

Change-Id: I163702c9bd7fca3d40676fd6d8476e8deb13acc0
---
 roots.cpp | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/roots.cpp b/roots.cpp
index 303381ef..d7f6b1aa 100644
--- a/roots.cpp
+++ b/roots.cpp
@@ -45,6 +45,20 @@ static struct fstab* fstab = nullptr;
 
 extern struct selabel_handle* sehandle;
 
+static void write_fstab_entry(const Volume *v, FILE *file)
+{
+  if (v &&
+      strcmp(v->fs_type, "mtd") != 0 && strcmp(v->fs_type, "emmc") != 0 &&
+      strcmp(v->fs_type, "bml") != 0 && !fs_mgr_is_voldmanaged(v) &&
+      strncmp(v->blk_device, "/", 1) == 0 &&
+      strncmp(v->mount_point, "/", 1) == 0) {
+    fprintf(file, "%s ", v->blk_device);
+    fprintf(file, "%s ", v->mount_point);
+    fprintf(file, "%s ", v->fs_type);
+    fprintf(file, "%s 0 0\n", v->fs_options ? v->fs_options : "defaults");
+  }
+}
+
 void load_volume_table() {
   fstab = fs_mgr_read_fstab_default();
   if (!fstab) {
@@ -60,13 +74,25 @@ void load_volume_table() {
     return;
   }
 
+  // Create a boring /etc/fstab so tools like Busybox work
+  FILE *file = fopen("/etc/fstab", "w");
+  if (!file) {
+    LOG(ERROR) << "Unable to create /etc/fstab";
+  }
+
   printf("recovery filesystem table\n");
   printf("=========================\n");
   for (int i = 0; i < fstab->num_entries; ++i) {
     const Volume* v = &fstab->recs[i];
     printf("  %d %s %s %s %lld\n", i, v->mount_point, v->fs_type, v->blk_device, v->length);
+    if (file) {
+      write_fstab_entry(v, file);
+    }
   }
   printf("\n");
+  if (file) {
+    fclose(file);
+  }
 }
 
 Volume* volume_for_mount_point(const std::string& mount_point) {
-- 
2.17.1

