From f1bd88ff1f7de269230d6cae63014c227bf08a54 Mon Sep 17 00:00:00 2001
From: Alessandro Astone <ales.astone@gmail.com>
Date: Mon, 1 Apr 2019 11:11:33 +0200
Subject: [PATCH 62/62] recovery: show text during install

 * The text array will be handled by always writing to the
   last row, and will be moved up on a new line.

 * Update the screen at each print.

 * Create a FastPrint function that will *not* update the screen.
   This is needed for when we print right before changing action.

 * N.B. This does not show text on OTA updates,
   but rather only on updates launched from the menu.

Change-Id: Ia62c361da17c5e24af508c29a04f045e81306e1c
---
 recovery.cpp  |  2 +-
 screen_ui.cpp | 51 +++++++++++++++++++++++++++++++++++++++++++--------
 screen_ui.h   |  5 ++++-
 stub_ui.h     |  6 ++++++
 ui.h          |  1 +
 5 files changed, 55 insertions(+), 10 deletions(-)

diff --git a/recovery.cpp b/recovery.cpp
index 5ff13428..8695c289 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -1240,7 +1240,7 @@ static int apply_from_storage(Device* device, VolumeInfo& vi, bool* wipe_cache)
     while (path == "@refresh");
 
     if (path.empty()) {
-        ui->Print("\n-- No package file selected.\n");
+        ui->FastPrint("\n-- No package file selected.\n");
         VolumeManager::Instance()->volumeUnmount(vi.mId);
         return INSTALL_NONE;
     }
diff --git a/screen_ui.cpp b/screen_ui.cpp
index 108a5c4b..eb890daf 100644
--- a/screen_ui.cpp
+++ b/screen_ui.cpp
@@ -134,6 +134,7 @@ ScreenRecoveryUI::ScreenRecoveryUI()
       text_(nullptr),
       text_col_(0),
       text_row_(0),
+      previous_row_ended(false),
       show_text(false),
       show_text_ever(false),
       menu_is_main_(true),
@@ -885,7 +886,8 @@ bool ScreenRecoveryUI::Init(const std::string& locale) {
   text_ = Alloc2d(text_rows_, text_cols_ + 1);
   file_viewer_text_ = Alloc2d(text_rows_, text_cols_ + 1);
 
-  text_col_ = text_row_ = 0;
+  text_row_ = text_rows_ - 1; // Printed text grows bottom up
+  text_col_ = 0;
 
   // Set up the locale info.
   SetLocale(locale);
@@ -1032,7 +1034,19 @@ void ScreenRecoveryUI::SetStage(int current, int max) {
   pthread_mutex_unlock(&updateMutex);
 }
 
-void ScreenRecoveryUI::PrintV(const char* fmt, bool copy_to_stdout, va_list ap) {
+void ScreenRecoveryUI::NewLine(){
+  // Shift the rows array up
+  char* p = text_[0];
+  for(size_t i = 0; i < text_rows_ - 1; i++){
+    text_[i] = text_[i+1];
+  }
+  text_[text_rows_ - 1] = p;
+  memset(text_[text_rows_ - 1], 0, text_cols_ + 1);
+
+  text_col_ = 0;
+}
+
+void ScreenRecoveryUI::PrintV(const char* fmt, bool copy_to_stdout, va_list ap, bool update_screen/* = true*/) {
   std::string str;
   android::base::StringAppendV(&str, fmt, ap);
 
@@ -1042,15 +1056,29 @@ void ScreenRecoveryUI::PrintV(const char* fmt, bool copy_to_stdout, va_list ap)
 
   pthread_mutex_lock(&updateMutex);
   if (text_rows_ > 0 && text_cols_ > 0) {
+    if(previous_row_ended){
+      NewLine();
+    }
+    previous_row_ended = false;
+
+    size_t row = text_rows_ - 1;
     for (const char* ptr = str.c_str(); *ptr != '\0'; ++ptr) {
-      if (*ptr == '\n' || text_col_ >= text_cols_) {
-        text_[text_row_][text_col_] = '\0';
-        text_col_ = 0;
-        text_row_ = (text_row_ + 1) % text_rows_;
+      if (*ptr == '\n' && *(ptr + 1) == '\0') {
+        // Scroll on the next print
+        text_[row][text_col_] = '\0';
+        previous_row_ended = true;
+      } else if ((*ptr == '\n' && *(ptr + 1) != '\0' ) || text_col_ >= text_cols_) {
+        // We need to keep printing, scroll now
+        text_[row][text_col_] = '\0';
+        NewLine();
       }
-      if (*ptr != '\n') text_[text_row_][text_col_++] = *ptr;
+      if (*ptr != '\n') text_[row][text_col_++] = *ptr;
+    }
+    text_[row][text_col_] = '\0';
+
+    if (show_text && update_screen) {
+      update_screen_locked();
     }
-    text_[text_row_][text_col_] = '\0';
   }
   pthread_mutex_unlock(&updateMutex);
 }
@@ -1062,6 +1090,13 @@ void ScreenRecoveryUI::Print(const char* fmt, ...) {
   va_end(ap);
 }
 
+void ScreenRecoveryUI::FastPrint(const char* fmt, ...) {
+  va_list ap;
+  va_start(ap, fmt);
+  PrintV(fmt, true, ap, false);
+  va_end(ap);
+}
+
 void ScreenRecoveryUI::PrintOnScreenOnly(const char *fmt, ...) {
   va_list ap;
   va_start(ap, fmt);
diff --git a/screen_ui.h b/screen_ui.h
index ac3d27c6..e52fd7a8 100644
--- a/screen_ui.h
+++ b/screen_ui.h
@@ -93,6 +93,7 @@ class ScreenRecoveryUI : public RecoveryUI {
 
   // printing messages
   void Print(const char* fmt, ...) override __printflike(2, 3);
+  void FastPrint(const char* fmt, ...) override __printflike(2, 3);
   void PrintOnScreenOnly(const char* fmt, ...) override __printflike(2, 3);
   int ShowFile(const char* filename) override;
 
@@ -153,7 +154,8 @@ class ScreenRecoveryUI : public RecoveryUI {
   void ProgressThreadLoop();
 
   virtual int ShowFile(FILE*);
-  virtual void PrintV(const char*, bool, va_list);
+  virtual void PrintV(const char*, bool, va_list, bool = true);
+  void NewLine();
   void PutChar(char);
   void ClearText();
 
@@ -228,6 +230,7 @@ class ScreenRecoveryUI : public RecoveryUI {
   char** text_;
   size_t text_col_, text_row_;
 
+  bool previous_row_ended;
   bool show_text;
   bool show_text_ever;  // has show_text ever been true?
 
diff --git a/stub_ui.h b/stub_ui.h
index c9d1fd7d..ca106776 100644
--- a/stub_ui.h
+++ b/stub_ui.h
@@ -50,6 +50,12 @@ class StubRecoveryUI : public RecoveryUI {
     vprintf(fmt, ap);
     va_end(ap);
   }
+  void FastPrint(const char* fmt, ...) override {
+    va_list ap;
+    va_start(ap, fmt);
+    vprintf(fmt, ap);
+    va_end(ap);
+  };
   void PrintOnScreenOnly(const char* /* fmt */, ...) override {}
   int ShowFile(const char* /* filename */) override { return -1; }
   void Redraw() override {}
diff --git a/ui.h b/ui.h
index 7144c5d9..8f7daade 100644
--- a/ui.h
+++ b/ui.h
@@ -148,6 +148,7 @@ class RecoveryUI {
   // Writes a message to the on-screen log (shown if the user has toggled on the text display).
   // Print() will also dump the message to stdout / log file, while PrintOnScreenOnly() not.
   virtual void Print(const char* fmt, ...) __printflike(2, 3) = 0;
+  virtual void FastPrint(const char* fmt, ...) __printflike(2,3) = 0;
   virtual void PrintOnScreenOnly(const char* fmt, ...) __printflike(2, 3) = 0;
 
   virtual int ShowFile(const char* filename) = 0;
-- 
2.17.1

