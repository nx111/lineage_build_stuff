From 4b3d3bcba821ed5b5213774c7a38b718f2870781 Mon Sep 17 00:00:00 2001
From: dianlujitao <dianlujitao@lineageos.org>
Date: Thu, 14 Feb 2019 12:20:16 +0800
Subject: [PATCH 02/10] sepolicy: Move superuser policy to private

Change-Id: Ia8b519afd71601dfab2b17ab5b4ebfda1dd1f7e0
---
 common/private/file_contexts |  3 ++
 common/private/su.te         | 62 ++++++++++++++++++++++++++++++++++-
 common/public/file_contexts  |  2 --
 common/public/su.te          | 63 ------------------------------------
 4 files changed, 64 insertions(+), 66 deletions(-)
 delete mode 100644 common/public/file_contexts
 delete mode 100644 common/public/su.te

diff --git a/common/private/file_contexts b/common/private/file_contexts
index 300a14f..d0b9438 100644
--- a/common/private/file_contexts
+++ b/common/private/file_contexts
@@ -19,5 +19,8 @@
 /system/bin/backuptool_ab\.sh                     u:object_r:otapreopt_chroot_exec:s0
 /system/bin/backuptool_postinstall\.sh            u:object_r:otapreopt_chroot_exec:s0
 
+# Superuser's control sockets
+/dev/socket/su-daemon(/.*)?             u:object_r:superuser_device:s0
+
 # Sysinit
 /system/bin/sysinit                     u:object_r:sysinit_exec:s0
diff --git a/common/private/su.te b/common/private/su.te
index bd19cff..358e8bd 100644
--- a/common/private/su.te
+++ b/common/private/su.te
@@ -1,12 +1,72 @@
+type superuser_device, file_type, mlstrustedobject;
+
+## Perms for the daemon
+
 userdebug_or_eng(`
-  typeattribute sudaemon coredomain;
+  domain_trans(init, su_exec, sudaemon)
+
+  typeattribute sudaemon domain, coredomain, mlstrustedsubject;
 
   domain_trans(init, su_exec, sudaemon)
 
   type_transition sudaemon socket_device:sock_file superuser_device;
+  # The userspace app uses /dev sockets to control per-app access
+  allow sudaemon superuser_device:dir { create rw_dir_perms setattr unlink };
+  allow sudaemon superuser_device:sock_file { create setattr unlink write };
 
   # sudaemon is also permissive to permit setenforce.
   permissive sudaemon;
 
+  # Add sudaemon to various domains
+  net_domain(sudaemon)
   app_domain(sudaemon)
+
+  dontaudit sudaemon self:capability_class_set *;
+  dontaudit sudaemon kernel:security *;
+  dontaudit sudaemon kernel:system *;
+  dontaudit sudaemon self:memprotect *;
+  dontaudit sudaemon domain:process *;
+  dontaudit sudaemon domain:fd *;
+  dontaudit sudaemon domain:dir *;
+  dontaudit sudaemon domain:lnk_file *;
+  dontaudit sudaemon domain:{ fifo_file file } *;
+  dontaudit sudaemon domain:socket_class_set *;
+  dontaudit sudaemon domain:ipc_class_set *;
+  dontaudit sudaemon domain:key *;
+  dontaudit sudaemon fs_type:filesystem *;
+  dontaudit sudaemon {fs_type dev_type file_type}:dir_file_class_set *;
+  dontaudit sudaemon node_type:node *;
+  dontaudit sudaemon node_type:{ tcp_socket udp_socket rawip_socket } *;
+  dontaudit sudaemon netif_type:netif *;
+  dontaudit sudaemon port_type:socket_class_set *;
+  dontaudit sudaemon port_type:{ tcp_socket dccp_socket } *;
+  dontaudit sudaemon domain:peer *;
+  dontaudit sudaemon domain:binder *;
+  dontaudit sudaemon property_type:property_service *;
+  dontaudit sudaemon appops_service:service_manager *;
 ')
+
+## Perms for the app
+
+userdebug_or_eng(`
+  # Translate user apps to the shell domain when using su
+  #
+  # PR_SET_NO_NEW_PRIVS blocks this :(
+  # we need to find a way to narrow this down to the actual exec.
+  # typealias shell alias suclient;
+  # domain_auto_trans(untrusted_app, su_exec, suclient)
+
+  allow untrusted_app_all su_exec:file { execute_no_trans getattr open read execute };
+  allow untrusted_app_all sudaemon:unix_stream_socket { connectto read write setopt ioctl };
+  allow untrusted_app_all superuser_device:dir { r_dir_perms };
+  allow untrusted_app_all superuser_device:sock_file { write };
+
+  # For Settings control of access
+  allow system_app superuser_device:sock_file { read write create setattr unlink getattr };
+  allow system_app sudaemon:unix_stream_socket { connectto read write setopt ioctl };
+  allow system_app superuser_device:dir { create rw_dir_perms setattr unlink };
+
+  allow kernel sudaemon:fd { use };
+')
+
+neverallow { domain userdebug_or_eng(`-dumpstate -shell -su -untrusted_app_all -init -sudaemon') } su_exec:file no_x_file_perms;
diff --git a/common/public/file_contexts b/common/public/file_contexts
deleted file mode 100644
index 5e64c94..0000000
--- a/common/public/file_contexts
+++ /dev/null
@@ -1,2 +0,0 @@
-# Superuser's control sockets
-/dev/socket/su-daemon(/.*)?   u:object_r:superuser_device:s0
diff --git a/common/public/su.te b/common/public/su.te
deleted file mode 100644
index 46d1197..0000000
--- a/common/public/su.te
+++ /dev/null
@@ -1,63 +0,0 @@
-type superuser_device, file_type, mlstrustedobject;
-
-## Perms for the daemon
-
-userdebug_or_eng(`
-  typeattribute sudaemon domain, mlstrustedsubject;
-
-  # The userspace app uses /dev sockets to control per-app access
-  allow sudaemon superuser_device:dir { create rw_dir_perms setattr unlink };
-  allow sudaemon superuser_device:sock_file { create setattr unlink write };
-
-  # Add sudaemon to various domains
-  net_domain(sudaemon)
-
-  dontaudit sudaemon self:capability_class_set *;
-  dontaudit sudaemon kernel:security *;
-  dontaudit sudaemon kernel:system *;
-  dontaudit sudaemon self:memprotect *;
-  dontaudit sudaemon domain:process *;
-  dontaudit sudaemon domain:fd *;
-  dontaudit sudaemon domain:dir *;
-  dontaudit sudaemon domain:lnk_file *;
-  dontaudit sudaemon domain:{ fifo_file file } *;
-  dontaudit sudaemon domain:socket_class_set *;
-  dontaudit sudaemon domain:ipc_class_set *;
-  dontaudit sudaemon domain:key *;
-  dontaudit sudaemon fs_type:filesystem *;
-  dontaudit sudaemon {fs_type dev_type file_type}:dir_file_class_set *;
-  dontaudit sudaemon node_type:node *;
-  dontaudit sudaemon node_type:{ tcp_socket udp_socket rawip_socket } *;
-  dontaudit sudaemon netif_type:netif *;
-  dontaudit sudaemon port_type:socket_class_set *;
-  dontaudit sudaemon port_type:{ tcp_socket dccp_socket } *;
-  dontaudit sudaemon domain:peer *;
-  dontaudit sudaemon domain:binder *;
-  dontaudit sudaemon property_type:property_service *;
-  dontaudit sudaemon appops_service:service_manager *;
-')
-
-## Perms for the app
-
-userdebug_or_eng(`
-  # Translate user apps to the shell domain when using su
-  #
-  # PR_SET_NO_NEW_PRIVS blocks this :(
-  # we need to find a way to narrow this down to the actual exec.
-  # typealias shell alias suclient;
-  # domain_auto_trans(untrusted_app, su_exec, suclient)
-
-  allow untrusted_app_all su_exec:file { execute_no_trans getattr open read execute };
-  allow untrusted_app_all sudaemon:unix_stream_socket { connectto read write setopt ioctl };
-  allow untrusted_app_all superuser_device:dir { r_dir_perms };
-  allow untrusted_app_all superuser_device:sock_file { write };
-
-  # For Settings control of access
-  allow system_app superuser_device:sock_file { read write create setattr unlink getattr };
-  allow system_app sudaemon:unix_stream_socket { connectto read write setopt ioctl };
-  allow system_app superuser_device:dir { create rw_dir_perms setattr unlink };
-
-  allow kernel sudaemon:fd { use };
-')
-
-neverallow { domain userdebug_or_eng(`-dumpstate -shell -su -untrusted_app_all -init -sudaemon') } su_exec:file no_x_file_perms;
-- 
2.17.1

