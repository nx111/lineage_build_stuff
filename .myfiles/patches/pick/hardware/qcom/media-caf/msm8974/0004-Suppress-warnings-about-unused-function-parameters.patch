From 6f2ea3b145c18076e45595adb4b9aa74efe1c728 Mon Sep 17 00:00:00 2001
From: Uwe Sauter <uwe.sauter.de@gmail.com>
Date: Fri, 3 May 2019 13:13:39 +0200
Subject: [PATCH 4/6] Suppress warnings about unused function parameters

Change-Id: I815d80400fc55889d1ed8b23b98180a7f1e807b0
---
 .../vidc/common/src/extra_data_handler.cpp    |   6 +-
 .../vidc/vdec/src/omx_vdec_msm8974.cpp        | 175 +++++++++++-------
 .../vidc/venc/src/omx_video_base.cpp          | 174 +++++++++--------
 .../vidc/venc/src/omx_video_encoder.cpp       |  13 +-
 .../venc/src/video_encoder_device_v4l2.cpp    |  19 +-
 5 files changed, 227 insertions(+), 160 deletions(-)

diff --git a/mm-video-v4l2/vidc/common/src/extra_data_handler.cpp b/mm-video-v4l2/vidc/common/src/extra_data_handler.cpp
index 8cf482892..a830e5509 100644
--- a/mm-video-v4l2/vidc/common/src/extra_data_handler.cpp
+++ b/mm-video-v4l2/vidc/common/src/extra_data_handler.cpp
@@ -97,7 +97,7 @@ OMX_U32 extra_data_handler::d_ue()
     return symbol;
 }
 
-OMX_U32 extra_data_handler::parse_frame_pack(OMX_U32 payload_size)
+OMX_U32 extra_data_handler::parse_frame_pack(OMX_U32 /* payload_size */)
 {
     frame_packing_arrangement.id = d_ue();
     frame_packing_arrangement.cancel_flag = d_u(1);
@@ -236,7 +236,9 @@ OMX_S32 extra_data_handler::parse_sei(OMX_U8 *buffer, OMX_U32 buffer_length)
 }
 
 OMX_S32 extra_data_handler::parse_ltrinfo(
-        OMX_BUFFERHEADERTYPE *pBufHdr, OMX_OTHER_EXTRADATATYPE *pExtra)
+    OMX_BUFFERHEADERTYPE*    /* pBufHdr */,
+    OMX_OTHER_EXTRADATATYPE* pExtra
+    )
 {
     OMX_U32 *pLTR;
     pExtra->eType = (OMX_EXTRADATATYPE)OMX_ExtraDataVideoLTRInfo;
diff --git a/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp b/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
index 96c467366..f42e65b76 100644
--- a/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
+++ b/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
@@ -477,8 +477,13 @@ void *get_omx_component_factory_fn(void)
 
 #ifdef _ANDROID_
 #ifdef USE_ION
-VideoHeap::VideoHeap(int devicefd, size_t size, void* base,
-        ion_user_handle_t handle, int ionMapfd)
+VideoHeap::VideoHeap(
+    int /* devicefd */,
+    size_t /* size */,
+    void * /* base */,
+    ion_user_handle_t /* handle */,
+    int /* ionMapfd */
+    )
 {
     //    ionInit(devicefd, base, size, 0 , MEM_DEVICE,handle,ionMapfd);
 }
@@ -1957,14 +1962,13 @@ OMX_ERRORTYPE omx_vdec::component_init(OMX_STRING role)
    OMX_ErrorNone.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::get_component_version
-(
- OMX_IN OMX_HANDLETYPE hComp,
- OMX_OUT OMX_STRING componentName,
- OMX_OUT OMX_VERSIONTYPE* componentVersion,
- OMX_OUT OMX_VERSIONTYPE* specVersion,
- OMX_OUT OMX_UUIDTYPE* componentUUID
- )
+OMX_ERRORTYPE  omx_vdec::get_component_version(
+    OMX_IN OMX_HANDLETYPE    /* hComp */,
+    OMX_OUT OMX_STRING       /* componentName */,
+    OMX_OUT OMX_VERSIONTYPE* /* componentVersion */,
+    OMX_OUT OMX_VERSIONTYPE* specVersion,
+    OMX_OUT OMX_UUIDTYPE*    /* componentUUID */
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("Get Comp Version in Invalid State");
@@ -1990,11 +1994,12 @@ OMX_ERRORTYPE  omx_vdec::get_component_version
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::send_command(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_IN OMX_COMMANDTYPE cmd,
-        OMX_IN OMX_U32 param1,
-        OMX_IN OMX_PTR cmdData
-        )
+OMX_ERRORTYPE  omx_vdec::send_command(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_COMMANDTYPE cmd,
+    OMX_IN OMX_U32         param1,
+    OMX_IN OMX_PTR         /* cmdData */
+    )
 {
     DEBUG_PRINT_LOW("send_command: Recieved a Command from Client");
     if (m_state == OMX_StateInvalid) {
@@ -2028,11 +2033,12 @@ OMX_ERRORTYPE  omx_vdec::send_command(OMX_IN OMX_HANDLETYPE hComp,
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::send_command_proxy(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_IN OMX_COMMANDTYPE cmd,
-        OMX_IN OMX_U32 param1,
-        OMX_IN OMX_PTR cmdData
-        )
+OMX_ERRORTYPE  omx_vdec::send_command_proxy(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_COMMANDTYPE cmd,
+    OMX_IN OMX_U32         param1,
+    OMX_IN OMX_PTR         /* cmdData */
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_STATETYPE eState = (OMX_STATETYPE) param1;
@@ -2782,9 +2788,11 @@ OMX_ERRORTYPE omx_vdec::get_supported_profile_level_for_1080p(OMX_VIDEO_PARAM_PR
    Error None if successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::get_parameter(OMX_IN OMX_HANDLETYPE     hComp,
-        OMX_IN OMX_INDEXTYPE paramIndex,
-        OMX_INOUT OMX_PTR     paramData)
+OMX_ERRORTYPE  omx_vdec::get_parameter(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_IN OMX_INDEXTYPE  paramIndex,
+    OMX_INOUT OMX_PTR     paramData
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
 
@@ -3920,9 +3928,11 @@ OMX_ERRORTYPE  omx_vdec::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
    OMX Error None if successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::get_config(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_INDEXTYPE configIndex,
-        OMX_INOUT OMX_PTR     configData)
+OMX_ERRORTYPE  omx_vdec::get_config(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_IN OMX_INDEXTYPE  configIndex,
+    OMX_INOUT OMX_PTR     configData
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
 
@@ -4010,9 +4020,11 @@ OMX_ERRORTYPE  omx_vdec::get_config(OMX_IN OMX_HANDLETYPE      hComp,
    RETURN VALUE
    OMX Error None if successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::set_config(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_INDEXTYPE configIndex,
-        OMX_IN OMX_PTR        configData)
+OMX_ERRORTYPE  omx_vdec::set_config(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_IN OMX_INDEXTYPE  configIndex,
+    OMX_IN OMX_PTR        configData
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("Get Config in Invalid State");
@@ -4168,9 +4180,11 @@ OMX_ERRORTYPE  omx_vdec::set_config(OMX_IN OMX_HANDLETYPE      hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::get_extension_index(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_STRING      paramName,
-        OMX_OUT OMX_INDEXTYPE* indexType)
+OMX_ERRORTYPE  omx_vdec::get_extension_index(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_STRING      paramName,
+    OMX_OUT OMX_INDEXTYPE* indexType
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("Get Extension Index in Invalid State");
@@ -4240,8 +4254,10 @@ OMX_ERRORTYPE  omx_vdec::get_extension_index(OMX_IN OMX_HANDLETYPE      hComp,
    RETURN VALUE
    Error None if everything is successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::get_state(OMX_IN OMX_HANDLETYPE  hComp,
-        OMX_OUT OMX_STATETYPE* state)
+OMX_ERRORTYPE  omx_vdec::get_state(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_OUT OMX_STATETYPE* state
+    )
 {
     *state = m_state;
     DEBUG_PRINT_LOW("get_state: Returning the state %d",*state);
@@ -4262,11 +4278,13 @@ OMX_ERRORTYPE  omx_vdec::get_state(OMX_IN OMX_HANDLETYPE  hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::component_tunnel_request(OMX_IN OMX_HANDLETYPE                hComp,
-        OMX_IN OMX_U32                        port,
-        OMX_IN OMX_HANDLETYPE        peerComponent,
-        OMX_IN OMX_U32                    peerPort,
-        OMX_INOUT OMX_TUNNELSETUPTYPE* tunnelSetup)
+OMX_ERRORTYPE  omx_vdec::component_tunnel_request(
+    OMX_IN OMX_HANDLETYPE          /* hComp */,
+    OMX_IN OMX_U32                 /* port */,
+    OMX_IN OMX_HANDLETYPE          /* peerComponent */,
+    OMX_IN OMX_U32                 /* peerPort */,
+    OMX_INOUT OMX_TUNNELSETUPTYPE* /* tunnelSetup */
+    )
 {
     DEBUG_PRINT_ERROR("Error: component_tunnel_request Not Implemented");
     return OMX_ErrorNotImplemented;
@@ -4344,12 +4362,13 @@ void omx_vdec::free_extradata()
 }
 
 OMX_ERRORTYPE  omx_vdec::use_output_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes,
-        OMX_IN OMX_U8*                   buffer)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes,
+    OMX_IN OMX_U8*                   buffer
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_BUFFERHEADERTYPE       *bufHdr= NULL; // buffer header
@@ -4964,11 +4983,12 @@ OMX_ERRORTYPE omx_vdec::allocate_input_heap_buffer(OMX_HANDLETYPE       hComp,
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_vdec::allocate_input_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes
+    )
 {
 
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
@@ -5162,11 +5182,12 @@ OMX_ERRORTYPE  omx_vdec::allocate_input_buffer(
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_vdec::allocate_output_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_BUFFERHEADERTYPE       *bufHdr= NULL; // buffer header
@@ -5572,9 +5593,11 @@ OMX_ERRORTYPE  omx_vdec::allocate_buffer(OMX_IN OMX_HANDLETYPE                hC
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::free_buffer(OMX_IN OMX_HANDLETYPE         hComp,
-        OMX_IN OMX_U32                 port,
-        OMX_IN OMX_BUFFERHEADERTYPE* buffer)
+OMX_ERRORTYPE  omx_vdec::free_buffer(
+    OMX_IN OMX_HANDLETYPE        /* hComp */,
+    OMX_IN OMX_U32               port,
+    OMX_IN OMX_BUFFERHEADERTYPE* buffer
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     unsigned int nPortIndex;
@@ -5816,8 +5839,10 @@ OMX_ERRORTYPE  omx_vdec::empty_this_buffer(OMX_IN OMX_HANDLETYPE         hComp,
    OMX Error None if everything went successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE         hComp,
-        OMX_IN OMX_BUFFERHEADERTYPE* buffer)
+OMX_ERRORTYPE  omx_vdec::empty_this_buffer_proxy(
+    OMX_IN OMX_HANDLETYPE        /* hComp */,
+    OMX_IN OMX_BUFFERHEADERTYPE* buffer
+    )
 {
     int push_cnt = 0,i=0;
     unsigned nPortIndex = 0;
@@ -6268,9 +6293,11 @@ return OMX_ErrorNone;
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::set_callbacks(OMX_IN OMX_HANDLETYPE        hComp,
-        OMX_IN OMX_CALLBACKTYPE* callbacks,
-        OMX_IN OMX_PTR             appData)
+OMX_ERRORTYPE  omx_vdec::set_callbacks(
+    OMX_IN OMX_HANDLETYPE    /* hComp */,
+    OMX_IN OMX_CALLBACKTYPE* callbacks,
+    OMX_IN OMX_PTR           appData
+    )
 {
 
     m_cb       = *callbacks;
@@ -6294,7 +6321,7 @@ OMX_ERRORTYPE  omx_vdec::set_callbacks(OMX_IN OMX_HANDLETYPE        hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::component_deinit(OMX_IN OMX_HANDLETYPE hComp)
+OMX_ERRORTYPE  omx_vdec::component_deinit(OMX_IN OMX_HANDLETYPE /* hComp */)
 {
 
     unsigned i = 0;
@@ -6417,11 +6444,13 @@ OMX_ERRORTYPE  omx_vdec::component_deinit(OMX_IN OMX_HANDLETYPE hComp)
    Not Implemented error.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::use_EGL_image(OMX_IN OMX_HANDLETYPE                hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                        port,
-        OMX_IN OMX_PTR                     appData,
-        OMX_IN void*                      eglImage)
+OMX_ERRORTYPE  omx_vdec::use_EGL_image(
+    OMX_IN OMX_HANDLETYPE            hComp,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   port,
+    OMX_IN OMX_PTR                   /* appData */,
+    OMX_IN void*                     eglImage
+    )
 {
     OMX_QCOM_PLATFORM_PRIVATE_LIST pmem_list;
     OMX_QCOM_PLATFORM_PRIVATE_ENTRY pmem_entry;
@@ -6493,9 +6522,11 @@ OMX_ERRORTYPE  omx_vdec::use_EGL_image(OMX_IN OMX_HANDLETYPE                hCom
    RETURN VALUE
    OMX Error None if everything is successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_vdec::component_role_enum(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_OUT OMX_U8*        role,
-        OMX_IN OMX_U32        index)
+OMX_ERRORTYPE  omx_vdec::component_role_enum(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_OUT OMX_U8*       role,
+    OMX_IN OMX_U32        index
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
 
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
index dcc2afec1..acb20325e 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
@@ -656,14 +656,13 @@ void omx_video::process_event_cb(void *ctxt, unsigned char id)
    OMX_ErrorNone.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::get_component_version
-(
- OMX_IN OMX_HANDLETYPE hComp,
- OMX_OUT OMX_STRING componentName,
- OMX_OUT OMX_VERSIONTYPE* componentVersion,
- OMX_OUT OMX_VERSIONTYPE* specVersion,
- OMX_OUT OMX_UUIDTYPE* componentUUID
- )
+OMX_ERRORTYPE  omx_video::get_component_version(
+    OMX_IN OMX_HANDLETYPE    /* hComp */,
+    OMX_OUT OMX_STRING       /* componentName */,
+    OMX_OUT OMX_VERSIONTYPE* /* componentVersion */,
+    OMX_OUT OMX_VERSIONTYPE* specVersion,
+    OMX_OUT OMX_UUIDTYPE*    /* componentUUID */
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("ERROR: Get Comp Version in Invalid State");
@@ -689,11 +688,12 @@ OMX_ERRORTYPE  omx_video::get_component_version
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::send_command(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_IN OMX_COMMANDTYPE cmd,
-        OMX_IN OMX_U32 param1,
-        OMX_IN OMX_PTR cmdData
-        )
+OMX_ERRORTYPE  omx_video::send_command(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_COMMANDTYPE cmd,
+    OMX_IN OMX_U32         param1,
+    OMX_IN OMX_PTR         cmdData
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("ERROR: Send Command in Invalid State");
@@ -736,11 +736,12 @@ OMX_ERRORTYPE  omx_video::send_command(OMX_IN OMX_HANDLETYPE hComp,
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::send_command_proxy(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_IN OMX_COMMANDTYPE cmd,
-        OMX_IN OMX_U32 param1,
-        OMX_IN OMX_PTR cmdData
-        )
+OMX_ERRORTYPE  omx_video::send_command_proxy(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_COMMANDTYPE cmd,
+    OMX_IN OMX_U32         param1,
+    OMX_IN OMX_PTR         /* cmdData */
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_STATETYPE eState = (OMX_STATETYPE) param1;
@@ -1420,9 +1421,11 @@ bool omx_video::post_event(unsigned int p1,
    Error None if successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::get_parameter(OMX_IN OMX_HANDLETYPE     hComp,
-        OMX_IN OMX_INDEXTYPE paramIndex,
-        OMX_INOUT OMX_PTR     paramData)
+OMX_ERRORTYPE  omx_video::get_parameter(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_IN OMX_INDEXTYPE  paramIndex,
+    OMX_INOUT OMX_PTR     paramData
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     unsigned int height=0,width = 0;
@@ -1924,9 +1927,11 @@ OMX_ERRORTYPE  omx_video::get_parameter(OMX_IN OMX_HANDLETYPE     hComp,
    OMX Error None if successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::get_config(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_INDEXTYPE configIndex,
-        OMX_INOUT OMX_PTR     configData)
+OMX_ERRORTYPE  omx_video::get_config(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_IN OMX_INDEXTYPE  configIndex,
+    OMX_INOUT OMX_PTR     configData
+    )
 {
     ////////////////////////////////////////////////////////////////
     // Supported Config Index           Type
@@ -2026,9 +2031,11 @@ OMX_ERRORTYPE  omx_video::get_config(OMX_IN OMX_HANDLETYPE      hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::get_extension_index(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_STRING      paramName,
-        OMX_OUT OMX_INDEXTYPE* indexType)
+OMX_ERRORTYPE  omx_video::get_extension_index(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_IN OMX_STRING      paramName,
+    OMX_OUT OMX_INDEXTYPE* indexType
+    )
 {
     if (m_state == OMX_StateInvalid) {
         DEBUG_PRINT_ERROR("ERROR: Get Extension Index in Invalid State");
@@ -2069,8 +2076,10 @@ OMX_ERRORTYPE  omx_video::get_extension_index(OMX_IN OMX_HANDLETYPE      hComp,
    RETURN VALUE
    Error None if everything is successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::get_state(OMX_IN OMX_HANDLETYPE  hComp,
-        OMX_OUT OMX_STATETYPE* state)
+OMX_ERRORTYPE  omx_video::get_state(
+    OMX_IN OMX_HANDLETYPE  /* hComp */,
+    OMX_OUT OMX_STATETYPE* state
+    )
 {
     *state = m_state;
     DEBUG_PRINT_LOW("get_state: Returning the state %d",*state);
@@ -2091,11 +2100,13 @@ OMX_ERRORTYPE  omx_video::get_state(OMX_IN OMX_HANDLETYPE  hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::component_tunnel_request(OMX_IN OMX_HANDLETYPE                hComp,
-        OMX_IN OMX_U32                        port,
-        OMX_IN OMX_HANDLETYPE        peerComponent,
-        OMX_IN OMX_U32                    peerPort,
-        OMX_INOUT OMX_TUNNELSETUPTYPE* tunnelSetup)
+OMX_ERRORTYPE  omx_video::component_tunnel_request(
+    OMX_IN OMX_HANDLETYPE          /* hComp */,
+    OMX_IN OMX_U32                 /* port */,
+    OMX_IN OMX_HANDLETYPE          /* peerComponent */,
+    OMX_IN OMX_U32                 /* peerPort */,
+    OMX_INOUT OMX_TUNNELSETUPTYPE* /* tunnelSetup */
+    )
 {
     DEBUG_PRINT_ERROR("ERROR: component_tunnel_request Not Implemented");
     return OMX_ErrorNotImplemented;
@@ -2116,12 +2127,13 @@ OMX_ERRORTYPE  omx_video::component_tunnel_request(OMX_IN OMX_HANDLETYPE
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_video::use_input_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes,
-        OMX_IN OMX_U8*                   buffer)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   port,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes,
+    OMX_IN OMX_U8*                   buffer
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
 
@@ -2284,12 +2296,13 @@ OMX_ERRORTYPE  omx_video::use_input_buffer(
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_video::use_output_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes,
-        OMX_IN OMX_U8*                   buffer)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes,
+    OMX_IN OMX_U8*                   buffer
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_BUFFERHEADERTYPE       *bufHdr= NULL; // buffer header
@@ -2727,11 +2740,12 @@ OMX_ERRORTYPE omx_video::allocate_input_meta_buffer(
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_video::allocate_input_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes)
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes
+    )
 {
 
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
@@ -2883,11 +2897,12 @@ OMX_ERRORTYPE  omx_video::allocate_input_buffer(
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_video::allocate_output_buffer(
-        OMX_IN OMX_HANDLETYPE            hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                   port,
-        OMX_IN OMX_PTR                   appData,
-        OMX_IN OMX_U32                   bytes)
+    OMX_IN OMX_HANDLETYPE           /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
+    OMX_IN OMX_U32                  /* port */,
+    OMX_IN OMX_PTR                   appData,
+    OMX_IN OMX_U32                   bytes
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     OMX_BUFFERHEADERTYPE       *bufHdr= NULL; // buffer header
@@ -3152,9 +3167,11 @@ OMX_ERRORTYPE  omx_video::allocate_buffer(OMX_IN OMX_HANDLETYPE                h
    true/false
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::free_buffer(OMX_IN OMX_HANDLETYPE         hComp,
-        OMX_IN OMX_U32                 port,
-        OMX_IN OMX_BUFFERHEADERTYPE* buffer)
+OMX_ERRORTYPE  omx_video::free_buffer(
+    OMX_IN OMX_HANDLETYPE        /* hComp */,
+    OMX_IN OMX_U32               port,
+    OMX_IN OMX_BUFFERHEADERTYPE* buffer
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     unsigned int nPortIndex;
@@ -3377,8 +3394,10 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer(OMX_IN OMX_HANDLETYPE         hComp,
    OMX Error None if everything went successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE         hComp,
-        OMX_IN OMX_BUFFERHEADERTYPE* buffer)
+OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(
+    OMX_IN OMX_HANDLETYPE        /* hComp */,
+    OMX_IN OMX_BUFFERHEADERTYPE* buffer
+    )
 {
     OMX_U8 *pmem_data_buf = NULL;
     int push_cnt = 0;
@@ -3606,8 +3625,9 @@ OMX_ERRORTYPE  omx_video::fill_this_buffer(OMX_IN OMX_HANDLETYPE  hComp,
 
    ========================================================================== */
 OMX_ERRORTYPE  omx_video::fill_this_buffer_proxy(
-        OMX_IN OMX_HANDLETYPE        hComp,
-        OMX_IN OMX_BUFFERHEADERTYPE* bufferAdd)
+    OMX_IN OMX_HANDLETYPE        /* hComp */,
+    OMX_IN OMX_BUFFERHEADERTYPE* bufferAdd
+    )
 {
     OMX_U8 *pmem_data_buf = NULL;
     OMX_ERRORTYPE nRet = OMX_ErrorNone;
@@ -3657,9 +3677,11 @@ OMX_ERRORTYPE  omx_video::fill_this_buffer_proxy(
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::set_callbacks(OMX_IN OMX_HANDLETYPE        hComp,
-        OMX_IN OMX_CALLBACKTYPE* callbacks,
-        OMX_IN OMX_PTR             appData)
+OMX_ERRORTYPE  omx_video::set_callbacks(
+    OMX_IN OMX_HANDLETYPE    /* hComp */,
+    OMX_IN OMX_CALLBACKTYPE* callbacks,
+    OMX_IN OMX_PTR           appData
+    )
 {
 
     m_pCallbacks       = *callbacks;
@@ -3684,11 +3706,13 @@ OMX_ERRORTYPE  omx_video::set_callbacks(OMX_IN OMX_HANDLETYPE        hComp,
    Not Implemented error.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::use_EGL_image(OMX_IN OMX_HANDLETYPE                hComp,
-        OMX_INOUT OMX_BUFFERHEADERTYPE** bufferHdr,
-        OMX_IN OMX_U32                        port,
-        OMX_IN OMX_PTR                     appData,
-        OMX_IN void*                      eglImage)
+OMX_ERRORTYPE  omx_video::use_EGL_image(
+    OMX_IN OMX_HANDLETYPE            /* hComp */,
+    OMX_INOUT OMX_BUFFERHEADERTYPE** /* bufferHdr */,
+    OMX_IN OMX_U32                   /* port */,
+    OMX_IN OMX_PTR                   /* appData */,
+    OMX_IN void*                     /* eglImage */
+    )
 {
     DEBUG_PRINT_ERROR("ERROR: use_EGL_image:  Not Implemented");
     return OMX_ErrorNotImplemented;
@@ -3707,9 +3731,11 @@ OMX_ERRORTYPE  omx_video::use_EGL_image(OMX_IN OMX_HANDLETYPE                hCo
    RETURN VALUE
    OMX Error None if everything is successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_video::component_role_enum(OMX_IN OMX_HANDLETYPE hComp,
-        OMX_OUT OMX_U8*        role,
-        OMX_IN OMX_U32        index)
+OMX_ERRORTYPE  omx_video::component_role_enum(
+    OMX_IN OMX_HANDLETYPE /* hComp */,
+    OMX_OUT OMX_U8*       role,
+    OMX_IN OMX_U32        index
+    )
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
     if (!strncmp((char*)m_nkind, "OMX.qcom.video.decoder.mpeg4",OMX_MAX_STRINGNAME_SIZE)) {
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
index 6cb394d68..9c6683322 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
@@ -481,8 +481,9 @@ OMX_ERRORTYPE omx_venc::component_init(OMX_STRING role)
    OMX Error None if successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_venc::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
-        OMX_IN OMX_INDEXTYPE paramIndex,
+OMX_ERRORTYPE  omx_venc::set_parameter(
+        OMX_IN OMX_HANDLETYPE /* hComp */,
+        OMX_IN OMX_INDEXTYPE  paramIndex,
         OMX_IN OMX_PTR        paramData)
 {
     OMX_ERRORTYPE eRet = OMX_ErrorNone;
@@ -1418,8 +1419,9 @@ bool omx_venc::update_profile_level()
    RETURN VALUE
    OMX Error None if successful.
    ========================================================================== */
-OMX_ERRORTYPE  omx_venc::set_config(OMX_IN OMX_HANDLETYPE      hComp,
-        OMX_IN OMX_INDEXTYPE configIndex,
+OMX_ERRORTYPE  omx_venc::set_config(
+        OMX_IN OMX_HANDLETYPE /* hComp */,
+        OMX_IN OMX_INDEXTYPE  configIndex,
         OMX_IN OMX_PTR        configData)
 {
     if (configData == NULL) {
@@ -1727,7 +1729,7 @@ OMX_ERRORTYPE  omx_venc::set_config(OMX_IN OMX_HANDLETYPE      hComp,
    OMX Error None if everything successful.
 
    ========================================================================== */
-OMX_ERRORTYPE  omx_venc::component_deinit(OMX_IN OMX_HANDLETYPE hComp)
+OMX_ERRORTYPE  omx_venc::component_deinit(OMX_IN OMX_HANDLETYPE /* hComp */)
 {
     OMX_U32 i = 0;
     DEBUG_PRINT_HIGH("omx_venc(): Inside component_deinit()");
@@ -1865,6 +1867,7 @@ bool omx_venc::dev_get_seq_hdr(void *buffer, unsigned size, unsigned *hdrlen)
 bool omx_venc::dev_get_capability_ltrcount(OMX_U32 *min, OMX_U32 *max, OMX_U32 *step_size)
 {
 #ifdef _MSM8974_
+    (void)min; (void)max; (void)step_size; /* suppress -Wunused-parameter compiler warning */
     DEBUG_PRINT_ERROR("Get Capability LTR Count is not supported");
     return false;
 #else
diff --git a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
index 66c0fa6ab..fc9005864 100644
--- a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
+++ b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
@@ -1048,10 +1048,12 @@ void venc_dev::venc_close()
     }
 }
 
-bool venc_dev::venc_set_buf_req(unsigned long *min_buff_count,
-        unsigned long *actual_buff_count,
-        unsigned long *buff_size,
-        unsigned long port)
+bool venc_dev::venc_set_buf_req(
+    unsigned long * /* min_buff_count */,
+    unsigned long *actual_buff_count,
+    unsigned long * /* buff_size */,
+    unsigned long port
+    )
 {
 
     unsigned long temp_count = 0;
@@ -1094,8 +1096,11 @@ bool venc_dev::venc_loaded_stop_done()
     return true;
 }
 
-bool venc_dev::venc_get_seq_hdr(void *buffer,
-        unsigned buffer_size, unsigned *header_len)
+bool venc_dev::venc_get_seq_hdr(
+    void *         /* buffer */,
+    unsigned int   /*buffer_size */,
+    unsigned int * /* header_len */
+    )
 {
     return true;
 }
@@ -4529,7 +4534,7 @@ bool venc_dev::venc_validate_profile_level(OMX_U32 *eProfile, OMX_U32 *eLevel)
     return true;
 }
 #ifdef _ANDROID_ICS_
-bool venc_dev::venc_set_meta_mode(bool mode)
+bool venc_dev::venc_set_meta_mode(bool /* mode */)
 {
     metadatamode = 1;
     return true;
-- 
2.17.1

