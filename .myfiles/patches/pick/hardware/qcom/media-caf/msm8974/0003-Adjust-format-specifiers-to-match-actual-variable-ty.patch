From 4d2ea4c22262950d8ba51fc9a957b9b6a9bc32d7 Mon Sep 17 00:00:00 2001
From: Uwe Sauter <uwe.sauter.de@gmail.com>
Date: Sat, 27 Apr 2019 17:14:04 +0200
Subject: [PATCH 3/5] Adjust format specifiers to match actual variable types

Change-Id: I5d95e93b640a3252f24fe0491a9744771687623a
---
 mm-video-v4l2/vidc/vdec/src/frameparser.cpp   |   2 +-
 mm-video-v4l2/vidc/vdec/src/h264_utils.cpp    | 106 +++++++++---------
 .../vidc/vdec/src/omx_vdec_msm8974.cpp        |  53 +++++----
 .../vidc/venc/src/omx_video_base.cpp          |   8 +-
 .../vidc/venc/src/omx_video_encoder.cpp       |   4 +-
 .../venc/src/video_encoder_device_v4l2.cpp    |  70 ++++++------
 6 files changed, 121 insertions(+), 122 deletions(-)

diff --git a/mm-video-v4l2/vidc/vdec/src/frameparser.cpp b/mm-video-v4l2/vidc/vdec/src/frameparser.cpp
index 64dfafa5d..26ab6f854 100644
--- a/mm-video-v4l2/vidc/vdec/src/frameparser.cpp
+++ b/mm-video-v4l2/vidc/vdec/src/frameparser.cpp
@@ -505,7 +505,7 @@ int frame_parse::parse_h264_nallength (OMX_BUFFERHEADERTYPE *source,
         } else {
             DEBUG_PRINT_ERROR("FrameParser: NAL Parsing Error!"
                 "Buffer recieved with source_len = %lu and with"
-                "flags %u", source_len, source->nFlags);
+                "flags %lu", source_len, source->nFlags);
             return -1;
         }
     }
diff --git a/mm-video-v4l2/vidc/vdec/src/h264_utils.cpp b/mm-video-v4l2/vidc/vdec/src/h264_utils.cpp
index 7967da57f..abb028962 100644
--- a/mm-video-v4l2/vidc/vdec/src/h264_utils.cpp
+++ b/mm-video-v4l2/vidc/vdec/src/h264_utils.cpp
@@ -292,7 +292,7 @@ boolean H264_Utils::extract_rbsp(OMX_IN   OMX_U8  *buffer,
     }
     nal_unit->nal_ref_idc   = (buffer[pos] & 0x60) >> 5;
     nal_unit->nalu_type = buffer[pos++] & 0x1f;
-    ALOGV("@#@# Pos = %x NalType = %x buflen = %d",
+    ALOGV("@#@# Pos = %x NalType = %x buflen = %ld",
             pos-1, nal_unit->nalu_type, buffer_length);
     *rbsp_length = 0;
 
@@ -364,8 +364,8 @@ bool H264_Utils::isNewFrame(OMX_BUFFERHEADERTYPE *p_buf_hdr,
     OMX_IN OMX_U32 buffer_length = p_buf_hdr->nFilledLen;
     bool eRet = true;
 
-    ALOGV("isNewFrame: buffer %p buffer_length %d "
-            "size_of_nal_length_field %d", buffer, buffer_length,
+    ALOGV("isNewFrame: buffer %p buffer_length %ld "
+            "size_of_nal_length_field %ld", buffer, buffer_length,
             size_of_nal_length_field);
 
     if ( false == extract_rbsp(buffer, buffer_length, size_of_nal_length_field,
@@ -566,8 +566,8 @@ void h264_stream_parser::parse_vui(bool vui_in_extradata)
         vui_param.time_scale = extract_bits(32);
         vui_param.fixed_frame_rate_flag = extract_bits(1);
         ALOGV("Timing info present in VUI!");
-        ALOGV("  num units in tick  : %u", vui_param.num_units_in_tick);
-        ALOGV("  time scale         : %u", vui_param.time_scale);
+        ALOGV("  num units in tick  : %lu", vui_param.num_units_in_tick);
+        ALOGV("  time scale         : %lu", vui_param.time_scale);
         ALOGV("  fixed frame rate   : %u", vui_param.fixed_frame_rate_flag);
     }
     vui_param.nal_hrd_parameters_present_flag = extract_bits(1);
@@ -677,9 +677,9 @@ void h264_stream_parser::aspect_ratio_info()
             ALOGV("-->aspect_ratio_idc: Reserved Value ");
             break;
     }
-    ALOGV("-->aspect_ratio_idc        : %u", aspect_ratio_idc);
-    ALOGV("-->aspect_ratio_x          : %u", aspect_ratio_x);
-    ALOGV("-->aspect_ratio_y          : %u", aspect_ratio_y);
+    ALOGV("-->aspect_ratio_idc        : %lu", aspect_ratio_idc);
+    ALOGV("-->aspect_ratio_x          : %lu", aspect_ratio_x);
+    ALOGV("-->aspect_ratio_y          : %lu", aspect_ratio_y);
     vui_param.aspect_ratio_info.aspect_ratio_idc = aspect_ratio_idc;
     vui_param.aspect_ratio_info.aspect_ratio_x = aspect_ratio_x;
     vui_param.aspect_ratio_info.aspect_ratio_y = aspect_ratio_y;
@@ -693,20 +693,20 @@ void h264_stream_parser::hrd_parameters(h264_hrd_param *hrd_param)
     hrd_param->cpb_cnt = uev() + 1;
     hrd_param->bit_rate_scale = extract_bits(4);
     hrd_param->cpb_size_scale = extract_bits(4);
-    ALOGV("-->cpb_cnt        : %u", hrd_param->cpb_cnt);
+    ALOGV("-->cpb_cnt        : %lu", hrd_param->cpb_cnt);
     ALOGV("-->bit_rate_scale : %u", hrd_param->bit_rate_scale);
     ALOGV("-->cpb_size_scale : %u", hrd_param->cpb_size_scale);
     if (hrd_param->cpb_cnt > MAX_CPB_COUNT) {
-        ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%u]!", hrd_param->cpb_cnt);
+        ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%lu]!", hrd_param->cpb_cnt);
         return;
     }
     for (idx = 0; idx < hrd_param->cpb_cnt && more_bits(); idx++) {
         hrd_param->bit_rate_value[idx] = uev() + 1;
         hrd_param->cpb_size_value[idx] = uev() + 1;
         hrd_param->cbr_flag[idx] = extract_bits(1);
-        ALOGV("-->bit_rate_value [%d] : %u", idx, hrd_param->bit_rate_value[idx]);
-        ALOGV("-->cpb_size_value [%d] : %u", idx, hrd_param->cpb_size_value[idx]);
-        ALOGV("-->cbr_flag       [%d] : %u", idx, hrd_param->cbr_flag[idx]);
+        ALOGV("-->bit_rate_value [%lu] : %lu", idx, hrd_param->bit_rate_value[idx]);
+        ALOGV("-->cpb_size_value [%lu] : %lu", idx, hrd_param->cpb_size_value[idx]);
+        ALOGV("-->cbr_flag       [%lu] : %u", idx, hrd_param->cbr_flag[idx]);
     }
     hrd_param->initial_cpb_removal_delay_length = extract_bits(5) + 1;
     hrd_param->cpb_removal_delay_length = extract_bits(5) + 1;
@@ -724,7 +724,7 @@ void h264_stream_parser::parse_sei()
     OMX_U32 value = 0, processed_bytes = 0;
     OMX_U8 *sei_msg_start = bitstream;
     OMX_U32 sei_unit_size = bitstream_bytes;
-    ALOGV("@@parse_sei: IN sei_unit_size(%u)", sei_unit_size);
+    ALOGV("@@parse_sei: IN sei_unit_size(%lu)", sei_unit_size);
     while ((processed_bytes + 2) < sei_unit_size && more_bits()) {
         init_bitstream(sei_msg_start + processed_bytes, sei_unit_size - processed_bytes);
         ALOGV("-->NALU_TYPE_SEI");
@@ -734,13 +734,13 @@ void h264_stream_parser::parse_sei()
             payload_type += value;
             processed_bytes++;
         } while (value == 0xFF);
-        ALOGV("-->payload_type   : %u", payload_type);
+        ALOGV("-->payload_type   : %lu", payload_type);
         do {
             value = extract_bits(8);
             payload_size += value;
             processed_bytes++;
         } while (value == 0xFF);
-        ALOGV("-->payload_size   : %u", payload_size);
+        ALOGV("-->payload_size   : %lu", payload_size);
         if (payload_size > 0) {
             switch (payload_type) {
                 case BUFFERING_PERIOD:
@@ -756,11 +756,11 @@ void h264_stream_parser::parse_sei()
                     parse_frame_pack();
                     break;
                 default:
-                    ALOGV("-->SEI payload type [%u] not implemented! size[%u]", payload_type, payload_size);
+                    ALOGV("-->SEI payload type [%lu] not implemented! size[%lu]", payload_type, payload_size);
             }
         }
         processed_bytes += (payload_size + emulation_code_skip_cntr);
-        ALOGV("-->SEI processed_bytes[%u]", processed_bytes);
+        ALOGV("-->SEI processed_bytes[%lu]", processed_bytes);
     }
     ALOGV("@@parse_sei: OUT");
 }
@@ -772,38 +772,38 @@ void h264_stream_parser::sei_buffering_period()
     h264_hrd_param *hrd_param = NULL;
     ALOGV("@@sei_buffering_period: IN");
     value = uev(); // seq_parameter_set_id
-    ALOGV("-->seq_parameter_set_id : %u", value);
+    ALOGV("-->seq_parameter_set_id : %lu", value);
     if (value > 31) {
-        ALOGV("ERROR: Invalid seq_parameter_set_id [%u]!", value);
+        ALOGV("ERROR: Invalid seq_parameter_set_id [%lu]!", value);
         return;
     }
     sei_buf_period.is_valid = false;
     if (vui_param.nal_hrd_parameters_present_flag) {
         hrd_param = &vui_param.nal_hrd_parameters;
         if (hrd_param->cpb_cnt > MAX_CPB_COUNT) {
-            ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%u]!", hrd_param->cpb_cnt);
+            ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%lu]!", hrd_param->cpb_cnt);
             return;
         }
         for (idx = 0; idx < hrd_param->cpb_cnt ; idx++) {
             sei_buf_period.is_valid = true;
             sei_buf_period.initial_cpb_removal_delay[idx] = extract_bits(hrd_param->initial_cpb_removal_delay_length);
             sei_buf_period.initial_cpb_removal_delay_offset[idx] = extract_bits(hrd_param->initial_cpb_removal_delay_length);
-            ALOGV("-->initial_cpb_removal_delay        : %u", sei_buf_period.initial_cpb_removal_delay[idx]);
-            ALOGV("-->initial_cpb_removal_delay_offset : %u", sei_buf_period.initial_cpb_removal_delay_offset[idx]);
+            ALOGV("-->initial_cpb_removal_delay        : %lu", sei_buf_period.initial_cpb_removal_delay[idx]);
+            ALOGV("-->initial_cpb_removal_delay_offset : %lu", sei_buf_period.initial_cpb_removal_delay_offset[idx]);
         }
     }
     if (vui_param.vcl_hrd_parameters_present_flag) {
         hrd_param = &vui_param.vcl_hrd_parameters;
         if (hrd_param->cpb_cnt > MAX_CPB_COUNT) {
-            ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%u]!", hrd_param->cpb_cnt);
+            ALOGV("ERROR: Invalid hrd_param->cpb_cnt [%lu]!", hrd_param->cpb_cnt);
             return;
         }
         for (idx = 0; idx < hrd_param->cpb_cnt ; idx++) {
             sei_buf_period.is_valid = true;
             sei_buf_period.initial_cpb_removal_delay[idx] = extract_bits(hrd_param->initial_cpb_removal_delay_length);
             sei_buf_period.initial_cpb_removal_delay_offset[idx] = extract_bits(hrd_param->initial_cpb_removal_delay_length);
-            ALOGV("-->initial_cpb_removal_delay        : %u", sei_buf_period.initial_cpb_removal_delay[idx]);
-            ALOGV("-->initial_cpb_removal_delay_offset : %u", sei_buf_period.initial_cpb_removal_delay_offset[idx]);
+            ALOGV("-->initial_cpb_removal_delay        : %lu", sei_buf_period.initial_cpb_removal_delay[idx]);
+            ALOGV("-->initial_cpb_removal_delay_offset : %lu", sei_buf_period.initial_cpb_removal_delay_offset[idx]);
         }
     }
     sei_buf_period.au_cntr = 0;
@@ -829,10 +829,10 @@ void h264_stream_parser::sei_picture_timing()
     }
     sei_pic_timing.cpb_removal_delay = extract_bits(cpb_removal_len);
     sei_pic_timing.dpb_output_delay = extract_bits(dpb_output_len);
-    ALOGV("-->cpb_removal_len : %u", cpb_removal_len);
-    ALOGV("-->dpb_output_len  : %u", dpb_output_len);
-    ALOGV("-->cpb_removal_delay : %u", sei_pic_timing.cpb_removal_delay);
-    ALOGV("-->dpb_output_delay  : %u", sei_pic_timing.dpb_output_delay);
+    ALOGV("-->cpb_removal_len : %lu", cpb_removal_len);
+    ALOGV("-->dpb_output_len  : %lu", dpb_output_len);
+    ALOGV("-->cpb_removal_delay : %lu", sei_pic_timing.cpb_removal_delay);
+    ALOGV("-->dpb_output_delay  : %lu", sei_pic_timing.dpb_output_delay);
     if (vui_param.pic_struct_present_flag) {
         sei_pic_timing.pic_struct = extract_bits(4);
         sei_pic_timing.num_clock_ts = 0;
@@ -855,7 +855,7 @@ void h264_stream_parser::sei_picture_timing()
             default:
                 ALOGE("sei_picture_timing: pic_struct invalid!");
         }
-        ALOGV("-->num_clock_ts      : %u", sei_pic_timing.num_clock_ts);
+        ALOGV("-->num_clock_ts      : %lu", sei_pic_timing.num_clock_ts);
         for (OMX_U32 i = 0; i < sei_pic_timing.num_clock_ts && more_bits(); i++) {
             sei_pic_timing.clock_ts_flag = extract_bits(1);
             if (sei_pic_timing.clock_ts_flag) {
@@ -868,7 +868,7 @@ void h264_stream_parser::sei_picture_timing()
                 sei_pic_timing.cnt_dropped_flag = extract_bits(1);
                 sei_pic_timing.n_frames = extract_bits(8);
                 ALOGV("-->f_timestamp_flg   : %u", sei_pic_timing.full_timestamp_flag);
-                ALOGV("-->n_frames          : %u", sei_pic_timing.n_frames);
+                ALOGV("-->n_frames          : %lu", sei_pic_timing.n_frames);
                 sei_pic_timing.seconds_value = 0;
                 sei_pic_timing.minutes_value = 0;
                 sei_pic_timing.hours_value = 0;
@@ -891,10 +891,10 @@ void h264_stream_parser::sei_picture_timing()
                 sei_pic_timing.time_offset = 0;
                 if (time_offset_len > 0)
                     sei_pic_timing.time_offset = iv(time_offset_len);
-                ALOGV("-->seconds_value     : %u", sei_pic_timing.seconds_value);
-                ALOGV("-->minutes_value     : %u", sei_pic_timing.minutes_value);
-                ALOGV("-->hours_value       : %u", sei_pic_timing.hours_value);
-                ALOGV("-->time_offset       : %d", sei_pic_timing.time_offset);
+                ALOGV("-->seconds_value     : %lu", sei_pic_timing.seconds_value);
+                ALOGV("-->minutes_value     : %lu", sei_pic_timing.minutes_value);
+                ALOGV("-->hours_value       : %lu", sei_pic_timing.hours_value);
+                ALOGV("-->time_offset       : %ld", sei_pic_timing.time_offset);
             }
         }
     }
@@ -1147,9 +1147,9 @@ OMX_U32 h264_stream_parser::get_nal_unit_type(OMX_U32 *nal_unit_type)
             ALOGE("WARNING: forbidden_zero_bit should be zero!");
         }
         value = extract_bits(2);
-        ALOGV("-->nal_ref_idc    : %x", value);
+        ALOGV("-->nal_ref_idc    : %lx", value);
         *nal_unit_type = extract_bits(5);
-        ALOGV("-->nal_unit_type  : %x", *nal_unit_type);
+        ALOGV("-->nal_unit_type  : %lx", *nal_unit_type);
         consumed_bytes++;
         if (consumed_bytes > 5) {
             ALOGE("-->WARNING: Startcode was found after the first 4 bytes!");
@@ -1235,33 +1235,33 @@ void h264_stream_parser::parse_frame_pack()
 
 void h264_stream_parser::print_frame_pack()
 {
-    ALOGV("## frame_packing_arrangement.id = %u", frame_packing_arrangement.id);
-    ALOGV("## frame_packing_arrangement.cancel_flag = %u",
+    ALOGV("## frame_packing_arrangement.id = %lu", frame_packing_arrangement.id);
+    ALOGV("## frame_packing_arrangement.cancel_flag = %lu",
             frame_packing_arrangement.cancel_flag);
     if (!frame_packing_arrangement.cancel_flag) {
-        ALOGV("## frame_packing_arrangement.type = %u",
+        ALOGV("## frame_packing_arrangement.type = %lu",
                 frame_packing_arrangement.type);
-        ALOGV("## frame_packing_arrangement.quincunx_sampling_flag = %u",
+        ALOGV("## frame_packing_arrangement.quincunx_sampling_flag = %lu",
                 frame_packing_arrangement.quincunx_sampling_flag);
-        ALOGV("## frame_packing_arrangement.content_interpretation_type = %u",
+        ALOGV("## frame_packing_arrangement.content_interpretation_type = %lu",
                 frame_packing_arrangement.content_interpretation_type);
-        ALOGV("## frame_packing_arrangement.spatial_flipping_flag = %u",
+        ALOGV("## frame_packing_arrangement.spatial_flipping_flag = %lu",
                 frame_packing_arrangement.spatial_flipping_flag);
-        ALOGV("## frame_packing_arrangement.frame0_flipped_flag = %u",
+        ALOGV("## frame_packing_arrangement.frame0_flipped_flag = %lu",
                 frame_packing_arrangement.frame0_flipped_flag);
-        ALOGV("## frame_packing_arrangement.field_views_flag = %u",
+        ALOGV("## frame_packing_arrangement.field_views_flag = %lu",
                 frame_packing_arrangement.field_views_flag);
-        ALOGV("## frame_packing_arrangement.current_frame_is_frame0_flag = %u",
+        ALOGV("## frame_packing_arrangement.current_frame_is_frame0_flag = %lu",
                 frame_packing_arrangement.current_frame_is_frame0_flag);
-        ALOGV("## frame_packing_arrangement.frame0_self_contained_flag = %u",
+        ALOGV("## frame_packing_arrangement.frame0_self_contained_flag = %lu",
                 frame_packing_arrangement.frame0_self_contained_flag);
-        ALOGV("## frame_packing_arrangement.frame1_self_contained_flag = %u",
+        ALOGV("## frame_packing_arrangement.frame1_self_contained_flag = %lu",
                 frame_packing_arrangement.frame1_self_contained_flag);
-        ALOGV("## frame_packing_arrangement.reserved_byte = %u",
+        ALOGV("## frame_packing_arrangement.reserved_byte = %lu",
                 frame_packing_arrangement.reserved_byte);
-        ALOGV("## frame_packing_arrangement.repetition_period = %u",
+        ALOGV("## frame_packing_arrangement.repetition_period = %lu",
                 frame_packing_arrangement.repetition_period);
-        ALOGV("## frame_packing_arrangement.extension_flag = %u",
+        ALOGV("## frame_packing_arrangement.extension_flag = %lu",
                 frame_packing_arrangement.extension_flag);
     }
 }
@@ -1300,7 +1300,7 @@ void h264_stream_parser::parse_nal(OMX_U8* data_ptr, OMX_U32 data_len, OMX_U32 n
     if (nal_type != NALU_TYPE_VUI) {
         cons_bytes = get_nal_unit_type(&nal_unit_type);
         if (nal_type != nal_unit_type && nal_type != NALU_TYPE_UNSPECIFIED) {
-            ALOGV("Unexpected nal_type(%x) expected(%x)", nal_unit_type, nal_type);
+            ALOGV("Unexpected nal_type(%lx) expected(%lx)", nal_unit_type, nal_type);
             return;
         }
     }
diff --git a/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp b/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
index 4ae21b105..96c467366 100644
--- a/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
+++ b/mm-video-v4l2/vidc/vdec/src/omx_vdec_msm8974.cpp
@@ -1230,7 +1230,7 @@ void omx_vdec::process_event_cb(void *ctxt, unsigned char id)
                                                 (pThis->framesize.nHeight !=
                                                     pThis->drv_ctx.video_resolution.frame_height)) {
 
-                                                DEBUG_PRINT_HIGH("Resolution changed from: wxh = %dx%d to: wxh = %dx%d",
+                                                DEBUG_PRINT_HIGH("Resolution changed from: wxh = %lux%lu to: wxh = %dx%d",
                                                         pThis->framesize.nWidth,
                                                         pThis->framesize.nHeight,
                                                         pThis->drv_ctx.video_resolution.frame_width,
@@ -1258,7 +1258,7 @@ void omx_vdec::process_event_cb(void *ctxt, unsigned char id)
                                             if (pThis->rectangle.nLeft + pThis->rectangle.nWidth >
                                                 pThis->drv_ctx.video_resolution.frame_width) {
 
-                                                DEBUG_PRINT_HIGH("Crop L[%u] + R[%u] > W[%u]",
+                                                DEBUG_PRINT_HIGH("Crop L[%ld] + R[%lu] > W[%u]",
                                                         pThis->rectangle.nLeft, pThis->rectangle.nWidth,
                                                         pThis->drv_ctx.video_resolution.frame_width);
                                                 pThis->rectangle.nLeft = 0;
@@ -1266,7 +1266,7 @@ void omx_vdec::process_event_cb(void *ctxt, unsigned char id)
                                                 if (pThis->rectangle.nWidth >
                                                     pThis->drv_ctx.video_resolution.frame_width) {
 
-                                                    DEBUG_PRINT_HIGH("Crop R[%u] > W[%u]",
+                                                    DEBUG_PRINT_HIGH("Crop R[%lu] > W[%u]",
                                                             pThis->rectangle.nWidth,
                                                             pThis->drv_ctx.video_resolution.frame_width);
                                                     pThis->rectangle.nWidth =
@@ -1276,7 +1276,7 @@ void omx_vdec::process_event_cb(void *ctxt, unsigned char id)
                                             if (pThis->rectangle.nTop + pThis->rectangle.nHeight >
                                                 pThis->drv_ctx.video_resolution.frame_height) {
 
-                                                DEBUG_PRINT_HIGH("Crop T[%u] + B[%u] > H[%u]",
+                                                DEBUG_PRINT_HIGH("Crop T[%ld] + B[%lu] > H[%u]",
                                                     pThis->rectangle.nTop, pThis->rectangle.nHeight,
                                                     pThis->drv_ctx.video_resolution.frame_height);
                                                 pThis->rectangle.nTop = 0;
@@ -1284,18 +1284,18 @@ void omx_vdec::process_event_cb(void *ctxt, unsigned char id)
                                                 if (pThis->rectangle.nHeight >
                                                     pThis->drv_ctx.video_resolution.frame_height) {
 
-                                                    DEBUG_PRINT_HIGH("Crop B[%u] > H[%u]",
+                                                    DEBUG_PRINT_HIGH("Crop B[%lu] > H[%u]",
                                                         pThis->rectangle.nHeight,
                                                         pThis->drv_ctx.video_resolution.frame_height);
                                                     pThis->rectangle.nHeight =
                                                         pThis->drv_ctx.video_resolution.frame_height;
                                                 }
                                             }
-                                            DEBUG_PRINT_HIGH("Updated Crop Info: L: %u, T: %u, R: %u, B: %u",
+                                            DEBUG_PRINT_HIGH("Updated Crop Info: L: %ld, T: %ld, R: %lu, B: %lu",
                                                     pThis->rectangle.nLeft, pThis->rectangle.nTop,
                                                     pThis->rectangle.nWidth, pThis->rectangle.nHeight);
                                         } else {
-                                            DEBUG_PRINT_ERROR("Rxd Invalid PORT_RECONFIG event (%lu)", p2);
+                                            DEBUG_PRINT_ERROR("Rxd Invalid PORT_RECONFIG event (%d)", p2);
                                             break;
                                         }
                                         if (pThis->m_cb.EventHandler) {
@@ -1788,7 +1788,7 @@ OMX_ERRORTYPE omx_vdec::component_init(OMX_STRING role)
 
         property_get("persist.vidc.dec.conceal_color", property_value, DEFAULT_CONCEAL_COLOR);
         m_conceal_color= atoi(property_value);
-        DEBUG_PRINT_HIGH("trying to set 0x%x as conceal color\n",m_conceal_color);
+        DEBUG_PRINT_HIGH("trying to set 0x%lx as conceal color\n", m_conceal_color);
         control.id = V4L2_CID_MPEG_VIDC_VIDEO_CONCEAL_COLOR;
         control.value = m_conceal_color;
         ret = ioctl(drv_ctx.video_driver_fd, VIDIOC_S_CTRL, &control);
@@ -3168,7 +3168,7 @@ OMX_ERRORTYPE  omx_vdec::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                                        }
                                    }
                                    if (portDefn->nBufferCountActual > MAX_NUM_INPUT_OUTPUT_BUFFERS) {
-                                       DEBUG_PRINT_ERROR("Requested o/p buf count (%u) exceeds limit(%u)",
+                                       DEBUG_PRINT_ERROR("Requested o/p buf count (%lu) exceeds limit(%u)",
                                                                portDefn->nBufferCountActual, MAX_NUM_INPUT_OUTPUT_BUFFERS);
                                        eRet = OMX_ErrorBadParameter;
                                    } else if (!client_buffers.get_buffer_req(buffer_size)) {
@@ -3287,13 +3287,13 @@ OMX_ERRORTYPE  omx_vdec::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                                    }
                                    if (m_custom_buffersize.input_buffersize
                                         && (portDefn->nBufferSize > m_custom_buffersize.input_buffersize)) {
-                                       DEBUG_PRINT_ERROR("ERROR: Custom buffer size set by client: %d, trying to set: %d",
+                                       DEBUG_PRINT_ERROR("ERROR: Custom buffer size set by client: %lu, trying to set: %lu",
                                                m_custom_buffersize.input_buffersize, portDefn->nBufferSize);
                                        eRet = OMX_ErrorBadParameter;
                                        break;
                                    }
                                    if (portDefn->nBufferCountActual > MAX_NUM_INPUT_OUTPUT_BUFFERS) {
-                                       DEBUG_PRINT_ERROR("Requested i/p buf count (%u) exceeds limit (%u)",
+                                       DEBUG_PRINT_ERROR("Requested i/p buf count (%lu) exceeds limit (%u)",
                                                portDefn->nBufferCountActual, MAX_NUM_INPUT_OUTPUT_BUFFERS);
                                        eRet = OMX_ErrorBadParameter;
                                        break;
@@ -3884,7 +3884,7 @@ OMX_ERRORTYPE  omx_vdec::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                     eRet = get_buffer_req(&drv_ctx.ip_buf);
                     if (eRet == OMX_ErrorNone) {
                         m_custom_buffersize.input_buffersize = drv_ctx.ip_buf.buffer_size;
-                        DEBUG_PRINT_HIGH("Successfully set custom input buffer size = %d",
+                        DEBUG_PRINT_HIGH("Successfully set custom input buffer size = %lu",
                             m_custom_buffersize.input_buffersize);
                     } else {
                         DEBUG_PRINT_ERROR("Failed to get buffer requirement");
@@ -3982,7 +3982,7 @@ OMX_ERRORTYPE  omx_vdec::get_config(OMX_IN OMX_HANDLETYPE      hComp,
                                   VALIDATE_OMX_PARAM_DATA(configData, OMX_CONFIG_RECTTYPE);
                                   OMX_CONFIG_RECTTYPE *rect = (OMX_CONFIG_RECTTYPE *) configData;
                                   memcpy(rect, &rectangle, sizeof(OMX_CONFIG_RECTTYPE));
-                                  DEBUG_PRINT_HIGH("get_config: crop info: L: %u, T: %u, R: %u, B: %u",
+                                  DEBUG_PRINT_HIGH("get_config: crop info: L: %ld, T: %ld, R: %lu, B: %lu",
                                         rectangle.nLeft, rectangle.nTop,
                                         rectangle.nWidth, rectangle.nHeight);
                                   break;
@@ -4116,7 +4116,7 @@ OMX_ERRORTYPE  omx_vdec::set_config(OMX_IN OMX_HANDLETYPE      hComp,
         return ret;
     } else if ((int)configIndex == (int)OMX_IndexConfigPriority) {
         OMX_PARAM_U32TYPE *priority = (OMX_PARAM_U32TYPE *)configData;
-        DEBUG_PRINT_LOW("Set_config: priority %d", priority->nU32);
+        DEBUG_PRINT_LOW("Set_config: priority %lu", priority->nU32);
 
         struct v4l2_control control;
 
@@ -4133,7 +4133,7 @@ OMX_ERRORTYPE  omx_vdec::set_config(OMX_IN OMX_HANDLETYPE      hComp,
         return ret;
     } else if ((int)configIndex == (int)OMX_IndexConfigOperatingRate) {
         OMX_PARAM_U32TYPE *rate = (OMX_PARAM_U32TYPE *)configData;
-        DEBUG_PRINT_LOW("Set_config: operating-rate %u fps", rate->nU32 >> 16);
+        DEBUG_PRINT_LOW("Set_config: operating-rate %lu fps", rate->nU32 >> 16);
 
         struct v4l2_control control;
 
@@ -4143,7 +4143,7 @@ OMX_ERRORTYPE  omx_vdec::set_config(OMX_IN OMX_HANDLETYPE      hComp,
         if (ioctl(drv_ctx.video_driver_fd, VIDIOC_S_CTRL, &control)) {
             ret = errno == -EBUSY ? OMX_ErrorInsufficientResources :
                     OMX_ErrorUnsupportedSetting;
-            DEBUG_PRINT_ERROR("Failed to set operating rate %u fps (%s)",
+            DEBUG_PRINT_ERROR("Failed to set operating rate %lu fps (%s)",
                     rate->nU32 >> 16, errno == -EBUSY ? "HW Overload" : strerror(errno));
         }
         return ret;
@@ -6973,7 +6973,7 @@ OMX_ERRORTYPE omx_vdec::fill_buffer_done(OMX_HANDLETYPE hComp,
                buffer->nFilledLen = 0;
             }
 
-            DEBUG_PRINT_LOW(" -- %s Frame -- info:: fps(%d) lastRenderTime(%lld) bufferTs(%lld) ts_delta(%d)",
+            DEBUG_PRINT_LOW(" -- %s Frame -- info:: fps(%d) lastRenderTime(%lld) bufferTs(%lld) ts_delta(%lld)",
                               buffer->nFilledLen? "Rendering":"Dropping",current_framerate,m_last_rendered_TS,
                               il_buffer->nTimeStamp,ts_delta);
         }
@@ -7251,7 +7251,7 @@ int omx_vdec::async_message_process (void *context, void* message)
                         || (omx->drv_ctx.video_resolution.frame_width != vdec_msg->msgdata.output_frame.picsize.frame_width)
                         || (omx->drv_ctx.video_resolution.frame_height != vdec_msg->msgdata.output_frame.picsize.frame_height) )) {
 
-                        DEBUG_PRINT_HIGH("Paramters Changed From: Len: %u, WxH: %dx%d, L: %u, T: %u, R: %u, B: %u --> Len: %u, WxH: %dx%d, L: %u, T: %u, R: %u, B: %u",
+                        DEBUG_PRINT_HIGH("Paramters Changed From: Len: %lu, WxH: %dx%d, L: %u, T: %u, R: %u, B: %u --> Len: %lu, WxH: %dx%d, L: %u, T: %u, R: %u, B: %u",
                                 omx->prev_n_filled_len,
                                 omx->drv_ctx.video_resolution.frame_width,
                                 omx->drv_ctx.video_resolution.frame_height,
@@ -7307,7 +7307,7 @@ int omx_vdec::async_message_process (void *context, void* message)
                                  (unsigned long)vdec_msg->msgdata.output_frame.offset),
                                 vdec_msg->msgdata.output_frame.len);
                 } else {
-                    DEBUG_PRINT_ERROR("Invalid filled length = %u, buffer size = %u, prev_length = %u",
+                    DEBUG_PRINT_ERROR("Invalid filled length = %u, buffer size = %lu, prev_length = %lu",
                             (unsigned int)vdec_msg->msgdata.output_frame.len,
                             omxhdr->nAllocLen, omx->prev_n_filled_len);
                     omxhdr->nFilledLen = 0;
@@ -8332,7 +8332,7 @@ OMX_ERRORTYPE omx_vdec::update_portdef(OMX_PARAM_PORTDEFINITIONTYPE *portDefn)
         portDefn->format.video.nSliceHeight = drv_ctx.video_resolution.frame_height;
     }
     DEBUG_PRINT_HIGH("update_portdef(%lu): Width = %lu Height = %lu Stride = %ld "
-            "SliceHeight = %lu eColorFormat = %lu nBufSize %lu nBufCnt %lu",
+            "SliceHeight = %lu eColorFormat = %u nBufSize %lu nBufCnt %lu",
             portDefn->nPortIndex,
             portDefn->format.video.nFrameWidth,
             portDefn->format.video.nFrameHeight,
@@ -9013,7 +9013,6 @@ void omx_vdec::print_debug_extradata(OMX_OTHER_EXTRADATATYPE *extra)
                 "                         type: %lu \n"
                 " quincunx_sampling_flagFormat: %lu \n"
                 "  content_interpretation_type: %lu \n"
-                "  content_interpretation_type: %lu \n"
                 "        spatial_flipping_flag: %lu \n"
                 "          frame0_flipped_flag: %lu \n"
                 "             field_views_flag: %lu \n"
@@ -9068,8 +9067,8 @@ void omx_vdec::print_debug_extradata(OMX_OTHER_EXTRADATATYPE *extra)
         OMX_U32 i = 0;
         DEBUG_PRINT_HIGH(
                 "--------------  Userdata  -------------\n"
-                "    Stream userdata type: %d\n"
-                "          userdata size: %d\n"
+                "    Stream userdata type: %lu\n"
+                "          userdata size: %lu\n"
                 "    STREAM_USERDATA:",
                 userdata->type, userdata_size);
                 for (i = 0; i < userdata_size; i+=4) {
@@ -9830,7 +9829,7 @@ void omx_vdec::buf_ref_add(OMX_U32 fd, OMX_U32 offset)
         if ((out_dynamic_list[i].fd == fd) &&
             (out_dynamic_list[i].offset == offset)) {
                out_dynamic_list[i].ref_count++;
-               DEBUG_PRINT_LOW("buf_ref_add: [ALREADY PRESENT] fd = %d ref_count = %d",
+               DEBUG_PRINT_LOW("buf_ref_add: [ALREADY PRESENT] fd = %lu ref_count = %lu",
                      out_dynamic_list[i].fd, out_dynamic_list[i].ref_count);
                buf_present = true;
                break;
@@ -9844,7 +9843,7 @@ void omx_vdec::buf_ref_add(OMX_U32 fd, OMX_U32 offset)
                 out_dynamic_list[i].offset = offset;
                 out_dynamic_list[i].dup_fd = dup(fd);
                 out_dynamic_list[i].ref_count++;
-                DEBUG_PRINT_LOW("buf_ref_add: [ADDED] fd = %d ref_count = %d",
+                DEBUG_PRINT_LOW("buf_ref_add: [ADDED] fd = %lu ref_count = %lu",
                      out_dynamic_list[i].fd, out_dynamic_list[i].ref_count);
                 break;
             }
@@ -9865,7 +9864,7 @@ void omx_vdec::buf_ref_remove(OMX_U32 fd, OMX_U32 offset)
             out_dynamic_list[i].ref_count--;
             if (out_dynamic_list[i].ref_count == 0) {
                 close(out_dynamic_list[i].dup_fd);
-                DEBUG_PRINT_LOW("buf_ref_remove: [REMOVED] fd = %d ref_count = %d",
+                DEBUG_PRINT_LOW("buf_ref_remove: [REMOVED] fd = %lu ref_count = %lu",
                      out_dynamic_list[i].fd, out_dynamic_list[i].ref_count);
                 out_dynamic_list[i].dup_fd = 0;
                 out_dynamic_list[i].fd = 0;
@@ -10081,7 +10080,7 @@ OMX_ERRORTYPE omx_vdec::describeColorFormat(OMX_PTR pParam) {
     };
 
     DEBUG_PRINT_LOW("NOTE: Describe color format : %x", params->eColorFormat);
-    DEBUG_PRINT_LOW("  FrameWidth x FrameHeight : %d x %d", params->nFrameWidth, params->nFrameHeight);
+    DEBUG_PRINT_LOW("  FrameWidth x FrameHeight : %lu x %lu", params->nFrameWidth, params->nFrameHeight);
     DEBUG_PRINT_LOW("  YWidth x YHeight : %d x %d", img->mWidth, img->mHeight);
     for (size_t i = 0; i < img->mNumPlanes; ++i) {
         DEBUG_PRINT_LOW("    Plane[%d] : offset=%d / xStep=%d / yStep = %d",
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
index aa62b790b..dcc2afec1 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
@@ -1882,7 +1882,7 @@ OMX_ERRORTYPE  omx_video::get_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                     reinterpret_cast<OMX_QCOM_VIDEO_PARAM_PEAK_BITRATE*>(paramData);
                 DEBUG_PRINT_LOW("get_parameter: OMX_QcomIndexParamPeakBitrate");
                 if (!dev_get_peak_bitrate(&peakbitrate)) {
-                    DEBUG_PRINT_ERROR("Invalid entry returned from get_peak_bitrate %d",
+                    DEBUG_PRINT_ERROR("Invalid entry returned from get_peak_bitrate %lu",
                         pParam->nPeakBitrate);
                 } else {
                     pParam->nPeakBitrate = peakbitrate;
@@ -3407,7 +3407,7 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
         media_buffer = (LEGACY_CAM_METADATA_TYPE *)meta_buffer_hdr[nBufIndex].pBuffer;
         if ((media_buffer->buffer_type == LEGACY_CAM_SOURCE)
                 && buffer->nAllocLen != sizeof(LEGACY_CAM_METADATA_TYPE)) {
-            DEBUG_PRINT_ERROR("Invalid metadata size expected(%u) v/s recieved(%zu)",
+            DEBUG_PRINT_ERROR("Invalid metadata size expected(%lu) v/s recieved(%zu)",
                     buffer->nAllocLen, sizeof(LEGACY_CAM_METADATA_TYPE));
             met_error = true;
         } else if (media_buffer) {
@@ -4252,7 +4252,7 @@ OMX_ERRORTYPE omx_video::get_supported_profile_level(OMX_VIDEO_PARAM_PROFILELEVE
                 profileLevelType->eLevel   = OMX_VIDEO_AVCLevel4;
 #endif
             } else {
-                DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoProfileLevelQuerySupported nProfileIndex ret NoMore %d",
+                DEBUG_PRINT_LOW("get_parameter: OMX_IndexParamVideoProfileLevelQuerySupported nProfileIndex ret NoMore %lu",
                         profileLevelType->nProfileIndex);
                 eRet = OMX_ErrorNoMore;
             }
@@ -4583,7 +4583,7 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_opaque(OMX_IN OMX_HANDLETYPE hComp,
     media_buffer = (VideoGrallocMetadata *)buffer->pBuffer;
     if ((media_buffer->eType == LEGACY_CAM_SOURCE)
             && buffer->nAllocLen != sizeof(LEGACY_CAM_METADATA_TYPE)) {
-        DEBUG_PRINT_ERROR("Invalid metadata size expected(%u) v/s recieved(%zu)",
+        DEBUG_PRINT_ERROR("Invalid metadata size expected(%lu) v/s recieved(%zu)",
                 buffer->nAllocLen, sizeof(LEGACY_CAM_METADATA_TYPE));
         return OMX_ErrorBadParameter;
     }
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
index 2d2cfad28..6cb394d68 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
@@ -530,7 +530,7 @@ OMX_ERRORTYPE  omx_venc::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                     DEBUG_PRINT_LOW("i/p buffersize requested = %lu", portDefn->nBufferSize);
 
                     if (portDefn->nBufferCountActual > MAX_NUM_INPUT_BUFFERS) {
-                        DEBUG_PRINT_ERROR("ERROR: (In_PORT) actual count (%lu) exceeds max(%lu)",
+                        DEBUG_PRINT_ERROR("ERROR: (In_PORT) actual count (%u) exceeds max(%u)",
                                              (unsigned int)portDefn->nBufferCountActual, (unsigned int)MAX_NUM_INPUT_BUFFERS);
                         return OMX_ErrorUnsupportedSetting;
                     }
@@ -2096,7 +2096,7 @@ int omx_venc::async_message_process (void *context, void* message)
             break;
 #endif
         default:
-            DEBUG_PRINT_HIGH("Unknown msg received : %d", m_sVenc_msg->msgcode);
+            DEBUG_PRINT_HIGH("Unknown msg received : %lu", m_sVenc_msg->msgcode);
             break;
     }
     return 0;
diff --git a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
index 5ae84d994..66c0fa6ab 100644
--- a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
+++ b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
@@ -539,9 +539,9 @@ bool venc_dev::handle_extradata(void *buffer, int index)
                 p_bufhdr->nOffset + p_bufhdr->nFilledLen, 4);
     while(p_extra->eType != OMX_ExtraDataNone)
     {
-        DEBUG_PRINT_LOW("[%p/%d] found extradata type %x of size %d (%d) at %x",
+        DEBUG_PRINT_LOW("[%p/%lu] found extradata type %x of size %lu (%lu) at %p",
                 p_bufhdr->pBuffer, p_bufhdr->nFilledLen, p_extra->eType,
-                p_extra->nSize, p_extra->nDataSize, p_extra);
+                p_extra->nSize, p_extra->nDataSize, (void *)p_extra);
 
         p_extra = (OMX_OTHER_EXTRADATATYPE *) (((OMX_U8 *) p_extra) +
                 p_extra->nSize);
@@ -639,20 +639,20 @@ int venc_dev::venc_output_log_buffers(const char *buffer_addr, int buffer_len)
     if (!m_debug.outfile) {
         int size = 0;
         if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_MPEG4) {
-           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%d_%d_%p.m4v",
+           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%lu_%lu_%p.m4v",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_H264) {
-           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%d_%d_%p.264",
+           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%lu_%lu_%p.264",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_H263) {
-           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%d_%d_%p.263",
+           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%lu_%lu_%p.263",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_VP8) {
-           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%d_%d_%p.ivf",
+           size = snprintf(m_debug.outfile_name, PROPERTY_VALUE_MAX, "%s/output_enc_%lu_%lu_%p.ivf",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         }
         if ((size > PROPERTY_VALUE_MAX) && (size < 0)) {
-             DEBUG_PRINT_ERROR("Failed to open output file: %s for logging size:%s",
+             DEBUG_PRINT_ERROR("Failed to open output file: %s for logging size: %d",
                                 m_debug.outfile_name, size);
         }
         m_debug.outfile = fopen(m_debug.outfile_name, "ab");
@@ -675,26 +675,26 @@ int venc_dev::venc_extradata_log_buffers(char *buffer_addr)
     if (!m_debug.extradatafile && m_debug.extradata_log) {
         int size = 0;
         if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_MPEG4) {
-           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%d_%d_%p.m4v",
+           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%lu_%lu_%p.m4v",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_H264) {
-           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%d_%d_%p.264",
+           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%lu_%lu_%p.264",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_H263) {
-           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%d_%d_%p.263",
+           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%lu_%lu_%p.263",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         } else if(m_sVenc_cfg.codectype == V4L2_PIX_FMT_VP8) {
-           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%d_%d_%p.ivf",
+           size = snprintf(m_debug.extradatafile_name, PROPERTY_VALUE_MAX, "%s/extradata_enc_%lu_%lu_%p.ivf",
                            m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         }
         if ((size > PROPERTY_VALUE_MAX) && (size < 0)) {
-             DEBUG_PRINT_ERROR("Failed to open extradata file: %s for logging size:%s",
+             DEBUG_PRINT_ERROR("Failed to open extradata file: %s for logging size: %d",
                                 m_debug.extradatafile_name, size);
         }
 
         m_debug.extradatafile = fopen(m_debug.extradatafile_name, "ab");
         if (!m_debug.extradatafile) {
-            DEBUG_PRINT_ERROR("Failed to open extradata file: %s for logging errno:%d",
+            DEBUG_PRINT_ERROR("Failed to open extradata file: %s for logging errno: %d",
                                m_debug.extradatafile_name, errno);
             m_debug.extradatafile_name[0] = '\0';
             return -1;
@@ -719,15 +719,15 @@ int venc_dev::venc_input_log_buffers(OMX_BUFFERHEADERTYPE *pbuffer, int fd, int
     }
 
     if (!m_debug.infile) {
-        int size = snprintf(m_debug.infile_name, PROPERTY_VALUE_MAX, "%s/input_enc_%d_%d_%p.yuv",
+        int size = snprintf(m_debug.infile_name, PROPERTY_VALUE_MAX, "%s/input_enc_%lu_%lu_%p.yuv",
                             m_debug.log_loc, m_sVenc_cfg.input_width, m_sVenc_cfg.input_height, this);
         if ((size > PROPERTY_VALUE_MAX) && (size < 0)) {
-             DEBUG_PRINT_ERROR("Failed to open output file: %s for logging size:%s",
+             DEBUG_PRINT_ERROR("Failed to open output file: %s for logging size: %d",
                                 m_debug.infile_name, size);
         }
         m_debug.infile = fopen (m_debug.infile_name, "ab");
         if (!m_debug.infile) {
-            DEBUG_PRINT_HIGH("Failed to open input file: %s for logging", m_debug.infile);
+            DEBUG_PRINT_HIGH("Failed to open input file: %s for logging", m_debug.infile_name);
             m_debug.infile_name[0] = '\0';
             return -1;
         }
@@ -801,7 +801,7 @@ bool venc_dev::venc_open(OMX_U32 codec)
         DEBUG_PRINT_ERROR("ERROR: Omx_venc::Comp Init Returning failure");
         return false;
     }
-    DEBUG_PRINT_HIGH(" Open device %s returned fd %d",
+    DEBUG_PRINT_HIGH(" Open device %s returned fd %lu",
             device_name, m_nDriver_fd);
 
     // set the basic configuration of the video encoder driver
@@ -1583,7 +1583,7 @@ bool venc_dev::venc_set_param(void *paramData, OMX_INDEXTYPE index)
                 QOMX_EXTNINDEX_VIDEO_INITIALQP * initqp =
                     (QOMX_EXTNINDEX_VIDEO_INITIALQP *)paramData;
                  if (initqp->bEnableInitQp) {
-                    DEBUG_PRINT_LOW("Enable initial QP: %d", initqp->bEnableInitQp);
+                    DEBUG_PRINT_LOW("Enable initial QP: %lu", initqp->bEnableInitQp);
                     if(venc_enable_initial_qp(initqp) == false) {
                        DEBUG_PRINT_ERROR("ERROR: Failed to enable initial QP");
                        return OMX_ErrorUnsupportedSetting;
@@ -1601,7 +1601,7 @@ bool venc_dev::venc_set_param(void *paramData, OMX_INDEXTYPE index)
                 if(session_qp_range->nPortIndex == (OMX_U32)PORT_INDEX_OUT) {
                     if(venc_set_session_qp_range (session_qp_range->minQP,
                                 session_qp_range->maxQP) == false) {
-                        DEBUG_PRINT_ERROR("\nERROR: Setting QP Range[%d %d] failed",
+                        DEBUG_PRINT_ERROR("\nERROR: Setting QP Range[%lu %lu] failed",
                             session_qp_range->minQP, session_qp_range->maxQP);
                         return false;
                     } else {
@@ -1695,7 +1695,7 @@ bool venc_dev::venc_set_param(void *paramData, OMX_INDEXTYPE index)
                         return false;
                     }
                 } else {
-                    DEBUG_PRINT_ERROR("OMX_QcomIndexHierarchicalStructure called on wrong port(%d)", pParam->nPortIndex);
+                    DEBUG_PRINT_ERROR("OMX_QcomIndexHierarchicalStructure called on wrong port(%lu)", pParam->nPortIndex);
                     return false;
                 }
 
@@ -1960,7 +1960,7 @@ bool venc_dev::venc_set_config(void *configData, OMX_INDEXTYPE index)
         case OMX_IndexConfigPriority:
             {
                 OMX_PARAM_U32TYPE *priority = (OMX_PARAM_U32TYPE *)configData;
-                DEBUG_PRINT_LOW("Set_config: priority %u",priority->nU32);
+                DEBUG_PRINT_LOW("Set_config: priority %lu",priority->nU32);
                 if (!venc_set_session_priority(priority->nU32)) {
                     DEBUG_PRINT_ERROR("Failed to set priority");
                     return false;
@@ -1970,7 +1970,7 @@ bool venc_dev::venc_set_config(void *configData, OMX_INDEXTYPE index)
         case OMX_IndexConfigOperatingRate:
             {
                 OMX_PARAM_U32TYPE *rate = (OMX_PARAM_U32TYPE *)configData;
-                DEBUG_PRINT_LOW("Set_config: operating rate %d", rate->nU32);
+                DEBUG_PRINT_LOW("Set_config: operating rate %lu", rate->nU32);
                 if (!venc_set_operatingrate(rate->nU32)) {
                     DEBUG_PRINT_ERROR("Failed to set operating rate");
                     return false;
@@ -2162,14 +2162,14 @@ void venc_dev::venc_config_print()
     DEBUG_PRINT_HIGH("ENC_CONFIG: Init_qpI: %ld, Init_qpP: %ld, Init_qpb: %ld",
             init_qp.iframeqp, init_qp.pframeqp, init_qp.bframeqp);
 
-    DEBUG_PRINT_HIGH("\nENC_CONFIG: minQP: %d, maxQP: %d",
+    DEBUG_PRINT_HIGH("\nENC_CONFIG: minQP: %lu, maxQP: %lu",
             session_qp_values.minqp, session_qp_values.maxqp);
 
     DEBUG_PRINT_HIGH("ENC_CONFIG: VOP_Resolution: %ld, Slice-Mode: %ld, Slize_Size: %ld",
             voptimecfg.voptime_resolution, multislice.mslice_mode,
             multislice.mslice_size);
 
-    DEBUG_PRINT_HIGH("ENC_CONFIG: EntropyMode: %d, CabacModel: %ld",
+    DEBUG_PRINT_HIGH("ENC_CONFIG: EntropyMode: %lu, CabacModel: %ld",
             entropy.entropysel, entropy.cabacmodel);
 
     DEBUG_PRINT_HIGH("ENC_CONFIG: DB-Mode: %ld, alpha: %ld, Beta: %ld",
@@ -2190,9 +2190,9 @@ void venc_dev::venc_config_print()
 
     DEBUG_PRINT_HIGH("ENC_CONFIG: Peak bitrate: %d", peak_bitrate.peakbitrate);
 
-    DEBUG_PRINT_HIGH("ENC_CONFIG: Session Priority: %u", sess_priority.priority);
+    DEBUG_PRINT_HIGH("ENC_CONFIG: Session Priority: %lu", sess_priority.priority);
 
-    DEBUG_PRINT_HIGH("ENC_CONFIG: Operating Rate: %u", operating_rate);
+    DEBUG_PRINT_HIGH("ENC_CONFIG: Operating Rate: %lu", operating_rate);
 }
 
 bool venc_dev::venc_reconfig_reqbufs()
@@ -2669,7 +2669,7 @@ bool venc_dev::venc_set_hier_layers(QOMX_VIDEO_HIERARCHICALCODINGTYPE type,
     control.id = V4L2_CID_MPEG_VIDC_VIDEO_HIER_P_NUM_LAYERS;
     if (type == QOMX_HIERARCHICALCODING_P) {
         control.value = num_layers;
-        DEBUG_PRINT_HIGH("Set Hier P num layers: %d", num_layers);
+        DEBUG_PRINT_HIGH("Set Hier P num layers: %lu", num_layers);
         if (ioctl(m_nDriver_fd, VIDIOC_S_CTRL, &control)) {
             DEBUG_PRINT_ERROR("Request to set Hier P num layers failed");
             return false;
@@ -2703,12 +2703,12 @@ bool venc_dev::venc_set_extradata(OMX_U32 extra_data, OMX_BOOL enable)
             control.value = V4L2_MPEG_VIDC_EXTRADATA_METADATA_MBI;
             break;
         default:
-            DEBUG_PRINT_ERROR("Unrecognized extradata index 0x%x", extra_data);
+            DEBUG_PRINT_ERROR("Unrecognized extradata index 0x%lx", extra_data);
             return false;
     }
 
     if (ioctl(m_nDriver_fd, VIDIOC_S_CTRL, &control)) {
-        DEBUG_PRINT_ERROR("ERROR: Request for setting extradata (%x) failed %d",
+        DEBUG_PRINT_ERROR("ERROR: Request for setting extradata (%lx) failed %d",
                 extra_data, errno);
         return false;
     }
@@ -2792,7 +2792,7 @@ bool venc_dev::venc_enable_initial_qp(QOMX_EXTNINDEX_VIDEO_INITIALQP* initqp)
                         controls.controls[3].id, controls.controls[3].value);
         return true;
     } else {
-        DEBUG_PRINT_ERROR("QP Values are out of valid range (1-51) I: %d, P: %d, B: %d",
+        DEBUG_PRINT_ERROR("QP Values are out of valid range (1-51) I: %lu, P: %lu, B: %lu",
                     initqp->nQpI, initqp->nQpP, initqp->nQpB);
         return false;
     }
@@ -2889,7 +2889,7 @@ bool venc_dev::venc_set_session_qp_range(OMX_U32 min_qp, OMX_U32 max_qp)
             return false;
         }
     } else {
-        DEBUG_PRINT_ERROR("Wrong qp values[%d %d], allowed range[%d %d]",
+        DEBUG_PRINT_ERROR("Wrong qp values[%lu %lu], allowed range[%lu %lu]",
             min_qp, max_qp, session_qp_range.minqp, session_qp_range.maxqp);
     }
 
@@ -4059,7 +4059,7 @@ bool venc_dev::venc_set_session_priority(OMX_U32 priority) {
         default:
             priority = 1;
             control.value = V4L2_MPEG_VIDC_VIDEO_PRIORITY_REALTIME_DISABLE;
-            DEBUG_PRINT_ERROR("Unsupported priority level %u", priority);
+            DEBUG_PRINT_ERROR("Unsupported priority level %lu", priority);
             break;
     }
 
@@ -4082,17 +4082,17 @@ bool venc_dev::venc_set_operatingrate(OMX_U32 rate) {
     control.id = V4L2_CID_MPEG_VIDC_VIDEO_OPERATING_RATE;
     control.value = rate;
 
-    DEBUG_PRINT_LOW("venc_set_operating_rate: %d fps", rate >> 16);
+    DEBUG_PRINT_LOW("venc_set_operating_rate: %lu fps", rate >> 16);
     DEBUG_PRINT_LOW("Calling IOCTL set control for id=%d, val=%d", control.id, control.value);
 
     if(ioctl(m_nDriver_fd, VIDIOC_S_CTRL, &control)) {
         hw_overload = errno == EBUSY;
-        DEBUG_PRINT_ERROR("Failed to set operating rate %d fps (%s)",
+        DEBUG_PRINT_ERROR("Failed to set operating rate %lu fps (%s)",
                 rate >> 16, hw_overload ? "HW overload" : strerror(errno));
         return false;
     }
     operating_rate = rate;
-    DEBUG_PRINT_LOW("Operating Rate Set = %d fps",  rate >> 16);
+    DEBUG_PRINT_LOW("Operating Rate Set = %lu fps",  rate >> 16);
     return true;
 }
 
-- 
2.17.1

