From 93c6eca66f1330bf08a3b76a620393cfe21521a1 Mon Sep 17 00:00:00 2001
From: Deevana Murthy Bandaru <dbandaru@codeaurora.org>
Date: Thu, 9 Aug 2018 12:26:52 +0530
Subject: [PATCH 13/14] power: qcom: powerHal for sdm439 and sdm429

Power hal changes for camera encode

Change-Id: Ib909844aea854ebffe8a00d83af9ca2d81c4f827
---
 power-8952.c   | 105 +++++++++++++++++++++++++++++++++++++++++++++----
 power-common.h |   3 +-
 2 files changed, 99 insertions(+), 9 deletions(-)

diff --git a/power-8952.c b/power-8952.c
index 51d23eb..a413d20 100644
--- a/power-8952.c
+++ b/power-8952.c
@@ -38,6 +38,7 @@
 #include <dlfcn.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <pthread.h>
 
 #define LOG_TAG "QCOM PowerHAL"
 #include <log/log.h>
@@ -50,8 +51,11 @@
 #include "performance.h"
 #include "power-common.h"
 
-static int video_encode_hint_sent;
+#define MIN_VAL(X,Y) ((X>Y)?(Y):(X))
 
+static int video_encode_hint_sent;
+pthread_mutex_t camera_hint_mutex = PTHREAD_MUTEX_INITIALIZER;
+static int camera_hint_ref_count;
 static int display_fd;
 #define SYS_DISPLAY_PWR "/sys/kernel/hbtp/display_pwr"
 
@@ -135,9 +139,32 @@ static int set_power_profile(void *data)
     return ret;
 }
 
+static bool is_target_SDM439() /* Returns value=1 if target is Hathi else value 0 */
+{
+    int fd;
+    bool is_target_SDM439 = false;
+    char buf[10] = {0};
+    fd = open("/sys/devices/soc0/soc_id", O_RDONLY);
+    if (fd >= 0) {
+        if (read(fd, buf, sizeof(buf) - 1) == -1) {
+            ALOGW("Unable to read soc_id");
+            is_target_SDM439 = false;
+        } else {
+            int soc_id = atoi(buf);
+            if (soc_id == 353 || soc_id == 363 || soc_id == 354 || soc_id == 364) {
+                is_target_SDM439 = true; /* Above SOCID for SDM439/429 */
+            }
+        }
+    }
+    close(fd);
+    return is_target_SDM439;
+}
+
 static void process_video_encode_hint(void *metadata)
 {
-    char governor[80];
+    char governor[80] = {0};
+    int resource_values[20] = {0};
+    int num_resources = 0;
     struct video_encode_metadata_t video_encode_metadata;
 
     if (get_scaling_governor_check_cores(governor, sizeof(governor), CPU0) == -1) {
@@ -167,8 +194,57 @@ static void process_video_encode_hint(void *metadata)
     }
 
     if (video_encode_metadata.state == 1) {
-        if (is_interactive_governor(governor)) {
-            int resource_values[] = {
+        if((strncmp(governor, SCHEDUTIL_GOVERNOR,
+            strlen(SCHEDUTIL_GOVERNOR)) == 0) &&
+            (strlen(governor) == strlen(SCHEDUTIL_GOVERNOR))) {
+            if(is_target_SDM439()) {
+                /* sample_ms = 10mS
+                * SLB for Core0 = -6
+                * SLB for Core1 = -6
+                * SLB for Core2 = -6
+                * SLB for Core3 = -6
+                * hispeed load = 95
+                * hispeed freq = 998Mhz */
+                int res[] = {0x41820000, 0xa,
+                             0x40c68100, 0xfffffffa,
+                             0x40c68110, 0xfffffffa,
+                             0x40c68120, 0xfffffffa,
+                             0x40c68130, 0xfffffffa,
+                             0x41440100, 0x5f,
+                             0x4143c100, 0x3e6,
+                             };
+                memcpy(resource_values, res, MIN_VAL(sizeof(resource_values), sizeof(res)));
+                num_resources = sizeof(res)/sizeof(res[0]);
+                pthread_mutex_lock(&camera_hint_mutex);
+                camera_hint_ref_count++;
+                if (camera_hint_ref_count == 1) {
+                    if (!video_encode_hint_sent) {
+                        perform_hint_action(video_encode_metadata.hint_id,
+                        resource_values, num_resources);
+                        video_encode_hint_sent = 1;
+                    }
+                }
+                pthread_mutex_unlock(&camera_hint_mutex);
+            }
+            else {
+                /* sample_ms = 10mS */
+                int res[] = {0x41820000, 0xa,
+                            };
+                memcpy(resource_values, res, MIN_VAL(sizeof(resource_values), sizeof(res)));
+                num_resources = sizeof(res)/sizeof(res[0]);
+                pthread_mutex_lock(&camera_hint_mutex);
+                camera_hint_ref_count++;
+                if (camera_hint_ref_count == 1) {
+                    if (!video_encode_hint_sent) {
+                        perform_hint_action(video_encode_metadata.hint_id,
+                        resource_values, num_resources);
+                        video_encode_hint_sent = 1;
+                    }
+                }
+                pthread_mutex_unlock(&camera_hint_mutex);
+            }
+        } else if (is_interactive_governor(governor)) {
+            int res[] = {
                 INT_OP_CLUSTER0_USE_SCHED_LOAD, 0x1,
                 INT_OP_CLUSTER1_USE_SCHED_LOAD, 0x1,
                 INT_OP_CLUSTER0_USE_MIGRATION_NOTIF, 0x1,
@@ -176,16 +252,29 @@ static void process_video_encode_hint(void *metadata)
                 INT_OP_CLUSTER0_TIMER_RATE, BIG_LITTLE_TR_MS_40,
                 INT_OP_CLUSTER1_TIMER_RATE, BIG_LITTLE_TR_MS_40
             };
+            memcpy(resource_values, res, MIN_VAL(sizeof(resource_values), sizeof(res)));
+            num_resources = sizeof(res)/sizeof(res[0]);
+            pthread_mutex_lock(&camera_hint_mutex);
+            camera_hint_ref_count++;
             if (!video_encode_hint_sent) {
                 perform_hint_action(video_encode_metadata.hint_id,
-                        resource_values, ARRAY_SIZE(resource_values));
+                        resource_values, num_resources);
                 video_encode_hint_sent = 1;
             }
+            pthread_mutex_unlock(&camera_hint_mutex);
         }
     } else if (video_encode_metadata.state == 0) {
-        if (is_interactive_governor(governor)) {
-            undo_hint_action(video_encode_metadata.hint_id);
-            video_encode_hint_sent = 0;
+        if (is_interactive_governor(governor) ||
+            ((strncmp(governor, SCHEDUTIL_GOVERNOR,
+            strlen(SCHEDUTIL_GOVERNOR)) == 0) &&
+            (strlen(governor) == strlen(SCHEDUTIL_GOVERNOR)))) {
+            pthread_mutex_lock(&camera_hint_mutex);
+            camera_hint_ref_count--;
+            if (!camera_hint_ref_count) {
+                undo_hint_action(video_encode_metadata.hint_id);
+                video_encode_hint_sent = 0;
+            }
+            pthread_mutex_unlock(&camera_hint_mutex);
         }
     }
 }
diff --git a/power-common.h b/power-common.h
index ab2e80a..4c63a1a 100644
--- a/power-common.h
+++ b/power-common.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013, 2018 The Linux Foundation. All rights reserved.
  * Copyright (C) 2018 The LineageOS Project
  *
  * Redistribution and use in source and binary forms, with or without
@@ -36,6 +36,7 @@
 #define SCALING_MIN_FREQ "/sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq"
 #define ONDEMAND_GOVERNOR "ondemand"
 #define INTERACTIVE_GOVERNOR "interactive"
+#define SCHEDUTIL_GOVERNOR "schedutil"
 
 #define HINT_HANDLED (0)
 #define HINT_NONE (-1)
-- 
2.17.1

