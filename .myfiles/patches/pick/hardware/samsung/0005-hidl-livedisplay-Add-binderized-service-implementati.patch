From 734e71ce0c50e7b2ff7591f83c18da2b2f30abef Mon Sep 17 00:00:00 2001
From: Jan Altensen <info@stricted.net>
Date: Sun, 20 Jan 2019 02:40:07 +0100
Subject: [PATCH 5/6] hidl: livedisplay: Add binderized service implementation

* Change default ::implementation namespace to ::samsung
* Fill in required methods for used impls
* Cleanup passthrough code for used impls
* Remove unused impls
* Add and setup binderized service
* Remove lineagehw impls

Change-Id: I545a7c0ac8bf4fce04da73a0d39d4ac1938496f2
---
 .../hidl/livedisplay/AdaptiveBacklight.cpp    |  31 +--
 .../hidl/livedisplay/AdaptiveBacklight.h      |  12 +-
 lineagehw/hidl/livedisplay/Android.bp         |  25 +--
 lineagehw/hidl/livedisplay/AutoContrast.cpp   |  47 -----
 .../hidl/livedisplay/ColorEnhancement.cpp     |  47 -----
 .../livedisplay/DisplayColorCalibration.cpp   |  49 +++--
 .../livedisplay/DisplayColorCalibration.h     |  14 +-
 .../DisplayColorCalibrationExynos.cpp         |  70 +++++++
 ...ance.h => DisplayColorCalibrationExynos.h} |  29 +--
 lineagehw/hidl/livedisplay/DisplayModes.cpp   | 106 ++++++++--
 lineagehw/hidl/livedisplay/DisplayModes.h     |  23 +-
 .../hidl/livedisplay/PictureAdjustment.cpp    |  77 -------
 .../hidl/livedisplay/PictureAdjustment.h      |  62 ------
 .../hidl/livedisplay/ReadingEnhancement.cpp   |  34 ++-
 .../hidl/livedisplay/ReadingEnhancement.h     |  14 +-
 ...lance.cpp => ReadingEnhancementExynos.cpp} |  43 ++--
 ...hancement.h => ReadingEnhancementExynos.h} |  24 +--
 .../hidl/livedisplay/SunlightEnhancement.cpp  |  46 ++--
 .../hidl/livedisplay/SunlightEnhancement.h    |  12 +-
 .../livedisplay/SunlightEnhancementExynos.cpp |  59 ++++++
 ...Contrast.h => SunlightEnhancementExynos.h} |  22 +-
 lineagehw/hidl/livedisplay/service.cpp        | 198 ++++++++++++++++++
 ...lineage.livedisplay@2.0-service.samsung.rc |   4 +
 .../lineageos/hardware/AdaptiveBacklight.java |  59 ------
 .../hardware/DisplayModeControl.java          | 142 -------------
 .../hardware/SunlightEnhancement.java         |  86 --------
 26 files changed, 643 insertions(+), 692 deletions(-)
 delete mode 100644 lineagehw/hidl/livedisplay/AutoContrast.cpp
 delete mode 100644 lineagehw/hidl/livedisplay/ColorEnhancement.cpp
 create mode 100644 lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.cpp
 rename lineagehw/hidl/livedisplay/{ColorBalance.h => DisplayColorCalibrationExynos.h} (60%)
 delete mode 100644 lineagehw/hidl/livedisplay/PictureAdjustment.cpp
 delete mode 100644 lineagehw/hidl/livedisplay/PictureAdjustment.h
 rename lineagehw/hidl/livedisplay/{ColorBalance.cpp => ReadingEnhancementExynos.cpp} (50%)
 rename lineagehw/hidl/livedisplay/{ColorEnhancement.h => ReadingEnhancementExynos.h} (65%)
 create mode 100644 lineagehw/hidl/livedisplay/SunlightEnhancementExynos.cpp
 rename lineagehw/hidl/livedisplay/{AutoContrast.h => SunlightEnhancementExynos.h} (69%)
 create mode 100644 lineagehw/hidl/livedisplay/service.cpp
 create mode 100644 lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
 delete mode 100644 lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
 delete mode 100644 lineagehw/src/org/lineageos/hardware/DisplayModeControl.java
 delete mode 100644 lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java

diff --git a/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp b/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
index 755f7f2..bccd387 100644
--- a/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
+++ b/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
@@ -14,33 +14,38 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "AdaptiveBacklight.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
+
+bool AdaptiveBacklight::isSupported() {
+    std::ofstream file("/sys/class/lcd/panel/power_reduce");
+    return file.good();
+}
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
 Return<bool> AdaptiveBacklight::isEnabled() {
-    // TODO implement
-    return bool {};
+    std::ifstream file("/sys/class/lcd/panel/power_reduce");
+    int value;
+
+    file >> value;
+
+    return !file.fail() && value == 1;
 }
 
 Return<bool> AdaptiveBacklight::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
+    std::ofstream file("/sys/class/lcd/panel/power_reduce");
+    file << (enabled ? "1" : "0");
+    return true;
 }
 
-
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* /* name */) {
-    //return new AdaptiveBacklight();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/AdaptiveBacklight.h b/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
index c0e0c4e..35502ba 100644
--- a/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
+++ b/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,7 +35,10 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct AdaptiveBacklight : public IAdaptiveBacklight {
+class AdaptiveBacklight : public IAdaptiveBacklight {
+  public:
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
     Return<bool> isEnabled() override;
     Return<bool> setEnabled(bool enabled) override;
@@ -44,10 +47,7 @@ struct AdaptiveBacklight : public IAdaptiveBacklight {
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/Android.bp b/lineagehw/hidl/livedisplay/Android.bp
index 276c386..8de096d 100644
--- a/lineagehw/hidl/livedisplay/Android.bp
+++ b/lineagehw/hidl/livedisplay/Android.bp
@@ -12,33 +12,28 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-cc_library_shared {
-    // FIXME: this should only be -impl for a passthrough hal.
-    // In most cases, to convert this to a binderized implementation, you should:
-    // - change '-impl' to '-service' here and make it a cc_binary instead of a
-    //   cc_library_shared.
-    // - add a *.rc file for this module.
-    // - delete HIDL_FETCH_I* functions.
-    // - call configureRpcThreadpool and registerAsService on the instance.
-    // You may also want to append '-impl/-service' with a specific identifier like
-    // '-vendor' or '-<hardware identifier>' etc to distinguish it.
-    name: "vendor.lineage.livedisplay@2.0-impl",
+cc_binary {
+    name: "vendor.lineage.livedisplay@2.0-service.samsung",
+    init_rc: ["vendor.lineage.livedisplay@2.0-service.samsung.rc"],
+    defaults: ["hidl_defaults"],
     relative_install_path: "hw",
     // FIXME: this should be 'vendor: true' for modules that will eventually be
     // on AOSP.
     proprietary: true,
     srcs: [
         "AdaptiveBacklight.cpp",
-        "AutoContrast.cpp",
-        "ColorBalance.cpp",
-        "ColorEnhancement.cpp",
         "DisplayColorCalibration.cpp",
+        "DisplayColorCalibrationExynos.cpp",
         "DisplayModes.cpp",
-        "PictureAdjustment.cpp",
         "ReadingEnhancement.cpp",
+        "ReadingEnhancementExynos.cpp",
         "SunlightEnhancement.cpp",
+        "SunlightEnhancementExynos.cpp",
+        "service.cpp",
     ],
     shared_libs: [
+        "libbase",
+        "libbinder",
         "libhidlbase",
         "libhidltransport",
         "libutils",
diff --git a/lineagehw/hidl/livedisplay/AutoContrast.cpp b/lineagehw/hidl/livedisplay/AutoContrast.cpp
deleted file mode 100644
index af16fc7..0000000
--- a/lineagehw/hidl/livedisplay/AutoContrast.cpp
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (C) 2019 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "AutoContrast.h"
-
-namespace vendor {
-namespace lineage {
-namespace livedisplay {
-namespace V2_0 {
-namespace implementation {
-
-// Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
-Return<bool> AutoContrast::isEnabled() {
-    // TODO implement
-    return bool {};
-}
-
-Return<bool> AutoContrast::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
-}
-
-
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IAutoContrast* HIDL_FETCH_IAutoContrast(const char* /* name */) {
-    //return new AutoContrast();
-//}
-//
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace livedisplay
-}  // namespace lineage
-}  // namespace vendor
diff --git a/lineagehw/hidl/livedisplay/ColorEnhancement.cpp b/lineagehw/hidl/livedisplay/ColorEnhancement.cpp
deleted file mode 100644
index e87961d..0000000
--- a/lineagehw/hidl/livedisplay/ColorEnhancement.cpp
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (C) 2019 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "ColorEnhancement.h"
-
-namespace vendor {
-namespace lineage {
-namespace livedisplay {
-namespace V2_0 {
-namespace implementation {
-
-// Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
-Return<bool> ColorEnhancement::isEnabled() {
-    // TODO implement
-    return bool {};
-}
-
-Return<bool> ColorEnhancement::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
-}
-
-
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* /* name */) {
-    //return new ColorEnhancement();
-//}
-//
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace livedisplay
-}  // namespace lineage
-}  // namespace vendor
diff --git a/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp b/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
index e471f3e..9ecace6 100644
--- a/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
@@ -14,43 +14,56 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "DisplayColorCalibration.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
+
+static constexpr const char *kColorPath = "/sys/class/graphics/fb0/rgb";
+
+bool DisplayColorCalibration::isSupported() {
+    std::ofstream file(kColorPath);
+    return file.good();
+}
 
-// Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
 Return<int32_t> DisplayColorCalibration::getMaxValue() {
-    // TODO implement
-    return int32_t {};
+    return 32768;
 }
 
 Return<int32_t> DisplayColorCalibration::getMinValue() {
-    // TODO implement
-    return int32_t {};
+    return 255;
 }
 
-Return<void> DisplayColorCalibration::getCalibration(getCalibration_cb _hidl_cb) {
-    // TODO implement
+Return<void> DisplayColorCalibration::getCalibration(getCalibration_cb resultCb) {
+    std::ifstream file(kColorPath);
+    int r, g, b;
+
+    file >> r >> g >> b;
+    if (file.fail()) {
+        resultCb(std::vector<int32_t>());
+    } else {
+        resultCb(std::vector<int32_t>({ r, g, b }));
+    }
+
     return Void();
 }
 
 Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>& rgb) {
-    // TODO implement
-    return bool {};
-}
+    std::ofstream file(kColorPath);
+    if (rgb.size() != 3) {
+        return false;
+    }
 
+    file << rgb[0] << " " << rgb[1] << " "  << rgb[2];
+    return !file.fail();
+}
 
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* /* name */) {
-    //return new DisplayColorCalibration();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayColorCalibration.h b/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
index f4df651..131444d 100644
--- a/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,21 +35,21 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct DisplayColorCalibration : public IDisplayColorCalibration {
+class DisplayColorCalibration : public IDisplayColorCalibration {
+  public:
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
     Return<int32_t> getMaxValue() override;
     Return<int32_t> getMinValue() override;
-    Return<void> getCalibration(getCalibration_cb _hidl_cb) override;
+    Return<void> getCalibration(getCalibration_cb resultCb) override;
     Return<bool> setCalibration(const hidl_vec<int32_t>& rgb) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.cpp b/lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.cpp
new file mode 100644
index 0000000..1958ecc
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.cpp
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <fstream>
+
+#include "DisplayColorCalibrationExynos.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace samsung {
+
+static constexpr const char *kColorPath = "/sys/class/mdnie/mdnie/sensorRGB";
+
+bool DisplayColorCalibrationExynos::isSupported() {
+    std::ofstream file(kColorPath);
+    return file.good();
+}
+
+Return<int32_t> DisplayColorCalibrationExynos::getMaxValue() {
+    return 255;
+}
+
+Return<int32_t> DisplayColorCalibrationExynos::getMinValue() {
+    return 1;
+}
+
+Return<void> DisplayColorCalibrationExynos::getCalibration(getCalibration_cb resultCb) {
+    std::ifstream file(kColorPath);
+    int r, g, b;
+
+    file >> r >> g >> b;
+    if (file.fail()) {
+        resultCb(std::vector<int32_t>());
+    } else {
+        resultCb(std::vector<int32_t>({ r, g, b }));
+    }
+
+    return Void();
+}
+
+Return<bool> DisplayColorCalibrationExynos::setCalibration(const hidl_vec<int32_t>& rgb) {
+    std::ofstream file(kColorPath);
+    if (rgb.size() != 3) {
+        return false;
+    }
+
+    file << rgb[0] << " " << rgb[1] << " "  << rgb[2];
+    return !file.fail();
+}
+
+}  // namespace samsung
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/lineagehw/hidl/livedisplay/ColorBalance.h b/lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.h
similarity index 60%
rename from lineagehw/hidl/livedisplay/ColorBalance.h
rename to lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.h
index b760c7c..c00e577 100644
--- a/lineagehw/hidl/livedisplay/ColorBalance.h
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibrationExynos.h
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
-#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATIONEXYNOS_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATIONEXYNOS_H
 
-#include <vendor/lineage/livedisplay/2.0/IColorBalance.h>
+#include <vendor/lineage/livedisplay/2.0/IDisplayColorCalibration.h>
 #include <hidl/MQDescriptor.h>
 #include <hidl/Status.h>
 
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,23 +35,24 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct ColorBalance : public IColorBalance {
-    // Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
-    Return<void> getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) override;
-    Return<int32_t> getColorBalance() override;
-    Return<bool> setColorBalance(int32_t value) override;
+class DisplayColorCalibrationExynos : public IDisplayColorCalibration {
+  public:
+    bool isSupported();
+
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
+    Return<int32_t> getMaxValue() override;
+    Return<int32_t> getMinValue() override;
+    Return<void> getCalibration(getCalibration_cb resultCb) override;
+    Return<bool> setCalibration(const hidl_vec<int32_t>& rgb) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IColorBalance* HIDL_FETCH_IColorBalance(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
 }  // namespace vendor
 
-#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATIONEXYNOS_H
diff --git a/lineagehw/hidl/livedisplay/DisplayModes.cpp b/lineagehw/hidl/livedisplay/DisplayModes.cpp
index 6fcf88d..0202be6 100644
--- a/lineagehw/hidl/livedisplay/DisplayModes.cpp
+++ b/lineagehw/hidl/livedisplay/DisplayModes.cpp
@@ -14,43 +14,121 @@
  * limitations under the License.
  */
 
+#define LOG_TAG "DisplayModesService"
+
 #include "DisplayModes.h"
+#include <android-base/logging.h>
+#include <fstream>
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
+
+
+static constexpr const char* kModePath = "/sys/class/mdnie/mdnie/mode";
+static constexpr const char* kModeMaxPath = "/sys/class/mdnie/mdnie/mode_max";
+static constexpr const char* kDefaultPath = "/data/misc/.displaymodedefault";
+
+const std::map<int32_t, std::string> DisplayModes::kModeMap = {
+    {0, "Dynamic"},
+    {1, "Standard"},
+    {2, "Natural"},
+    {3, "Cinema"},
+    {4, "Adaptive"},
+    {5, "Reading"},
+};
+
+DisplayModes::DisplayModes() : mDefaultModeId(0) {
+    std::ifstream defaultFile(kDefaultPath);
+    int value;
+
+    defaultFile >> value;
+    LOG(DEBUG) << "Default file read result " << value << " fail " << defaultFile.fail();
+    if (defaultFile.fail()) {
+        return;
+    }
+
+    for (const auto& entry : kModeMap) {
+        if (value == entry.first) {
+            mDefaultModeId = entry.first;
+            break;
+        }
+    }
+}
+
+bool DisplayModes::isSupported() {
+    std::ofstream modeFile(kModePath);
+    return modeFile.good();
+}
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
-Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb _hidl_cb) {
-    // TODO implement
+Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb resultCb) {
+    std::ifstream maxModeFile(kModeMaxPath);
+    int value;
+    std::vector<DisplayMode> modes;
+    if (!maxModeFile.fail()) {
+        maxModeFile >> value;
+    } else {
+        value = kModeMap.size();
+    }
+    for (const auto& entry : kModeMap) {
+        if (entry.first < value)
+            modes.push_back({entry.first, entry.second});
+    }
+    resultCb(modes);
     return Void();
 }
 
-Return<void> DisplayModes::getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) {
-    // TODO implement
+Return<void> DisplayModes::getCurrentDisplayMode(getCurrentDisplayMode_cb resultCb) {
+    int32_t currentModeId = mDefaultModeId;
+    std::ifstream modeFile(kModePath);
+    int value;
+    modeFile >> value;
+    if (!modeFile.fail()) {
+        for (const auto& entry : kModeMap) {
+            if (value == entry.first) {
+                currentModeId = entry.first;
+                break;
+            }
+        }
+    }
+    resultCb({currentModeId, kModeMap.at(currentModeId)});
     return Void();
 }
 
-Return<void> DisplayModes::getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) {
-    // TODO implement
+Return<void> DisplayModes::getDefaultDisplayMode(getDefaultDisplayMode_cb resultCb) {
+    resultCb({mDefaultModeId, kModeMap.at(mDefaultModeId)});
     return Void();
 }
 
 Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
-    // TODO implement
-    return bool {};
+    const auto iter = kModeMap.find(modeID);
+    if (iter == kModeMap.end()) {
+        return false;
+    }
+    std::ofstream modeFile(kModePath);
+    modeFile << iter->first;
+    if (modeFile.fail()) {
+        return false;
+    }
+
+    if (makeDefault) {
+        std::ofstream defaultFile(kDefaultPath);
+        defaultFile << iter->first;
+        if (defaultFile.fail()) {
+            return false;
+        }
+        mDefaultModeId = iter->first;
+    }
+    return true;
 }
 
 
 // Methods from ::android::hidl::base::V1_0::IBase follow.
 
-//IDisplayModes* HIDL_FETCH_IDisplayModes(const char* /* name */) {
-    //return new DisplayModes();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayModes.h b/lineagehw/hidl/livedisplay/DisplayModes.h
index 90f0cb3..ef539fc 100644
--- a/lineagehw/hidl/livedisplay/DisplayModes.h
+++ b/lineagehw/hidl/livedisplay/DisplayModes.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,21 +35,24 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct DisplayModes : public IDisplayModes {
+class DisplayModes : public IDisplayModes {
+  public:
+    DisplayModes();
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
-    Return<void> getDisplayModes(getDisplayModes_cb _hidl_cb) override;
-    Return<void> getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) override;
-    Return<void> getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) override;
+    Return<void> getDisplayModes(getDisplayModes_cb resultCb) override;
+    Return<void> getCurrentDisplayMode(getCurrentDisplayMode_cb resultCb) override;
+    Return<void> getDefaultDisplayMode(getDefaultDisplayMode_cb resultCb) override;
     Return<bool> setDisplayMode(int32_t modeID, bool makeDefault) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
-
+  private:
+    static const std::map<int32_t, std::string> kModeMap;
+    int32_t mDefaultModeId;
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IDisplayModes* HIDL_FETCH_IDisplayModes(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/PictureAdjustment.cpp b/lineagehw/hidl/livedisplay/PictureAdjustment.cpp
deleted file mode 100644
index bedec52..0000000
--- a/lineagehw/hidl/livedisplay/PictureAdjustment.cpp
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (C) 2019 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include "PictureAdjustment.h"
-
-namespace vendor {
-namespace lineage {
-namespace livedisplay {
-namespace V2_0 {
-namespace implementation {
-
-// Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
-Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<void> PictureAdjustment::getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) {
-    // TODO implement
-    return Void();
-}
-
-Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) {
-    // TODO implement
-    return bool {};
-}
-
-
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* /* name */) {
-    //return new PictureAdjustment();
-//}
-//
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace livedisplay
-}  // namespace lineage
-}  // namespace vendor
diff --git a/lineagehw/hidl/livedisplay/PictureAdjustment.h b/lineagehw/hidl/livedisplay/PictureAdjustment.h
deleted file mode 100644
index 17bfe66..0000000
--- a/lineagehw/hidl/livedisplay/PictureAdjustment.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2019 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
-#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
-
-#include <vendor/lineage/livedisplay/2.0/IPictureAdjustment.h>
-#include <hidl/MQDescriptor.h>
-#include <hidl/Status.h>
-
-namespace vendor {
-namespace lineage {
-namespace livedisplay {
-namespace V2_0 {
-namespace implementation {
-
-using ::android::hardware::hidl_array;
-using ::android::hardware::hidl_memory;
-using ::android::hardware::hidl_string;
-using ::android::hardware::hidl_vec;
-using ::android::hardware::Return;
-using ::android::hardware::Void;
-using ::android::sp;
-
-struct PictureAdjustment : public IPictureAdjustment {
-    // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
-    Return<void> getHueRange(getHueRange_cb _hidl_cb) override;
-    Return<void> getSaturationRange(getSaturationRange_cb _hidl_cb) override;
-    Return<void> getIntensityRange(getIntensityRange_cb _hidl_cb) override;
-    Return<void> getContrastRange(getContrastRange_cb _hidl_cb) override;
-    Return<void> getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) override;
-    Return<void> getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) override;
-    Return<void> getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) override;
-    Return<bool> setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) override;
-
-    // Methods from ::android::hidl::base::V1_0::IBase follow.
-
-};
-
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* name);
-
-}  // namespace implementation
-}  // namespace V2_0
-}  // namespace livedisplay
-}  // namespace lineage
-}  // namespace vendor
-
-#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
diff --git a/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp b/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
index ea27c90..a811075 100644
--- a/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
@@ -14,33 +14,47 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "ReadingEnhancement.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+bool ReadingEnhancement::isSupported() {
+    std::ofstream file("/sys/devices/virtual/mdnie/mdnie/accessibility");
+    return file.good();
+}
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
 Return<bool> ReadingEnhancement::isEnabled() {
-    // TODO implement
-    return bool {};
+    std::ifstream file("/sys/devices/virtual/mdnie/mdnie/accessibility");
+    std::string line;
+
+    if (file.is_open()) {
+        file >> line;
+    }
+
+    return !line.compare("Current accessibility : DSI0 : GRAYSCALE ");
 }
 
 Return<bool> ReadingEnhancement::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
+    std::ofstream file("/sys/devices/virtual/mdnie/mdnie/accessibility");
+    if (file.is_open()) {
+        file << (enabled ? "4" : "0");
+    }
+
+    return true;
 }
 
 
 // Methods from ::android::hidl::base::V1_0::IBase follow.
 
-//IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* /* name */) {
-    //return new ReadingEnhancement();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ReadingEnhancement.h b/lineagehw/hidl/livedisplay/ReadingEnhancement.h
index 20e909a..6fa7084 100644
--- a/lineagehw/hidl/livedisplay/ReadingEnhancement.h
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,19 +35,19 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct ReadingEnhancement : public IReadingEnhancement {
+class ReadingEnhancement : public IReadingEnhancement {
+  public:
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
     Return<bool> isEnabled() override;
-    Return<bool> setEnabled(bool enabled) override;
+    Return<bool> setEnabled(bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorBalance.cpp b/lineagehw/hidl/livedisplay/ReadingEnhancementExynos.cpp
similarity index 50%
rename from lineagehw/hidl/livedisplay/ColorBalance.cpp
rename to lineagehw/hidl/livedisplay/ReadingEnhancementExynos.cpp
index f636990..a51672e 100644
--- a/lineagehw/hidl/livedisplay/ColorBalance.cpp
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancementExynos.cpp
@@ -14,38 +14,47 @@
  * limitations under the License.
  */
 
-#include "ColorBalance.h"
+#include <fstream>
+
+#include "ReadingEnhancementExynos.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
-// Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
-Return<void> ColorBalance::getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) {
-    // TODO implement
-    return Void();
+// Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+bool ReadingEnhancementExynos::isSupported() {
+    std::ofstream file("/sys/class/mdnie/mdnie/accessibility");
+    return file.good();
 }
 
-Return<int32_t> ColorBalance::getColorBalance() {
-    // TODO implement
-    return int32_t {};
+// Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
+Return<bool> ReadingEnhancementExynos::isEnabled() {
+    std::ifstream file("/sys/class/mdnie/mdnie/accessibility");
+    int status;
+
+    if (file.is_open()) {
+        file >> status;
+    }
+
+    return file.good() && status == 4;
 }
 
-Return<bool> ColorBalance::setColorBalance(int32_t value) {
-    // TODO implement
-    return bool {};
+Return<bool> ReadingEnhancementExynos::setEnabled(bool enabled) {
+    std::ofstream file("/sys/class/mdnie/mdnie/accessibility");
+    if (file.is_open()) {
+        file << (enabled ? "4" : "0");
+    }
+
+    return true;
 }
 
 
 // Methods from ::android::hidl::base::V1_0::IBase follow.
 
-//IColorBalance* HIDL_FETCH_IColorBalance(const char* /* name */) {
-    //return new ColorBalance();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorEnhancement.h b/lineagehw/hidl/livedisplay/ReadingEnhancementExynos.h
similarity index 65%
rename from lineagehw/hidl/livedisplay/ColorEnhancement.h
rename to lineagehw/hidl/livedisplay/ReadingEnhancementExynos.h
index 925cdfc..8791ecd 100644
--- a/lineagehw/hidl/livedisplay/ColorEnhancement.h
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancementExynos.h
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
-#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENTEXYNOS_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENTEXYNOS_H
 
-#include <vendor/lineage/livedisplay/2.0/IColorEnhancement.h>
+#include <vendor/lineage/livedisplay/2.0/IReadingEnhancement.h>
 #include <hidl/MQDescriptor.h>
 #include <hidl/Status.h>
 
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,22 +35,22 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct ColorEnhancement : public IColorEnhancement {
-    // Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
+class ReadingEnhancementExynos : public IReadingEnhancement {
+  public:
+    bool isSupported();
+
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
     Return<bool> isEnabled() override;
-    Return<bool> setEnabled(bool enabled) override;
+    Return<bool> setEnabled(bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
 }  // namespace vendor
 
-#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENTEXYNOS_H
diff --git a/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp b/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
index 8a3c329..851b8e3 100644
--- a/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
@@ -14,33 +14,55 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "SunlightEnhancement.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+bool SunlightEnhancement::isSupported() {
+    std::ofstream fileSRE("/sys/class/mdnie/mdnie/outdoor");
+    std::ofstream fileHBM("/sys/class/lcd/panel/panel/auto_brightness");
+    return fileSRE.good() || fileHBM.good();
+}
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
 Return<bool> SunlightEnhancement::isEnabled() {
-    // TODO implement
-    return bool {};
+    std::ifstream fileSRE("/sys/class/mdnie/mdnie/outdoor");
+    std::ifstream fileHBM("/sys/class/lcd/panel/panel/auto_brightness");
+    int statusSRE = -1;
+    int statusHBM = -1;
+
+    if (fileSRE.is_open()) {
+        fileSRE >> statusSRE;
+    }
+    if (fileHBM.is_open()) {
+        fileHBM >> statusHBM;
+    }
+
+    return (fileSRE.good() || fileHBM.good()) && ((statusSRE == 1 && statusHBM == 6) || statusSRE == 1);
 }
 
 Return<bool> SunlightEnhancement::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
-}
+    std::ofstream fileSRE("/sys/class/mdnie/mdnie/outdoor");
+    std::ofstream fileHBM("/sys/class/lcd/panel/panel/auto_brightness");
 
+    if (fileSRE.is_open()) {
+        fileSRE << (enabled ? "1" : "0");
+    }
+    if (fileHBM.is_open()) {
+        fileHBM << (enabled ? "6" : "0");
+    }
 
-// Methods from ::android::hidl::base::V1_0::IBase follow.
+    return true;
+}
 
-//ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* /* name */) {
-    //return new SunlightEnhancement();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/SunlightEnhancement.h b/lineagehw/hidl/livedisplay/SunlightEnhancement.h
index 7571831..eb70f8e 100644
--- a/lineagehw/hidl/livedisplay/SunlightEnhancement.h
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,7 +35,10 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct SunlightEnhancement : public ISunlightEnhancement {
+class SunlightEnhancement : public ISunlightEnhancement {
+  public:
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
     Return<bool> isEnabled() override;
     Return<bool> setEnabled(bool enabled) override;
@@ -44,10 +47,7 @@ struct SunlightEnhancement : public ISunlightEnhancement {
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/SunlightEnhancementExynos.cpp b/lineagehw/hidl/livedisplay/SunlightEnhancementExynos.cpp
new file mode 100644
index 0000000..8ff2ec4
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancementExynos.cpp
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <fstream>
+
+#include "SunlightEnhancementExynos.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace samsung {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+bool SunlightEnhancementExynos::isSupported() {
+    std::ofstream file("/sys/class/mdnie/mdnie/lux");
+    return file.good();
+}
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
+Return<bool> SunlightEnhancementExynos::isEnabled() {
+    std::ifstream file("/sys/class/mdnie/mdnie/lux");
+    int status = -1;
+
+    if (file.is_open()) {
+        file >> status;
+    }
+
+    return file.good() && status > 0;
+}
+
+Return<bool> SunlightEnhancementExynos::setEnabled(bool enabled) {
+    std::ofstream file("/sys/class/mdnie/mdnie/lux");
+    if (file.is_open()) {
+        /* see drivers/video/fbdev/exynos/decon_7880/panels/mdnie_lite_table*, get_hbm_index */
+        file << (enabled ? "40000" : "0");
+    }
+
+    return true;
+}
+
+}  // namespace samsung
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/lineagehw/hidl/livedisplay/AutoContrast.h b/lineagehw/hidl/livedisplay/SunlightEnhancementExynos.h
similarity index 69%
rename from lineagehw/hidl/livedisplay/AutoContrast.h
rename to lineagehw/hidl/livedisplay/SunlightEnhancementExynos.h
index 44a8be6..5bf9798 100644
--- a/lineagehw/hidl/livedisplay/AutoContrast.h
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancementExynos.h
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
-#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENTEXYNOS_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENTEXYNOS_H
 
-#include <vendor/lineage/livedisplay/2.0/IAutoContrast.h>
+#include <vendor/lineage/livedisplay/2.0/ISunlightEnhancement.h>
 #include <hidl/MQDescriptor.h>
 #include <hidl/Status.h>
 
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,8 +35,11 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct AutoContrast : public IAutoContrast {
-    // Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
+class SunlightEnhancementExynos : public ISunlightEnhancement {
+  public:
+    bool isSupported();
+
+    // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
     Return<bool> isEnabled() override;
     Return<bool> setEnabled(bool enabled) override;
 
@@ -44,13 +47,10 @@ struct AutoContrast : public IAutoContrast {
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IAutoContrast* HIDL_FETCH_IAutoContrast(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
 }  // namespace vendor
 
-#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENTEXYNOS_H
diff --git a/lineagehw/hidl/livedisplay/service.cpp b/lineagehw/hidl/livedisplay/service.cpp
new file mode 100644
index 0000000..5ba2646
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/service.cpp
@@ -0,0 +1,198 @@
+/*
+ * Copyright (C) 2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "vendor.lineage.livedisplay@2.0-service.samsung"
+
+#include <android-base/logging.h>
+#include <binder/ProcessState.h>
+#include <hidl/HidlTransportSupport.h>
+
+#include "AdaptiveBacklight.h"
+#include "DisplayColorCalibration.h"
+#include "DisplayColorCalibrationExynos.h"
+#include "DisplayModes.h"
+#include "ReadingEnhancement.h"
+#include "ReadingEnhancementExynos.h"
+#include "SunlightEnhancement.h"
+#include "SunlightEnhancementExynos.h"
+
+using android::hardware::configureRpcThreadpool;
+using android::hardware::joinRpcThreadpool;
+using android::sp;
+using android::status_t;
+using android::OK;
+
+using vendor::lineage::livedisplay::V2_0::samsung::AdaptiveBacklight;
+using vendor::lineage::livedisplay::V2_0::samsung::DisplayColorCalibration;
+using vendor::lineage::livedisplay::V2_0::samsung::DisplayColorCalibrationExynos;
+using vendor::lineage::livedisplay::V2_0::samsung::DisplayModes;
+using vendor::lineage::livedisplay::V2_0::samsung::ReadingEnhancement;
+using vendor::lineage::livedisplay::V2_0::samsung::ReadingEnhancementExynos;
+using vendor::lineage::livedisplay::V2_0::samsung::SunlightEnhancement;
+using vendor::lineage::livedisplay::V2_0::samsung::SunlightEnhancementExynos;
+
+int main() {
+    sp<AdaptiveBacklight> adaptiveBacklight;
+    sp<DisplayColorCalibration> displayColorCalibration;
+    sp<DisplayColorCalibrationExynos> displayColorCalibrationExynos;
+    sp<DisplayModes> displayModes;
+    sp<ReadingEnhancement> readingEnhancement;
+    sp<ReadingEnhancementExynos> readingEnhancementExynos;
+    sp<SunlightEnhancement> sunlightEnhancement;
+    sp<SunlightEnhancementExynos> sunlightEnhancementExynos;
+    status_t status;
+
+    LOG(INFO) << "LiveDisplay HAL service is starting.";
+
+    adaptiveBacklight = new AdaptiveBacklight();
+    if (adaptiveBacklight == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL AdaptiveBacklight Iface, exiting.";
+        goto shutdown;
+    }
+
+    displayColorCalibration = new DisplayColorCalibration();
+    if (displayColorCalibration == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL DisplayColorCalibration Iface, exiting.";
+        goto shutdown;
+    }
+
+    displayColorCalibrationExynos = new DisplayColorCalibrationExynos();
+    if (displayColorCalibrationExynos == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL DisplayColorCalibration Iface, exiting.";
+        goto shutdown;
+    }
+
+    displayModes = new DisplayModes();
+    if (displayModes == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL DisplayModes Iface, exiting.";
+        goto shutdown;
+    }
+
+    readingEnhancement = new ReadingEnhancement();
+    if (readingEnhancement == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL ReadingEnhancement Iface, exiting.";
+        goto shutdown;
+    }
+
+    readingEnhancementExynos = new ReadingEnhancementExynos();
+    if (readingEnhancementExynos == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL ReadingEnhancement Iface, exiting.";
+        goto shutdown;
+    }
+
+    sunlightEnhancement = new SunlightEnhancement();
+    if (sunlightEnhancement == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL SunlightEnhancement Iface, exiting.";
+        goto shutdown;
+    }
+
+    sunlightEnhancementExynos = new SunlightEnhancementExynos();
+    if (sunlightEnhancementExynos == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL SunlightEnhancement Iface, exiting.";
+        goto shutdown;
+    }
+
+    configureRpcThreadpool(1, true /*callerWillJoin*/);
+
+    if (adaptiveBacklight->isSupported()) {
+        status = adaptiveBacklight->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL AdaptiveBacklight Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (displayColorCalibration->isSupported()) {
+        status = displayColorCalibration->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL DisplayColorCalibration Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (displayColorCalibrationExynos->isSupported()) {
+        status = displayColorCalibrationExynos->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL DisplayColorCalibration Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (displayModes->isSupported()) {
+        status = displayModes->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL DisplayModes Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (readingEnhancement->isSupported()) {
+        status = readingEnhancement->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL ReadingEnhancement Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (readingEnhancementExynos->isSupported()) {
+        status = readingEnhancementExynos->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL ReadingEnhancement Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (sunlightEnhancement->isSupported()) {
+        status = sunlightEnhancement->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL SunlightEnhancement Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (sunlightEnhancementExynos->isSupported()) {
+        status = sunlightEnhancementExynos->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL SunlightEnhancement Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    LOG(INFO) << "LiveDisplay HAL service is ready.";
+    joinRpcThreadpool();
+    // Should not pass this line
+
+shutdown:
+    // In normal operation, we don't expect the thread pool to shutdown
+    LOG(ERROR) << "LiveDisplay HAL service is shutting down.";
+    return 1;
+}
diff --git a/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc b/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
new file mode 100644
index 0000000..a7e41d7
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
@@ -0,0 +1,4 @@
+service vendor.livedisplay-hal-2-0-samsung /vendor/bin/hw/vendor.lineage.livedisplay@2.0-service.samsung
+    class hal
+    user system
+    group system
\ No newline at end of file
diff --git a/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java b/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
deleted file mode 100644
index dd3f93a..0000000
--- a/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2013-2016 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.lineageos.hardware;
-
-import org.lineageos.internal.util.FileUtils;
-
-/**
- * Adaptive backlight support (this refers to technologies like NVIDIA SmartDimmer,
- * QCOM CABL or Samsung CABC).
- */
-public class AdaptiveBacklight {
-
-    private static final String FILE_CABC = "/sys/class/lcd/panel/power_reduce";
-
-    /**
-     * Whether device supports an adaptive backlight technology.
-     *
-     * @return boolean Supported devices must return always true
-     */
-    public static boolean isSupported() {
-        return FileUtils.isFileWritable(FILE_CABC) &&
-                FileUtils.isFileReadable(FILE_CABC);
-    }
-
-    /**
-     * This method return the current activation status of the adaptive backlight technology.
-     *
-     * @return boolean Must be false when adaptive backlight is not supported or not activated, or
-     * the operation failed while reading the status; true in any other case.
-     */
-    public static boolean isEnabled() {
-        return "1".equals(FileUtils.readOneLine(FILE_CABC));
-    }
-
-    /**
-     * This method allows to setup adaptive backlight technology status.
-     *
-     * @param status The new adaptive backlight status
-     * @return boolean Must be false if adaptive backlight is not supported or the operation
-     * failed; true in any other case.
-     */
-    public static boolean setEnabled(boolean status) {
-        return FileUtils.writeLine(FILE_CABC, status ? "1" : "0");
-    }
-}
diff --git a/lineagehw/src/org/lineageos/hardware/DisplayModeControl.java b/lineagehw/src/org/lineageos/hardware/DisplayModeControl.java
deleted file mode 100644
index a03a591..0000000
--- a/lineagehw/src/org/lineageos/hardware/DisplayModeControl.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Copyright (C) 2015-2016 The CyanogenMod Project
- *           (C) 2017 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.lineageos.hardware;
-
-import lineageos.hardware.DisplayMode;
-import org.lineageos.internal.util.FileUtils;
-
-import java.util.Arrays;
-
-/*
- * Display Modes API
- *
- * A device may implement a list of preset display modes for different
- * viewing intents, such as movies, photos, or extra vibrance. These
- * modes may have multiple components such as gamma correction, white
- * point adjustment, etc, but are activated by a single control point.
- *
- * This API provides support for enumerating and selecting the
- * modes supported by the hardware.
- */
-
-public class DisplayModeControl {
-
-    private static final String MODE_PATH = "/sys/class/mdnie/mdnie/mode";
-    private static final String MAX_PATH = "/sys/class/mdnie/mdnie/mode_max";
-    private static final String DEFAULT_PATH = "/data/misc/.displaymodedefault";
-
-    private static final DisplayMode[] DISPLAY_MODES = {
-        new DisplayMode(0, "Dynamic"),
-        new DisplayMode(1, "Standard"),
-        new DisplayMode(2, "Natural"),
-        new DisplayMode(3, "Cinema"),
-        new DisplayMode(4, "Adaptive"),
-        new DisplayMode(5, "Reading"),
-    };
-
-    static {
-        if (FileUtils.isFileReadable(DEFAULT_PATH)) {
-            setMode(getDefaultMode(), false);
-        } else if (FileUtils.isFileReadable(MODE_PATH)) {
-            /* If default mode is not set yet, set current mode as default */
-            setMode(getCurrentMode(), true);
-        }
-    }
-
-    /*
-     * All HAF classes should export this boolean.
-     * Real implementations must, of course, return true
-     */
-    public static boolean isSupported() {
-        return FileUtils.isFileWritable(MODE_PATH) &&
-                FileUtils.isFileReadable(MODE_PATH) &&
-                FileUtils.isFileWritable(DEFAULT_PATH) &&
-                FileUtils.isFileReadable(DEFAULT_PATH);
-    }
-
-    /*
-     * Get the list of available modes. A mode has an integer
-     * identifier and a string name.
-     *
-     * It is the responsibility of the upper layers to
-     * map the name to a human-readable format or perform translation.
-     */
-    public static DisplayMode[] getAvailableModes() {
-        /* node is unreadable */
-        if (!FileUtils.isFileReadable(MAX_PATH)) {
-            return DISPLAY_MODES;
-        }
-
-        int max;
-        try {
-            max = Integer.parseInt(FileUtils.readOneLine(MAX_PATH));
-        } catch (NumberFormatException e) {
-            /* max is not an integer */
-            return DISPLAY_MODES;
-        }
-
-        /* max is invalid */
-        return Arrays.copyOfRange(DISPLAY_MODES, 0,
-                max >= 0 ? max : DISPLAY_MODES.length);
-    }
-
-    /*
-     * Get the name of the currently selected mode. This can return
-     * null if no mode is selected.
-     */
-    public static DisplayMode getCurrentMode() {
-        try {
-            int mode = Integer.parseInt(FileUtils.readOneLine(MODE_PATH));
-            return DISPLAY_MODES[mode];
-        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
-            return null;
-        }
-    }
-
-    /*
-     * Selects a mode from the list of available modes by it's
-     * string identifier. Returns true on success, false for
-     * failure. It is up to the implementation to determine
-     * if this mode is valid.
-     */
-    public static boolean setMode(DisplayMode mode, boolean makeDefault) {
-        if (mode == null) {
-            return false;
-        }
-
-        boolean success = FileUtils.writeLine(MODE_PATH, String.valueOf(mode.id));
-        if (success && makeDefault) {
-            return FileUtils.writeLine(DEFAULT_PATH, String.valueOf(mode.id));
-        }
-
-        return success;
-    }
-
-    /*
-     * Gets the preferred default mode for this device by it's
-     * string identifier. Can return null if there is no default.
-     */
-    public static DisplayMode getDefaultMode() {
-        try {
-            int mode = Integer.parseInt(FileUtils.readOneLine(DEFAULT_PATH));
-            return DISPLAY_MODES[mode];
-        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
-            return null;
-        }
-    }
-}
diff --git a/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java b/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java
deleted file mode 100644
index 625403d..0000000
--- a/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2016 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.lineageos.hardware;
-
-import android.os.SystemProperties;
-
-import org.lineageos.internal.util.FileUtils;
-
-/**
- * Sunlight Readability Enhancement support, aka Facemelt Mode.
- *
- * Brightens up the screen via image processing or other tricks when
- * under aggressive lighting conditions. Usually depends on CABC
- * support.
- */
-public class SunlightEnhancement {
-
-    private static final String FILE_SRE = "/sys/class/mdnie/mdnie/outdoor";
-
-    /**
-     * Whether device supports SRE
-     *
-     * @return boolean Supported devices must return always true
-     */
-    public static boolean isSupported() {
-        return FileUtils.isFileWritable(FILE_SRE) &&
-                FileUtils.isFileReadable(FILE_SRE);
-    }
-
-    /**
-     * This method return the current activation status of SRE
-     *
-     * @return boolean Must be false when SRE is not supported or not activated, or
-     * the operation failed while reading the status; true in any other case.
-     */
-    public static boolean isEnabled() {
-        return "1".equals(FileUtils.readOneLine(FILE_SRE));
-    }
-
-    /**
-     * This method allows to setup SRE.
-     *
-     * @param status The new SRE status
-     * @return boolean Must be false if SRE is not supported or the operation
-     * failed; true in any other case.
-     */
-    public static boolean setEnabled(boolean status) {
-        return FileUtils.writeLine(FILE_SRE, status ? "1" : "0");
-    }
-
-    /**
-     * Whether adaptive backlight (CABL / CABC) is required to be enabled
-     *
-     * @return boolean False if adaptive backlight is not a dependency
-     */
-    public static boolean isAdaptiveBacklightRequired() {
-        return false;
-    }
-
-    /**
-     * Set this to true if the implementation is self-managed and does
-     * it's own ambient sensing. In this case, setEnabled is assumed
-     * to toggle the feature on or off, but not activate it. If set
-     * to false, LiveDisplay will call setEnabled when the ambient lux
-     * threshold is crossed.
-     *
-     * @return true if this enhancement is self-managed
-     */
-    public static boolean isSelfManaged() {
-        return false;
-    }
-}
-- 
2.17.1

