From 6b8b5c57802c1ca1768cc59f2b2b8b1b52158d77 Mon Sep 17 00:00:00 2001
From: Jan Altensen <info@stricted.net>
Date: Sun, 20 Jan 2019 02:40:07 +0100
Subject: [PATCH 5/5] hidl: livedisplay: Add binderized service implementation

* Change default ::implementation namespace to ::samsung
* Fill in required methods for used impls
* Cleanup passthrough code for used impls
* Fix compile of unused impls
* Add and setup binderized service
* Remove lineagehw impls

Change-Id: I545a7c0ac8bf4fce04da73a0d39d4ac1938496f2
---
 .../hidl/livedisplay/AdaptiveBacklight.cpp    | 35 ++++---
 .../hidl/livedisplay/AdaptiveBacklight.h      | 14 +--
 lineagehw/hidl/livedisplay/Android.bp         | 18 ++--
 lineagehw/hidl/livedisplay/AutoContrast.cpp   |  6 +-
 lineagehw/hidl/livedisplay/AutoContrast.h     |  6 +-
 lineagehw/hidl/livedisplay/ColorBalance.cpp   |  8 +-
 lineagehw/hidl/livedisplay/ColorBalance.h     |  8 +-
 .../hidl/livedisplay/ColorEnhancement.cpp     |  6 +-
 lineagehw/hidl/livedisplay/ColorEnhancement.h |  6 +-
 .../livedisplay/DisplayColorCalibration.cpp   |  8 +-
 .../livedisplay/DisplayColorCalibration.h     |  8 +-
 lineagehw/hidl/livedisplay/DisplayModes.cpp   | 12 +--
 lineagehw/hidl/livedisplay/DisplayModes.h     | 12 +--
 .../hidl/livedisplay/PictureAdjustment.cpp    | 20 ++--
 .../hidl/livedisplay/PictureAdjustment.h      | 20 ++--
 .../hidl/livedisplay/ReadingEnhancement.cpp   |  6 +-
 .../hidl/livedisplay/ReadingEnhancement.h     |  6 +-
 .../hidl/livedisplay/SunlightEnhancement.cpp  | 47 +++++++---
 .../hidl/livedisplay/SunlightEnhancement.h    | 14 +--
 lineagehw/hidl/livedisplay/service.cpp        | 91 +++++++++++++++++++
 ...lineage.livedisplay@2.0-service.samsung.rc |  4 +
 .../lineageos/hardware/AdaptiveBacklight.java | 59 ------------
 .../hardware/SunlightEnhancement.java         | 86 ------------------
 23 files changed, 240 insertions(+), 260 deletions(-)
 create mode 100644 lineagehw/hidl/livedisplay/service.cpp
 create mode 100644 lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
 delete mode 100644 lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
 delete mode 100644 lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java

diff --git a/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp b/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
index 755f7f2..d796827 100644
--- a/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
+++ b/lineagehw/hidl/livedisplay/AdaptiveBacklight.cpp
@@ -14,33 +14,42 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "AdaptiveBacklight.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
+
+bool AdaptiveBacklight::isSupported() {
+    std::ofstream file("/sys/class/lcd/panel/power_reduce");
+    return file.good();
+}
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
 Return<bool> AdaptiveBacklight::isEnabled() {
-    // TODO implement
-    return bool {};
+    std::ifstream file("/sys/class/lcd/panel/power_reduce");
+
+    if (file.is_open()) {
+        std::string line;
+        getline(file, line);
+        if (!line.compare("1"))
+            return true;
+    }
+
+    return false;
 }
 
 Return<bool> AdaptiveBacklight::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
+    std::ofstream file("/sys/class/lcd/panel/power_reduce");
+    file << (enabled ? "1" : "0");
+    return true;
 }
 
-
-// Methods from ::android::hidl::base::V1_0::IBase follow.
-
-//IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* /* name */) {
-    //return new AdaptiveBacklight();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/AdaptiveBacklight.h b/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
index c0e0c4e..48d83ee 100644
--- a/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
+++ b/lineagehw/hidl/livedisplay/AdaptiveBacklight.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,7 +35,12 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct AdaptiveBacklight : public IAdaptiveBacklight {
+class AdaptiveBacklight : public IAdaptiveBacklight {
+  public:
+    AdaptiveBacklight() = default;
+
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
     Return<bool> isEnabled() override;
     Return<bool> setEnabled(bool enabled) override;
@@ -44,10 +49,7 @@ struct AdaptiveBacklight : public IAdaptiveBacklight {
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/Android.bp b/lineagehw/hidl/livedisplay/Android.bp
index 276c386..52b8d4f 100644
--- a/lineagehw/hidl/livedisplay/Android.bp
+++ b/lineagehw/hidl/livedisplay/Android.bp
@@ -12,17 +12,10 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-cc_library_shared {
-    // FIXME: this should only be -impl for a passthrough hal.
-    // In most cases, to convert this to a binderized implementation, you should:
-    // - change '-impl' to '-service' here and make it a cc_binary instead of a
-    //   cc_library_shared.
-    // - add a *.rc file for this module.
-    // - delete HIDL_FETCH_I* functions.
-    // - call configureRpcThreadpool and registerAsService on the instance.
-    // You may also want to append '-impl/-service' with a specific identifier like
-    // '-vendor' or '-<hardware identifier>' etc to distinguish it.
-    name: "vendor.lineage.livedisplay@2.0-impl",
+cc_binary {
+    name: "vendor.lineage.livedisplay@2.0-service.samsung",
+    init_rc: ["vendor.lineage.livedisplay@2.0-service.samsung.rc"],
+    defaults: ["hidl_defaults"],
     relative_install_path: "hw",
     // FIXME: this should be 'vendor: true' for modules that will eventually be
     // on AOSP.
@@ -37,8 +30,11 @@ cc_library_shared {
         "PictureAdjustment.cpp",
         "ReadingEnhancement.cpp",
         "SunlightEnhancement.cpp",
+        "service.cpp",
     ],
     shared_libs: [
+        "libbase",
+        "libbinder",
         "libhidlbase",
         "libhidltransport",
         "libutils",
diff --git a/lineagehw/hidl/livedisplay/AutoContrast.cpp b/lineagehw/hidl/livedisplay/AutoContrast.cpp
index af16fc7..8269774 100644
--- a/lineagehw/hidl/livedisplay/AutoContrast.cpp
+++ b/lineagehw/hidl/livedisplay/AutoContrast.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
 Return<bool> AutoContrast::isEnabled() {
@@ -28,7 +28,7 @@ Return<bool> AutoContrast::isEnabled() {
     return bool {};
 }
 
-Return<bool> AutoContrast::setEnabled(bool enabled) {
+Return<bool> AutoContrast::setEnabled(bool) {
     // TODO implement
     return bool {};
 }
@@ -40,7 +40,7 @@ Return<bool> AutoContrast::setEnabled(bool enabled) {
     //return new AutoContrast();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/AutoContrast.h b/lineagehw/hidl/livedisplay/AutoContrast.h
index 44a8be6..f1efc16 100644
--- a/lineagehw/hidl/livedisplay/AutoContrast.h
+++ b/lineagehw/hidl/livedisplay/AutoContrast.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -38,7 +38,7 @@ using ::android::sp;
 struct AutoContrast : public IAutoContrast {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
     Return<bool> isEnabled() override;
-    Return<bool> setEnabled(bool enabled) override;
+    Return<bool> setEnabled(bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -47,7 +47,7 @@ struct AutoContrast : public IAutoContrast {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IAutoContrast* HIDL_FETCH_IAutoContrast(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorBalance.cpp b/lineagehw/hidl/livedisplay/ColorBalance.cpp
index f636990..547d9ed 100644
--- a/lineagehw/hidl/livedisplay/ColorBalance.cpp
+++ b/lineagehw/hidl/livedisplay/ColorBalance.cpp
@@ -20,10 +20,10 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
-Return<void> ColorBalance::getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) {
+Return<void> ColorBalance::getColorBalanceRange(getColorBalanceRange_cb) {
     // TODO implement
     return Void();
 }
@@ -33,7 +33,7 @@ Return<int32_t> ColorBalance::getColorBalance() {
     return int32_t {};
 }
 
-Return<bool> ColorBalance::setColorBalance(int32_t value) {
+Return<bool> ColorBalance::setColorBalance(int32_t) {
     // TODO implement
     return bool {};
 }
@@ -45,7 +45,7 @@ Return<bool> ColorBalance::setColorBalance(int32_t value) {
     //return new ColorBalance();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorBalance.h b/lineagehw/hidl/livedisplay/ColorBalance.h
index b760c7c..b4cd5f4 100644
--- a/lineagehw/hidl/livedisplay/ColorBalance.h
+++ b/lineagehw/hidl/livedisplay/ColorBalance.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -37,9 +37,9 @@ using ::android::sp;
 
 struct ColorBalance : public IColorBalance {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
-    Return<void> getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) override;
+    Return<void> getColorBalanceRange(getColorBalanceRange_cb) override;
     Return<int32_t> getColorBalance() override;
-    Return<bool> setColorBalance(int32_t value) override;
+    Return<bool> setColorBalance(int32_t) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -48,7 +48,7 @@ struct ColorBalance : public IColorBalance {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IColorBalance* HIDL_FETCH_IColorBalance(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorEnhancement.cpp b/lineagehw/hidl/livedisplay/ColorEnhancement.cpp
index e87961d..19a7045 100644
--- a/lineagehw/hidl/livedisplay/ColorEnhancement.cpp
+++ b/lineagehw/hidl/livedisplay/ColorEnhancement.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
 Return<bool> ColorEnhancement::isEnabled() {
@@ -28,7 +28,7 @@ Return<bool> ColorEnhancement::isEnabled() {
     return bool {};
 }
 
-Return<bool> ColorEnhancement::setEnabled(bool enabled) {
+Return<bool> ColorEnhancement::setEnabled(bool) {
     // TODO implement
     return bool {};
 }
@@ -40,7 +40,7 @@ Return<bool> ColorEnhancement::setEnabled(bool enabled) {
     //return new ColorEnhancement();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ColorEnhancement.h b/lineagehw/hidl/livedisplay/ColorEnhancement.h
index 925cdfc..7df2b65 100644
--- a/lineagehw/hidl/livedisplay/ColorEnhancement.h
+++ b/lineagehw/hidl/livedisplay/ColorEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -38,7 +38,7 @@ using ::android::sp;
 struct ColorEnhancement : public IColorEnhancement {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
     Return<bool> isEnabled() override;
-    Return<bool> setEnabled(bool enabled) override;
+    Return<bool> setEnabled(bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -47,7 +47,7 @@ struct ColorEnhancement : public IColorEnhancement {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp b/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
index e471f3e..bfcda86 100644
--- a/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibration.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
 Return<int32_t> DisplayColorCalibration::getMaxValue() {
@@ -33,12 +33,12 @@ Return<int32_t> DisplayColorCalibration::getMinValue() {
     return int32_t {};
 }
 
-Return<void> DisplayColorCalibration::getCalibration(getCalibration_cb _hidl_cb) {
+Return<void> DisplayColorCalibration::getCalibration(getCalibration_cb) {
     // TODO implement
     return Void();
 }
 
-Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>& rgb) {
+Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>&) {
     // TODO implement
     return bool {};
 }
@@ -50,7 +50,7 @@ Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>& rg
     //return new DisplayColorCalibration();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayColorCalibration.h b/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
index f4df651..8c1f8f8 100644
--- a/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
+++ b/lineagehw/hidl/livedisplay/DisplayColorCalibration.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -39,8 +39,8 @@ struct DisplayColorCalibration : public IDisplayColorCalibration {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
     Return<int32_t> getMaxValue() override;
     Return<int32_t> getMinValue() override;
-    Return<void> getCalibration(getCalibration_cb _hidl_cb) override;
-    Return<bool> setCalibration(const hidl_vec<int32_t>& rgb) override;
+    Return<void> getCalibration(getCalibration_cb) override;
+    Return<bool> setCalibration(const hidl_vec<int32_t>&) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -49,7 +49,7 @@ struct DisplayColorCalibration : public IDisplayColorCalibration {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayModes.cpp b/lineagehw/hidl/livedisplay/DisplayModes.cpp
index 6fcf88d..b16ae47 100644
--- a/lineagehw/hidl/livedisplay/DisplayModes.cpp
+++ b/lineagehw/hidl/livedisplay/DisplayModes.cpp
@@ -20,25 +20,25 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
-Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb _hidl_cb) {
+Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> DisplayModes::getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) {
+Return<void> DisplayModes::getCurrentDisplayMode(getCurrentDisplayMode_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> DisplayModes::getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) {
+Return<void> DisplayModes::getDefaultDisplayMode(getDefaultDisplayMode_cb) {
     // TODO implement
     return Void();
 }
 
-Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
+Return<bool> DisplayModes::setDisplayMode(int32_t, bool) {
     // TODO implement
     return bool {};
 }
@@ -50,7 +50,7 @@ Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
     //return new DisplayModes();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/DisplayModes.h b/lineagehw/hidl/livedisplay/DisplayModes.h
index 90f0cb3..06a188c 100644
--- a/lineagehw/hidl/livedisplay/DisplayModes.h
+++ b/lineagehw/hidl/livedisplay/DisplayModes.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -37,10 +37,10 @@ using ::android::sp;
 
 struct DisplayModes : public IDisplayModes {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
-    Return<void> getDisplayModes(getDisplayModes_cb _hidl_cb) override;
-    Return<void> getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) override;
-    Return<void> getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) override;
-    Return<bool> setDisplayMode(int32_t modeID, bool makeDefault) override;
+    Return<void> getDisplayModes(getDisplayModes_cb) override;
+    Return<void> getCurrentDisplayMode(getCurrentDisplayMode_cb) override;
+    Return<void> getDefaultDisplayMode(getDefaultDisplayMode_cb) override;
+    Return<bool> setDisplayMode(int32_t, bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -49,7 +49,7 @@ struct DisplayModes : public IDisplayModes {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IDisplayModes* HIDL_FETCH_IDisplayModes(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/PictureAdjustment.cpp b/lineagehw/hidl/livedisplay/PictureAdjustment.cpp
index bedec52..ad32cd1 100644
--- a/lineagehw/hidl/livedisplay/PictureAdjustment.cpp
+++ b/lineagehw/hidl/livedisplay/PictureAdjustment.cpp
@@ -20,45 +20,45 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
-Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
+Return<void> PictureAdjustment::getHueRange(getHueRange_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb _hidl_cb) {
+Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb _hidl_cb) {
+Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb _hidl_cb) {
+Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) {
+Return<void> PictureAdjustment::getSaturationThresholdRange(getSaturationThresholdRange_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) {
+Return<void> PictureAdjustment::getPictureAdjustment(getPictureAdjustment_cb) {
     // TODO implement
     return Void();
 }
 
-Return<void> PictureAdjustment::getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) {
+Return<void> PictureAdjustment::getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb) {
     // TODO implement
     return Void();
 }
 
-Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) {
+Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC&) {
     // TODO implement
     return bool {};
 }
@@ -70,7 +70,7 @@ Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::li
     //return new PictureAdjustment();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/PictureAdjustment.h b/lineagehw/hidl/livedisplay/PictureAdjustment.h
index 17bfe66..c8291fc 100644
--- a/lineagehw/hidl/livedisplay/PictureAdjustment.h
+++ b/lineagehw/hidl/livedisplay/PictureAdjustment.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -37,14 +37,14 @@ using ::android::sp;
 
 struct PictureAdjustment : public IPictureAdjustment {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
-    Return<void> getHueRange(getHueRange_cb _hidl_cb) override;
-    Return<void> getSaturationRange(getSaturationRange_cb _hidl_cb) override;
-    Return<void> getIntensityRange(getIntensityRange_cb _hidl_cb) override;
-    Return<void> getContrastRange(getContrastRange_cb _hidl_cb) override;
-    Return<void> getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) override;
-    Return<void> getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) override;
-    Return<void> getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) override;
-    Return<bool> setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) override;
+    Return<void> getHueRange(getHueRange_cb) override;
+    Return<void> getSaturationRange(getSaturationRange_cb) override;
+    Return<void> getIntensityRange(getIntensityRange_cb) override;
+    Return<void> getContrastRange(getContrastRange_cb) override;
+    Return<void> getSaturationThresholdRange(getSaturationThresholdRange_cb) override;
+    Return<void> getPictureAdjustment(getPictureAdjustment_cb) override;
+    Return<void> getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb) override;
+    Return<bool> setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC&) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -53,7 +53,7 @@ struct PictureAdjustment : public IPictureAdjustment {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp b/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
index ea27c90..ed35b37 100644
--- a/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancement.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
 Return<bool> ReadingEnhancement::isEnabled() {
@@ -28,7 +28,7 @@ Return<bool> ReadingEnhancement::isEnabled() {
     return bool {};
 }
 
-Return<bool> ReadingEnhancement::setEnabled(bool enabled) {
+Return<bool> ReadingEnhancement::setEnabled(bool) {
     // TODO implement
     return bool {};
 }
@@ -40,7 +40,7 @@ Return<bool> ReadingEnhancement::setEnabled(bool enabled) {
     //return new ReadingEnhancement();
 //}
 //
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/ReadingEnhancement.h b/lineagehw/hidl/livedisplay/ReadingEnhancement.h
index 20e909a..f4a6d1c 100644
--- a/lineagehw/hidl/livedisplay/ReadingEnhancement.h
+++ b/lineagehw/hidl/livedisplay/ReadingEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -38,7 +38,7 @@ using ::android::sp;
 struct ReadingEnhancement : public IReadingEnhancement {
     // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
     Return<bool> isEnabled() override;
-    Return<bool> setEnabled(bool enabled) override;
+    Return<bool> setEnabled(bool) override;
 
     // Methods from ::android::hidl::base::V1_0::IBase follow.
 
@@ -47,7 +47,7 @@ struct ReadingEnhancement : public IReadingEnhancement {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* name);
 
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp b/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
index 8a3c329..f7bc949 100644
--- a/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancement.cpp
@@ -14,33 +14,54 @@
  * limitations under the License.
  */
 
+#include <fstream>
+
 #include "SunlightEnhancement.h"
 
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
-Return<bool> SunlightEnhancement::isEnabled() {
-    // TODO implement
-    return bool {};
+bool SunlightEnhancement::isSupported() {
+    std::ofstream file("/sys/class/mdnie/mdnie/outdoor");
+    std::ofstream file2("/sys/class/mdnie/mdnie/lux");
+    return file.good() || file2.good();
 }
 
-Return<bool> SunlightEnhancement::setEnabled(bool enabled) {
-    // TODO implement
-    return bool {};
+// Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
+Return<bool> SunlightEnhancement::isEnabled() {
+    std::ifstream file("/sys/class/mdnie/mdnie/outdoor");
+    std::ifstream file2("/sys/class/mdnie/mdnie/lux");
+    int status = -1;
+
+    if (file.is_open()) {
+        file >> status;
+    }
+    else if (file2.is_open()) {
+        file2 >> status;
+    }
+
+    return (file.good() || file2.good()) && status > 0;
 }
 
+Return<bool> SunlightEnhancement::setEnabled(bool enabled) {
+    std::ofstream file("/sys/class/mdnie/mdnie/outdoor");
+    std::ifstream file2("/sys/class/mdnie/mdnie/lux");
+    if (file.is_open()) {
+        file << (enabled ? "1" : "0");
+    }
+    else if (file2.is_open()) {
+        /* see drivers/video/fbdev/exynos/decon_7880/panels/mdnie_lite_table*, get_hbm_index */
+        file << (enabled ? "40000" : "0");
+    }
 
-// Methods from ::android::hidl::base::V1_0::IBase follow.
+    return true;
+}
 
-//ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* /* name */) {
-    //return new SunlightEnhancement();
-//}
-//
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/SunlightEnhancement.h b/lineagehw/hidl/livedisplay/SunlightEnhancement.h
index 7571831..6dd813a 100644
--- a/lineagehw/hidl/livedisplay/SunlightEnhancement.h
+++ b/lineagehw/hidl/livedisplay/SunlightEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace implementation {
+namespace samsung {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -35,7 +35,12 @@ using ::android::hardware::Return;
 using ::android::hardware::Void;
 using ::android::sp;
 
-struct SunlightEnhancement : public ISunlightEnhancement {
+class SunlightEnhancement : public ISunlightEnhancement {
+  public:
+    SunlightEnhancement() = default;
+
+    bool isSupported();
+
     // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
     Return<bool> isEnabled() override;
     Return<bool> setEnabled(bool enabled) override;
@@ -44,10 +49,7 @@ struct SunlightEnhancement : public ISunlightEnhancement {
 
 };
 
-// FIXME: most likely delete, this is only for passthrough implementations
-// extern "C" ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* name);
-
-}  // namespace implementation
+}  // namespace samsung
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/lineagehw/hidl/livedisplay/service.cpp b/lineagehw/hidl/livedisplay/service.cpp
new file mode 100644
index 0000000..e84f7b4
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/service.cpp
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "vendor.lineage.livedisplay@2.0-service.samsung"
+
+#include <android-base/logging.h>
+#include <binder/ProcessState.h>
+#include <hidl/HidlTransportSupport.h>
+
+#include "AdaptiveBacklight.h"
+#include "SunlightEnhancement.h"
+
+using android::hardware::configureRpcThreadpool;
+using android::hardware::joinRpcThreadpool;
+using android::sp;
+using android::status_t;
+using android::OK;
+
+using vendor::lineage::livedisplay::V2_0::samsung::AdaptiveBacklight;
+using vendor::lineage::livedisplay::V2_0::samsung::SunlightEnhancement;
+
+int main() {
+    sp<AdaptiveBacklight> adaptiveBacklight;
+    sp<SunlightEnhancement> sunlightEnhancement;
+    status_t status;
+    uint8_t services = 0;
+
+    LOG(INFO) << "LiveDisplay HAL service is starting.";
+
+    adaptiveBacklight = new AdaptiveBacklight();
+    if (adaptiveBacklight == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL AdaptiveBacklight Iface, exiting.";
+        goto shutdown;
+    }
+    if (adaptiveBacklight->isSupported()) {
+        services++;
+    }
+
+    sunlightEnhancement = new SunlightEnhancement();
+    if (sunlightEnhancement == nullptr) {
+        LOG(ERROR) << "Can not create an instance of LiveDisplay HAL SunlightEnhancement Iface, exiting.";
+        goto shutdown;
+    }
+    if (sunlightEnhancement->isSupported()) {
+        services++;
+    }
+
+    configureRpcThreadpool(services, true /*callerWillJoin*/);
+
+    if (adaptiveBacklight->isSupported()) {
+        status = adaptiveBacklight->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL AdaptiveBacklight Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    if (sunlightEnhancement->isSupported()) {
+        status = sunlightEnhancement->registerAsService();
+        if (status != OK) {
+            LOG(ERROR)
+                << "Could not register service for LiveDisplay HAL SunlightEnhancement Iface ("
+                << status << ")";
+            goto shutdown;
+        }
+    }
+
+    LOG(INFO) << "LiveDisplay HAL service is ready.";
+    joinRpcThreadpool();
+    // Should not pass this line
+
+shutdown:
+    // In normal operation, we don't expect the thread pool to shutdown
+    LOG(ERROR) << "LiveDisplay HAL service is shutting down.";
+    return 1;
+}
diff --git a/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc b/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
new file mode 100644
index 0000000..a7e41d7
--- /dev/null
+++ b/lineagehw/hidl/livedisplay/vendor.lineage.livedisplay@2.0-service.samsung.rc
@@ -0,0 +1,4 @@
+service vendor.livedisplay-hal-2-0-samsung /vendor/bin/hw/vendor.lineage.livedisplay@2.0-service.samsung
+    class hal
+    user system
+    group system
\ No newline at end of file
diff --git a/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java b/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
deleted file mode 100644
index dd3f93a..0000000
--- a/lineagehw/src/org/lineageos/hardware/AdaptiveBacklight.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2013-2016 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.lineageos.hardware;
-
-import org.lineageos.internal.util.FileUtils;
-
-/**
- * Adaptive backlight support (this refers to technologies like NVIDIA SmartDimmer,
- * QCOM CABL or Samsung CABC).
- */
-public class AdaptiveBacklight {
-
-    private static final String FILE_CABC = "/sys/class/lcd/panel/power_reduce";
-
-    /**
-     * Whether device supports an adaptive backlight technology.
-     *
-     * @return boolean Supported devices must return always true
-     */
-    public static boolean isSupported() {
-        return FileUtils.isFileWritable(FILE_CABC) &&
-                FileUtils.isFileReadable(FILE_CABC);
-    }
-
-    /**
-     * This method return the current activation status of the adaptive backlight technology.
-     *
-     * @return boolean Must be false when adaptive backlight is not supported or not activated, or
-     * the operation failed while reading the status; true in any other case.
-     */
-    public static boolean isEnabled() {
-        return "1".equals(FileUtils.readOneLine(FILE_CABC));
-    }
-
-    /**
-     * This method allows to setup adaptive backlight technology status.
-     *
-     * @param status The new adaptive backlight status
-     * @return boolean Must be false if adaptive backlight is not supported or the operation
-     * failed; true in any other case.
-     */
-    public static boolean setEnabled(boolean status) {
-        return FileUtils.writeLine(FILE_CABC, status ? "1" : "0");
-    }
-}
diff --git a/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java b/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java
deleted file mode 100644
index 625403d..0000000
--- a/lineagehw/src/org/lineageos/hardware/SunlightEnhancement.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2016 The CyanogenMod Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.lineageos.hardware;
-
-import android.os.SystemProperties;
-
-import org.lineageos.internal.util.FileUtils;
-
-/**
- * Sunlight Readability Enhancement support, aka Facemelt Mode.
- *
- * Brightens up the screen via image processing or other tricks when
- * under aggressive lighting conditions. Usually depends on CABC
- * support.
- */
-public class SunlightEnhancement {
-
-    private static final String FILE_SRE = "/sys/class/mdnie/mdnie/outdoor";
-
-    /**
-     * Whether device supports SRE
-     *
-     * @return boolean Supported devices must return always true
-     */
-    public static boolean isSupported() {
-        return FileUtils.isFileWritable(FILE_SRE) &&
-                FileUtils.isFileReadable(FILE_SRE);
-    }
-
-    /**
-     * This method return the current activation status of SRE
-     *
-     * @return boolean Must be false when SRE is not supported or not activated, or
-     * the operation failed while reading the status; true in any other case.
-     */
-    public static boolean isEnabled() {
-        return "1".equals(FileUtils.readOneLine(FILE_SRE));
-    }
-
-    /**
-     * This method allows to setup SRE.
-     *
-     * @param status The new SRE status
-     * @return boolean Must be false if SRE is not supported or the operation
-     * failed; true in any other case.
-     */
-    public static boolean setEnabled(boolean status) {
-        return FileUtils.writeLine(FILE_SRE, status ? "1" : "0");
-    }
-
-    /**
-     * Whether adaptive backlight (CABL / CABC) is required to be enabled
-     *
-     * @return boolean False if adaptive backlight is not a dependency
-     */
-    public static boolean isAdaptiveBacklightRequired() {
-        return false;
-    }
-
-    /**
-     * Set this to true if the implementation is self-managed and does
-     * it's own ambient sensing. In this case, setEnabled is assumed
-     * to toggle the feature on or off, but not activate it. If set
-     * to false, LiveDisplay will call setEnabled when the ambient lux
-     * threshold is crossed.
-     *
-     * @return true if this enhancement is self-managed
-     */
-    public static boolean isSelfManaged() {
-        return false;
-    }
-}
-- 
2.17.1

