From 60ac9d1ecb635a8f45a0957c2a5ba4de5429c25e Mon Sep 17 00:00:00 2001
From: Paul Keith <javelinanddart@gmail.com>
Date: Sat, 19 Jan 2019 16:35:57 +0100
Subject: [PATCH 3/8] livedisplay: Split impls into legacymm and sdm

* Since we're no longer approaching this as a @1.0
  wrapper, we need separate impls for sdm and legacymm

Change-Id: I413349de5d2331cf9cf60199999c34614224fe42
---
 legacymm/AdaptiveBacklight.cpp           | 47 +++++++++++++++
 legacymm/AdaptiveBacklight.h             | 56 +++++++++++++++++
 {qti => legacymm}/Android.bp             |  0
 legacymm/AutoContrast.cpp                | 47 +++++++++++++++
 legacymm/AutoContrast.h                  | 56 +++++++++++++++++
 legacymm/ColorBalance.cpp                | 52 ++++++++++++++++
 legacymm/ColorBalance.h                  | 57 ++++++++++++++++++
 legacymm/ColorEnhancement.cpp            | 47 +++++++++++++++
 legacymm/ColorEnhancement.h              | 56 +++++++++++++++++
 legacymm/DisplayColorCalibration.cpp     | 57 ++++++++++++++++++
 legacymm/DisplayColorCalibration.h       | 58 ++++++++++++++++++
 legacymm/DisplayModes.cpp                | 57 ++++++++++++++++++
 legacymm/DisplayModes.h                  | 58 ++++++++++++++++++
 legacymm/PictureAdjustment.cpp           | 77 ++++++++++++++++++++++++
 legacymm/PictureAdjustment.h             | 62 +++++++++++++++++++
 legacymm/ReadingEnhancement.cpp          | 47 +++++++++++++++
 legacymm/ReadingEnhancement.h            | 56 +++++++++++++++++
 legacymm/SunlightEnhancement.cpp         | 47 +++++++++++++++
 legacymm/SunlightEnhancement.h           | 56 +++++++++++++++++
 {qti => sdm}/AdaptiveBacklight.cpp       |  4 +-
 {qti => sdm}/AdaptiveBacklight.h         |  4 +-
 sdm/Android.bp                           | 47 +++++++++++++++
 {qti => sdm}/AutoContrast.cpp            |  4 +-
 {qti => sdm}/AutoContrast.h              |  4 +-
 {qti => sdm}/ColorBalance.cpp            |  4 +-
 {qti => sdm}/ColorBalance.h              |  4 +-
 {qti => sdm}/ColorEnhancement.cpp        |  4 +-
 {qti => sdm}/ColorEnhancement.h          |  4 +-
 {qti => sdm}/DisplayColorCalibration.cpp |  4 +-
 {qti => sdm}/DisplayColorCalibration.h   |  4 +-
 {qti => sdm}/DisplayModes.cpp            |  4 +-
 {qti => sdm}/DisplayModes.h              |  4 +-
 {qti => sdm}/PictureAdjustment.cpp       |  4 +-
 {qti => sdm}/PictureAdjustment.h         |  4 +-
 {qti => sdm}/ReadingEnhancement.cpp      |  4 +-
 {qti => sdm}/ReadingEnhancement.h        |  4 +-
 {qti => sdm}/SunlightEnhancement.cpp     |  4 +-
 {qti => sdm}/SunlightEnhancement.h       |  4 +-
 38 files changed, 1076 insertions(+), 36 deletions(-)
 create mode 100644 legacymm/AdaptiveBacklight.cpp
 create mode 100644 legacymm/AdaptiveBacklight.h
 rename {qti => legacymm}/Android.bp (100%)
 create mode 100644 legacymm/AutoContrast.cpp
 create mode 100644 legacymm/AutoContrast.h
 create mode 100644 legacymm/ColorBalance.cpp
 create mode 100644 legacymm/ColorBalance.h
 create mode 100644 legacymm/ColorEnhancement.cpp
 create mode 100644 legacymm/ColorEnhancement.h
 create mode 100644 legacymm/DisplayColorCalibration.cpp
 create mode 100644 legacymm/DisplayColorCalibration.h
 create mode 100644 legacymm/DisplayModes.cpp
 create mode 100644 legacymm/DisplayModes.h
 create mode 100644 legacymm/PictureAdjustment.cpp
 create mode 100644 legacymm/PictureAdjustment.h
 create mode 100644 legacymm/ReadingEnhancement.cpp
 create mode 100644 legacymm/ReadingEnhancement.h
 create mode 100644 legacymm/SunlightEnhancement.cpp
 create mode 100644 legacymm/SunlightEnhancement.h
 rename {qti => sdm}/AdaptiveBacklight.cpp (97%)
 rename {qti => sdm}/AdaptiveBacklight.h (98%)
 create mode 100644 sdm/Android.bp
 rename {qti => sdm}/AutoContrast.cpp (97%)
 rename {qti => sdm}/AutoContrast.h (97%)
 rename {qti => sdm}/ColorBalance.cpp (97%)
 rename {qti => sdm}/ColorBalance.h (98%)
 rename {qti => sdm}/ColorEnhancement.cpp (97%)
 rename {qti => sdm}/ColorEnhancement.h (98%)
 rename {qti => sdm}/DisplayColorCalibration.cpp (97%)
 rename {qti => sdm}/DisplayColorCalibration.h (98%)
 rename {qti => sdm}/DisplayModes.cpp (97%)
 rename {qti => sdm}/DisplayModes.h (98%)
 rename {qti => sdm}/PictureAdjustment.cpp (98%)
 rename {qti => sdm}/PictureAdjustment.h (98%)
 rename {qti => sdm}/ReadingEnhancement.cpp (97%)
 rename {qti => sdm}/ReadingEnhancement.h (98%)
 rename {qti => sdm}/SunlightEnhancement.cpp (97%)
 rename {qti => sdm}/SunlightEnhancement.h (98%)

diff --git a/legacymm/AdaptiveBacklight.cpp b/legacymm/AdaptiveBacklight.cpp
new file mode 100644
index 0000000..dfef048
--- /dev/null
+++ b/legacymm/AdaptiveBacklight.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "AdaptiveBacklight.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
+Return<bool> AdaptiveBacklight::isEnabled() {
+    // TODO implement
+    return bool {};
+}
+
+Return<bool> AdaptiveBacklight::setEnabled(bool enabled) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* /* name */) {
+    //return new AdaptiveBacklight();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/AdaptiveBacklight.h b/legacymm/AdaptiveBacklight.h
new file mode 100644
index 0000000..fc5589c
--- /dev/null
+++ b/legacymm/AdaptiveBacklight.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_ADAPTIVEBACKLIGHT_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_ADAPTIVEBACKLIGHT_H
+
+#include <vendor/lineage/livedisplay/2.0/IAdaptiveBacklight.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct AdaptiveBacklight : public IAdaptiveBacklight {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
+    Return<bool> isEnabled() override;
+    Return<bool> setEnabled(bool enabled) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_ADAPTIVEBACKLIGHT_H
diff --git a/qti/Android.bp b/legacymm/Android.bp
similarity index 100%
rename from qti/Android.bp
rename to legacymm/Android.bp
diff --git a/legacymm/AutoContrast.cpp b/legacymm/AutoContrast.cpp
new file mode 100644
index 0000000..fd71d25
--- /dev/null
+++ b/legacymm/AutoContrast.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "AutoContrast.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
+Return<bool> AutoContrast::isEnabled() {
+    // TODO implement
+    return bool {};
+}
+
+Return<bool> AutoContrast::setEnabled(bool enabled) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IAutoContrast* HIDL_FETCH_IAutoContrast(const char* /* name */) {
+    //return new AutoContrast();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/AutoContrast.h b/legacymm/AutoContrast.h
new file mode 100644
index 0000000..11c97c8
--- /dev/null
+++ b/legacymm/AutoContrast.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
+
+#include <vendor/lineage/livedisplay/2.0/IAutoContrast.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct AutoContrast : public IAutoContrast {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
+    Return<bool> isEnabled() override;
+    Return<bool> setEnabled(bool enabled) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IAutoContrast* HIDL_FETCH_IAutoContrast(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_AUTOCONTRAST_H
diff --git a/legacymm/ColorBalance.cpp b/legacymm/ColorBalance.cpp
new file mode 100644
index 0000000..b05533c
--- /dev/null
+++ b/legacymm/ColorBalance.cpp
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ColorBalance.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
+Return<void> ColorBalance::getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<int32_t> ColorBalance::getColorBalance() {
+    // TODO implement
+    return int32_t {};
+}
+
+Return<bool> ColorBalance::setColorBalance(int32_t value) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IColorBalance* HIDL_FETCH_IColorBalance(const char* /* name */) {
+    //return new ColorBalance();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/ColorBalance.h b/legacymm/ColorBalance.h
new file mode 100644
index 0000000..b2f0bb5
--- /dev/null
+++ b/legacymm/ColorBalance.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
+
+#include <vendor/lineage/livedisplay/2.0/IColorBalance.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct ColorBalance : public IColorBalance {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
+    Return<void> getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) override;
+    Return<int32_t> getColorBalance() override;
+    Return<bool> setColorBalance(int32_t value) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IColorBalance* HIDL_FETCH_IColorBalance(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORBALANCE_H
diff --git a/legacymm/ColorEnhancement.cpp b/legacymm/ColorEnhancement.cpp
new file mode 100644
index 0000000..1085917
--- /dev/null
+++ b/legacymm/ColorEnhancement.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ColorEnhancement.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
+Return<bool> ColorEnhancement::isEnabled() {
+    // TODO implement
+    return bool {};
+}
+
+Return<bool> ColorEnhancement::setEnabled(bool enabled) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* /* name */) {
+    //return new ColorEnhancement();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/ColorEnhancement.h b/legacymm/ColorEnhancement.h
new file mode 100644
index 0000000..a312924
--- /dev/null
+++ b/legacymm/ColorEnhancement.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
+
+#include <vendor/lineage/livedisplay/2.0/IColorEnhancement.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct ColorEnhancement : public IColorEnhancement {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
+    Return<bool> isEnabled() override;
+    Return<bool> setEnabled(bool enabled) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_COLORENHANCEMENT_H
diff --git a/legacymm/DisplayColorCalibration.cpp b/legacymm/DisplayColorCalibration.cpp
new file mode 100644
index 0000000..d652181
--- /dev/null
+++ b/legacymm/DisplayColorCalibration.cpp
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "DisplayColorCalibration.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
+Return<int32_t> DisplayColorCalibration::getMaxValue() {
+    // TODO implement
+    return int32_t {};
+}
+
+Return<int32_t> DisplayColorCalibration::getMinValue() {
+    // TODO implement
+    return int32_t {};
+}
+
+Return<void> DisplayColorCalibration::getCalibration(getCalibration_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>& rgb) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* /* name */) {
+    //return new DisplayColorCalibration();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/DisplayColorCalibration.h b/legacymm/DisplayColorCalibration.h
new file mode 100644
index 0000000..991b7cc
--- /dev/null
+++ b/legacymm/DisplayColorCalibration.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATION_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATION_H
+
+#include <vendor/lineage/livedisplay/2.0/IDisplayColorCalibration.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct DisplayColorCalibration : public IDisplayColorCalibration {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
+    Return<int32_t> getMaxValue() override;
+    Return<int32_t> getMinValue() override;
+    Return<void> getCalibration(getCalibration_cb _hidl_cb) override;
+    Return<bool> setCalibration(const hidl_vec<int32_t>& rgb) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYCOLORCALIBRATION_H
diff --git a/legacymm/DisplayModes.cpp b/legacymm/DisplayModes.cpp
new file mode 100644
index 0000000..770bc62
--- /dev/null
+++ b/legacymm/DisplayModes.cpp
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "DisplayModes.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
+Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> DisplayModes::getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> DisplayModes::getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IDisplayModes* HIDL_FETCH_IDisplayModes(const char* /* name */) {
+    //return new DisplayModes();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/DisplayModes.h b/legacymm/DisplayModes.h
new file mode 100644
index 0000000..f7a74fd
--- /dev/null
+++ b/legacymm/DisplayModes.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYMODES_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYMODES_H
+
+#include <vendor/lineage/livedisplay/2.0/IDisplayModes.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct DisplayModes : public IDisplayModes {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
+    Return<void> getDisplayModes(getDisplayModes_cb _hidl_cb) override;
+    Return<void> getCurrentDisplayMode(getCurrentDisplayMode_cb _hidl_cb) override;
+    Return<void> getDefaultDisplayMode(getDefaultDisplayMode_cb _hidl_cb) override;
+    Return<bool> setDisplayMode(int32_t modeID, bool makeDefault) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IDisplayModes* HIDL_FETCH_IDisplayModes(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_DISPLAYMODES_H
diff --git a/legacymm/PictureAdjustment.cpp b/legacymm/PictureAdjustment.cpp
new file mode 100644
index 0000000..773fac8
--- /dev/null
+++ b/legacymm/PictureAdjustment.cpp
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "PictureAdjustment.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
+Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<void> PictureAdjustment::getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) {
+    // TODO implement
+    return Void();
+}
+
+Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* /* name */) {
+    //return new PictureAdjustment();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/PictureAdjustment.h b/legacymm/PictureAdjustment.h
new file mode 100644
index 0000000..126ec70
--- /dev/null
+++ b/legacymm/PictureAdjustment.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
+
+#include <vendor/lineage/livedisplay/2.0/IPictureAdjustment.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct PictureAdjustment : public IPictureAdjustment {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
+    Return<void> getHueRange(getHueRange_cb _hidl_cb) override;
+    Return<void> getSaturationRange(getSaturationRange_cb _hidl_cb) override;
+    Return<void> getIntensityRange(getIntensityRange_cb _hidl_cb) override;
+    Return<void> getContrastRange(getContrastRange_cb _hidl_cb) override;
+    Return<void> getSaturationThresholdRange(getSaturationThresholdRange_cb _hidl_cb) override;
+    Return<void> getPictureAdjustment(getPictureAdjustment_cb _hidl_cb) override;
+    Return<void> getDefaultPictureAdjustment(getDefaultPictureAdjustment_cb _hidl_cb) override;
+    Return<bool> setPictureAdjustment(const ::vendor::lineage::livedisplay::V2_0::HSIC& hsic) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_PICTUREADJUSTMENT_H
diff --git a/legacymm/ReadingEnhancement.cpp b/legacymm/ReadingEnhancement.cpp
new file mode 100644
index 0000000..40eed42
--- /dev/null
+++ b/legacymm/ReadingEnhancement.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ReadingEnhancement.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
+Return<bool> ReadingEnhancement::isEnabled() {
+    // TODO implement
+    return bool {};
+}
+
+Return<bool> ReadingEnhancement::setEnabled(bool enabled) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* /* name */) {
+    //return new ReadingEnhancement();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/ReadingEnhancement.h b/legacymm/ReadingEnhancement.h
new file mode 100644
index 0000000..60db47f
--- /dev/null
+++ b/legacymm/ReadingEnhancement.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENT_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENT_H
+
+#include <vendor/lineage/livedisplay/2.0/IReadingEnhancement.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct ReadingEnhancement : public IReadingEnhancement {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
+    Return<bool> isEnabled() override;
+    Return<bool> setEnabled(bool enabled) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_READINGENHANCEMENT_H
diff --git a/legacymm/SunlightEnhancement.cpp b/legacymm/SunlightEnhancement.cpp
new file mode 100644
index 0000000..cc0aa5f
--- /dev/null
+++ b/legacymm/SunlightEnhancement.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "SunlightEnhancement.h"
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+// Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+Return<bool> SunlightEnhancement::isEnabled() {
+    // TODO implement
+    return bool {};
+}
+
+Return<bool> SunlightEnhancement::setEnabled(bool enabled) {
+    // TODO implement
+    return bool {};
+}
+
+
+// Methods from ::android::hidl::base::V1_0::IBase follow.
+
+//ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* /* name */) {
+    //return new SunlightEnhancement();
+//}
+//
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/legacymm/SunlightEnhancement.h b/legacymm/SunlightEnhancement.h
new file mode 100644
index 0000000..f0822f7
--- /dev/null
+++ b/legacymm/SunlightEnhancement.h
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENT_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENT_H
+
+#include <vendor/lineage/livedisplay/2.0/ISunlightEnhancement.h>
+#include <hidl/MQDescriptor.h>
+#include <hidl/Status.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace legacymm {
+
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct SunlightEnhancement : public ISunlightEnhancement {
+    // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
+    Return<bool> isEnabled() override;
+    Return<bool> setEnabled(bool enabled) override;
+
+    // Methods from ::android::hidl::base::V1_0::IBase follow.
+
+};
+
+// FIXME: most likely delete, this is only for passthrough implementations
+// extern "C" ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* name);
+
+}  // namespace legacymm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SUNLIGHTENHANCEMENT_H
diff --git a/qti/AdaptiveBacklight.cpp b/sdm/AdaptiveBacklight.cpp
similarity index 97%
rename from qti/AdaptiveBacklight.cpp
rename to sdm/AdaptiveBacklight.cpp
index 620f87c..3b67692 100644
--- a/qti/AdaptiveBacklight.cpp
+++ b/sdm/AdaptiveBacklight.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IAdaptiveBacklight follow.
 Return<bool> AdaptiveBacklight::isEnabled() {
@@ -40,7 +40,7 @@ Return<bool> AdaptiveBacklight::setEnabled(bool enabled) {
     //return new AdaptiveBacklight();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/AdaptiveBacklight.h b/sdm/AdaptiveBacklight.h
similarity index 98%
rename from qti/AdaptiveBacklight.h
rename to sdm/AdaptiveBacklight.h
index 4f01eb4..131b3bf 100644
--- a/qti/AdaptiveBacklight.h
+++ b/sdm/AdaptiveBacklight.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -47,7 +47,7 @@ struct AdaptiveBacklight : public IAdaptiveBacklight {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IAdaptiveBacklight* HIDL_FETCH_IAdaptiveBacklight(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/sdm/Android.bp b/sdm/Android.bp
new file mode 100644
index 0000000..34b3d2a
--- /dev/null
+++ b/sdm/Android.bp
@@ -0,0 +1,47 @@
+// Copyright (C) 2018-2019 The LineageOS Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+cc_library_shared {
+    // FIXME: this should only be -impl for a passthrough hal.
+    // In most cases, to convert this to a binderized implementation, you should:
+    // - change '-impl' to '-service' here and make it a cc_binary instead of a
+    //   cc_library_shared.
+    // - add a *.rc file for this module.
+    // - delete HIDL_FETCH_I* functions.
+    // - call configureRpcThreadpool and registerAsService on the instance.
+    // You may also want to append '-impl/-service' with a specific identifier like
+    // '-vendor' or '-<hardware identifier>' etc to distinguish it.
+    name: "vendor.lineage.livedisplay@2.0-impl",
+    relative_install_path: "hw",
+    // FIXME: this should be 'vendor: true' for modules that will eventually be
+    // on AOSP.
+    proprietary: true,
+    srcs: [
+        "AdaptiveBacklight.cpp",
+        "AutoContrast.cpp",
+        "ColorBalance.cpp",
+        "ColorEnhancement.cpp",
+        "DisplayColorCalibration.cpp",
+        "DisplayModes.cpp",
+        "PictureAdjustment.cpp",
+        "ReadingEnhancement.cpp",
+        "SunlightEnhancement.cpp",
+    ],
+    shared_libs: [
+        "libhidlbase",
+        "libhidltransport",
+        "libutils",
+        "vendor.lineage.livedisplay@2.0",
+    ],
+}
diff --git a/qti/AutoContrast.cpp b/sdm/AutoContrast.cpp
similarity index 97%
rename from qti/AutoContrast.cpp
rename to sdm/AutoContrast.cpp
index 2adf0b9..98766ab 100644
--- a/qti/AutoContrast.cpp
+++ b/sdm/AutoContrast.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IAutoContrast follow.
 Return<bool> AutoContrast::isEnabled() {
@@ -40,7 +40,7 @@ Return<bool> AutoContrast::setEnabled(bool enabled) {
     //return new AutoContrast();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/AutoContrast.h b/sdm/AutoContrast.h
similarity index 97%
rename from qti/AutoContrast.h
rename to sdm/AutoContrast.h
index b44123f..969da8b 100644
--- a/qti/AutoContrast.h
+++ b/sdm/AutoContrast.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -47,7 +47,7 @@ struct AutoContrast : public IAutoContrast {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IAutoContrast* HIDL_FETCH_IAutoContrast(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ColorBalance.cpp b/sdm/ColorBalance.cpp
similarity index 97%
rename from qti/ColorBalance.cpp
rename to sdm/ColorBalance.cpp
index 50f2ff7..33b116c 100644
--- a/qti/ColorBalance.cpp
+++ b/sdm/ColorBalance.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IColorBalance follow.
 Return<void> ColorBalance::getColorBalanceRange(getColorBalanceRange_cb _hidl_cb) {
@@ -45,7 +45,7 @@ Return<bool> ColorBalance::setColorBalance(int32_t value) {
     //return new ColorBalance();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ColorBalance.h b/sdm/ColorBalance.h
similarity index 98%
rename from qti/ColorBalance.h
rename to sdm/ColorBalance.h
index d03b28e..bce2699 100644
--- a/qti/ColorBalance.h
+++ b/sdm/ColorBalance.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -48,7 +48,7 @@ struct ColorBalance : public IColorBalance {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IColorBalance* HIDL_FETCH_IColorBalance(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ColorEnhancement.cpp b/sdm/ColorEnhancement.cpp
similarity index 97%
rename from qti/ColorEnhancement.cpp
rename to sdm/ColorEnhancement.cpp
index 7ea7560..c87950a 100644
--- a/qti/ColorEnhancement.cpp
+++ b/sdm/ColorEnhancement.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IColorEnhancement follow.
 Return<bool> ColorEnhancement::isEnabled() {
@@ -40,7 +40,7 @@ Return<bool> ColorEnhancement::setEnabled(bool enabled) {
     //return new ColorEnhancement();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ColorEnhancement.h b/sdm/ColorEnhancement.h
similarity index 98%
rename from qti/ColorEnhancement.h
rename to sdm/ColorEnhancement.h
index ae09059..85799c1 100644
--- a/qti/ColorEnhancement.h
+++ b/sdm/ColorEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -47,7 +47,7 @@ struct ColorEnhancement : public IColorEnhancement {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IColorEnhancement* HIDL_FETCH_IColorEnhancement(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/DisplayColorCalibration.cpp b/sdm/DisplayColorCalibration.cpp
similarity index 97%
rename from qti/DisplayColorCalibration.cpp
rename to sdm/DisplayColorCalibration.cpp
index f2ea2e8..37c3f25 100644
--- a/qti/DisplayColorCalibration.cpp
+++ b/sdm/DisplayColorCalibration.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayColorCalibration follow.
 Return<int32_t> DisplayColorCalibration::getMaxValue() {
@@ -50,7 +50,7 @@ Return<bool> DisplayColorCalibration::setCalibration(const hidl_vec<int32_t>& rg
     //return new DisplayColorCalibration();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/DisplayColorCalibration.h b/sdm/DisplayColorCalibration.h
similarity index 98%
rename from qti/DisplayColorCalibration.h
rename to sdm/DisplayColorCalibration.h
index da2cf77..dfbf1ed 100644
--- a/qti/DisplayColorCalibration.h
+++ b/sdm/DisplayColorCalibration.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -49,7 +49,7 @@ struct DisplayColorCalibration : public IDisplayColorCalibration {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IDisplayColorCalibration* HIDL_FETCH_IDisplayColorCalibration(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/DisplayModes.cpp b/sdm/DisplayModes.cpp
similarity index 97%
rename from qti/DisplayModes.cpp
rename to sdm/DisplayModes.cpp
index c2f00c7..11c6738 100644
--- a/qti/DisplayModes.cpp
+++ b/sdm/DisplayModes.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IDisplayModes follow.
 Return<void> DisplayModes::getDisplayModes(getDisplayModes_cb _hidl_cb) {
@@ -50,7 +50,7 @@ Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
     //return new DisplayModes();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/DisplayModes.h b/sdm/DisplayModes.h
similarity index 98%
rename from qti/DisplayModes.h
rename to sdm/DisplayModes.h
index 5c52d8a..ce68728 100644
--- a/qti/DisplayModes.h
+++ b/sdm/DisplayModes.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -49,7 +49,7 @@ struct DisplayModes : public IDisplayModes {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IDisplayModes* HIDL_FETCH_IDisplayModes(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/PictureAdjustment.cpp b/sdm/PictureAdjustment.cpp
similarity index 98%
rename from qti/PictureAdjustment.cpp
rename to sdm/PictureAdjustment.cpp
index bd9fc81..8f832d2 100644
--- a/qti/PictureAdjustment.cpp
+++ b/sdm/PictureAdjustment.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
 Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
@@ -70,7 +70,7 @@ Return<bool> PictureAdjustment::setPictureAdjustment(const ::vendor::lineage::li
     //return new PictureAdjustment();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/PictureAdjustment.h b/sdm/PictureAdjustment.h
similarity index 98%
rename from qti/PictureAdjustment.h
rename to sdm/PictureAdjustment.h
index aa9fa13..2e79964 100644
--- a/qti/PictureAdjustment.h
+++ b/sdm/PictureAdjustment.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -53,7 +53,7 @@ struct PictureAdjustment : public IPictureAdjustment {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IPictureAdjustment* HIDL_FETCH_IPictureAdjustment(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ReadingEnhancement.cpp b/sdm/ReadingEnhancement.cpp
similarity index 97%
rename from qti/ReadingEnhancement.cpp
rename to sdm/ReadingEnhancement.cpp
index f15c808..7bb3217 100644
--- a/qti/ReadingEnhancement.cpp
+++ b/sdm/ReadingEnhancement.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IReadingEnhancement follow.
 Return<bool> ReadingEnhancement::isEnabled() {
@@ -40,7 +40,7 @@ Return<bool> ReadingEnhancement::setEnabled(bool enabled) {
     //return new ReadingEnhancement();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/ReadingEnhancement.h b/sdm/ReadingEnhancement.h
similarity index 98%
rename from qti/ReadingEnhancement.h
rename to sdm/ReadingEnhancement.h
index 7797893..4bb0ea7 100644
--- a/qti/ReadingEnhancement.h
+++ b/sdm/ReadingEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -47,7 +47,7 @@ struct ReadingEnhancement : public IReadingEnhancement {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" IReadingEnhancement* HIDL_FETCH_IReadingEnhancement(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/SunlightEnhancement.cpp b/sdm/SunlightEnhancement.cpp
similarity index 97%
rename from qti/SunlightEnhancement.cpp
rename to sdm/SunlightEnhancement.cpp
index c73f68a..3fe2a50 100644
--- a/qti/SunlightEnhancement.cpp
+++ b/sdm/SunlightEnhancement.cpp
@@ -20,7 +20,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::ISunlightEnhancement follow.
 Return<bool> SunlightEnhancement::isEnabled() {
@@ -40,7 +40,7 @@ Return<bool> SunlightEnhancement::setEnabled(bool enabled) {
     //return new SunlightEnhancement();
 //}
 //
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
diff --git a/qti/SunlightEnhancement.h b/sdm/SunlightEnhancement.h
similarity index 98%
rename from qti/SunlightEnhancement.h
rename to sdm/SunlightEnhancement.h
index 5ca8b93..50f735f 100644
--- a/qti/SunlightEnhancement.h
+++ b/sdm/SunlightEnhancement.h
@@ -25,7 +25,7 @@ namespace vendor {
 namespace lineage {
 namespace livedisplay {
 namespace V2_0 {
-namespace qti {
+namespace sdm {
 
 using ::android::hardware::hidl_array;
 using ::android::hardware::hidl_memory;
@@ -47,7 +47,7 @@ struct SunlightEnhancement : public ISunlightEnhancement {
 // FIXME: most likely delete, this is only for passthrough implementations
 // extern "C" ISunlightEnhancement* HIDL_FETCH_ISunlightEnhancement(const char* name);
 
-}  // namespace qti
+}  // namespace sdm
 }  // namespace V2_0
 }  // namespace livedisplay
 }  // namespace lineage
-- 
2.17.1

