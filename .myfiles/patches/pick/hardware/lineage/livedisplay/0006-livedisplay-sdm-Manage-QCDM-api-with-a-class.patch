From 17a3a98af0e05e5b9d3d019f28b89d360a5e244a Mon Sep 17 00:00:00 2001
From: dianlujitao <dianlujitao@lineageos.org>
Date: Mon, 4 Feb 2019 11:35:03 +0800
Subject: [PATCH 6/8] livedisplay: sdm: Manage QCDM api with a class

Change-Id: I3d3df3e086ead24829f3a0c8a8d1eb5d078f62a8
---
 sdm/Android.bp            |   1 +
 sdm/DisplayModes.cpp      |  81 +++++-------------
 sdm/DisplayModes.h        |  14 +--
 sdm/PictureAdjustment.cpp | 127 +++++++++++-----------------
 sdm/PictureAdjustment.h   |  14 ++-
 sdm/SDMController.cpp     | 173 ++++++++++++++++++++++++++++++++++++++
 sdm/SDMController.h       | 102 ++++++++++++++++++++++
 sdm/service.cpp           |  49 +++--------
 8 files changed, 367 insertions(+), 194 deletions(-)
 create mode 100644 sdm/SDMController.cpp
 create mode 100644 sdm/SDMController.h

diff --git a/sdm/Android.bp b/sdm/Android.bp
index 29d9812..6c9749c 100644
--- a/sdm/Android.bp
+++ b/sdm/Android.bp
@@ -20,6 +20,7 @@ cc_defaults {
         "AdaptiveBacklight.cpp",
         "DisplayModes.cpp",
         "PictureAdjustment.cpp",
+        "SDMController.cpp",
         "Utils.cpp",
         "service.cpp",
     ],
diff --git a/sdm/DisplayModes.cpp b/sdm/DisplayModes.cpp
index ac431f8..0b90276 100644
--- a/sdm/DisplayModes.cpp
+++ b/sdm/DisplayModes.cpp
@@ -29,31 +29,8 @@ namespace livedisplay {
 namespace V2_0 {
 namespace sdm {
 
-DisplayModes::DisplayModes(void* libHandle, uint64_t cookie) {
-    mLibHandle = libHandle;
-    mCookie = cookie;
-    disp_api_get_feature_version =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, void*, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_feature_version"));
-    disp_api_get_num_display_modes =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t, int32_t*, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_num_display_modes"));
-    disp_api_get_display_modes =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t, void*, int32_t, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_display_modes"));
-    disp_api_get_active_display_mode =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t*, uint32_t*, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_active_display_mode"));
-    disp_api_set_active_display_mode =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t, uint32_t)>(
-            dlsym(mLibHandle, "disp_api_set_active_display_mode"));
-    disp_api_get_default_display_mode =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t*, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_default_display_mode"));
-    disp_api_set_default_display_mode =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, int32_t, uint32_t)>(
-            dlsym(mLibHandle, "disp_api_set_default_display_mode"));
-
+DisplayModes::DisplayModes(std::shared_ptr<SDMController> controller, uint64_t cookie)
+    : mController(std::move(controller)), mCookie(cookie) {
     if (isSupported()) {
         DisplayMode mode = getDefaultDisplayModeInternal();
         if (mode.id > 0) {
@@ -72,8 +49,7 @@ bool DisplayModes::isSupported() {
         goto out;
     }
 
-    if (disp_api_get_feature_version == nullptr ||
-        disp_api_get_feature_version(mCookie, DISPLAY_MODES_FEATURE, &version, &flags) != 0) {
+    if (mController->get_feature_version(mCookie, DISPLAY_MODES_FEATURE, &version, &flags) != 0) {
         supported = 0;
         goto out;
     }
@@ -83,8 +59,7 @@ bool DisplayModes::isSupported() {
         goto out;
     }
 
-    if (disp_api_get_num_display_modes == nullptr ||
-        disp_api_get_num_display_modes(mCookie, 0, 0, &count, &flags) != 0) {
+    if (mController->get_num_display_modes(mCookie, 0, 0, &count, &flags) != 0) {
         supported = 0;
         goto out;
     }
@@ -99,31 +74,27 @@ std::vector<DisplayMode> DisplayModes::getDisplayModesInternal() {
     int32_t count = 0;
     uint32_t flags = 0;
 
-    if (disp_api_get_num_display_modes == nullptr ||
-        disp_api_get_num_display_modes(mCookie, 0, 0, &count, &flags) != 0) {
+    if (mController->get_num_display_modes(mCookie, 0, 0, &count, &flags) != 0 || count == 0) {
         return modes;
     }
 
-    if (disp_api_get_display_modes != nullptr) {
-        sdm_disp_mode* tmp = new sdm_disp_mode[count];
-        for (int i = 0; i < count; i++) {
-            tmp[i].id = -1;
-            tmp[i].name = new char[128];
-            tmp[i].len = 128;
-        }
-
-        if (disp_api_get_display_modes(mCookie, 0, 0, tmp, count, &flags) == 0) {
-            for (int i = 0; i < count; i++) {
-                modes.push_back(DisplayMode{tmp[i].id, std::string(tmp[i].name)});
-            }
-        }
+    sdm_disp_mode* tmp = new sdm_disp_mode[count];
+    for (int i = 0; i < count; i++) {
+        tmp[i].id = -1;
+        tmp[i].name = new char[128];
+        tmp[i].len = 128;
+    }
 
+    if (mController->get_display_modes(mCookie, 0, 0, tmp, count, &flags) == 0) {
         for (int i = 0; i < count; i++) {
-            delete[] tmp[i].name;
+            modes.push_back(DisplayMode{tmp[i].id, std::string(tmp[i].name)});
         }
+    }
 
-        delete[] tmp;
+    for (int i = 0; i < count; i++) {
+        delete[] tmp[i].name;
     }
+    delete[] tmp;
 
     return modes;
 }
@@ -144,10 +115,8 @@ DisplayMode DisplayModes::getCurrentDisplayModeInternal() {
     int32_t id = 0;
     uint32_t mask = 0, flags = 0;
 
-    if (disp_api_get_active_display_mode != nullptr) {
-        if (disp_api_get_active_display_mode(mCookie, 0, &id, &mask, &flags) == 0 && id >= 0) {
-            return getDisplayModeById(id);
-        }
+    if (mController->get_active_display_mode(mCookie, 0, &id, &mask, &flags) == 0 && id >= 0) {
+        return getDisplayModeById(id);
     }
 
     return DisplayMode{-1, ""};
@@ -165,10 +134,8 @@ DisplayMode DisplayModes::getDefaultDisplayModeInternal() {
         }
     }
 
-    if (disp_api_get_default_display_mode != nullptr) {
-        if (disp_api_get_default_display_mode(mCookie, 0, &id, &flags) == 0 && id >= 0) {
-            return getDisplayModeById(id);
-        }
+    if (mController->get_default_display_mode(mCookie, 0, &id, &flags) == 0 && id >= 0) {
+        return getDisplayModeById(id);
     }
 
     return DisplayMode{-1, ""};
@@ -202,8 +169,7 @@ Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
         return false;
     }
 
-    if (disp_api_set_active_display_mode == nullptr ||
-        disp_api_set_active_display_mode(mCookie, 0, modeID, 0)) {
+    if (mController->set_active_display_mode(mCookie, 0, modeID, 0)) {
         return false;
     }
 
@@ -218,8 +184,7 @@ Return<bool> DisplayModes::setDisplayMode(int32_t modeID, bool makeDefault) {
             }
         }
 
-        if (disp_api_set_default_display_mode == nullptr ||
-            disp_api_set_default_display_mode(mCookie, 0, modeID, 0)) {
+        if (makeDefault && mController->set_default_display_mode(mCookie, 0, modeID, 0)) {
             return false;
         }
     }
diff --git a/sdm/DisplayModes.h b/sdm/DisplayModes.h
index 0dc8904..2d7309c 100644
--- a/sdm/DisplayModes.h
+++ b/sdm/DisplayModes.h
@@ -19,6 +19,8 @@
 
 #include <vendor/lineage/livedisplay/2.0/IDisplayModes.h>
 
+#include "SDMController.h"
+
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
@@ -30,7 +32,7 @@ using ::android::hardware::Void;
 
 class DisplayModes : public IDisplayModes {
    public:
-    DisplayModes(void* libHandle, uint64_t cookie);
+    DisplayModes(std::shared_ptr<SDMController> controller, uint64_t cookie);
 
     bool isSupported();
 
@@ -41,17 +43,9 @@ class DisplayModes : public IDisplayModes {
     Return<bool> setDisplayMode(int32_t modeID, bool makeDefault) override;
 
    private:
-    void* mLibHandle;
+    std::shared_ptr<SDMController> mController;
     uint64_t mCookie;
 
-    int32_t (*disp_api_get_feature_version)(uint64_t, uint32_t, void*, uint32_t*);
-    int32_t (*disp_api_get_num_display_modes)(uint64_t, uint32_t, int32_t, int32_t*, uint32_t*);
-    int32_t (*disp_api_get_display_modes)(uint64_t, uint32_t, int32_t, void*, int32_t, uint32_t*);
-    int32_t (*disp_api_get_active_display_mode)(uint64_t, uint32_t, int32_t*, uint32_t*, uint32_t*);
-    int32_t (*disp_api_set_active_display_mode)(uint64_t, uint32_t, int32_t, uint32_t);
-    int32_t (*disp_api_get_default_display_mode)(uint64_t, uint32_t, int32_t*, uint32_t*);
-    int32_t (*disp_api_set_default_display_mode)(uint64_t, uint32_t, int32_t, uint32_t);
-
     std::vector<DisplayMode> getDisplayModesInternal();
     DisplayMode getDisplayModeById(int32_t id);
     DisplayMode getCurrentDisplayModeInternal();
diff --git a/sdm/PictureAdjustment.cpp b/sdm/PictureAdjustment.cpp
index 4fa7313..b754f50 100644
--- a/sdm/PictureAdjustment.cpp
+++ b/sdm/PictureAdjustment.cpp
@@ -28,28 +28,15 @@ namespace sdm {
 
 static sp<PictureAdjustment> sInstance;
 
-PictureAdjustment::PictureAdjustment(void* libHandle, uint64_t cookie) {
+PictureAdjustment::PictureAdjustment(std::shared_ptr<SDMController> controller, uint64_t cookie)
+    : mController(std::move(controller)), mCookie(cookie) {
     sInstance = this;
-
-    mLibHandle = libHandle;
-    mCookie = cookie;
-    disp_api_get_feature_version =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, void*, uint32_t*)>(
-            dlsym(mLibHandle, "disp_api_get_feature_version"));
-    disp_api_get_global_pa_range = reinterpret_cast<int32_t (*)(uint64_t, uint32_t, void*)>(
-        dlsym(mLibHandle, "disp_api_get_global_pa_range"));
-    disp_api_get_global_pa_config =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, uint32_t*, void*)>(
-            dlsym(mLibHandle, "disp_api_get_global_pa_config"));
-    disp_api_set_global_pa_config =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t, uint32_t, void*)>(
-            dlsym(mLibHandle, "disp_api_set_global_pa_config"));
     memset(&mDefaultPictureAdjustment, 0, sizeof(HSIC));
 }
 
 bool PictureAdjustment::isSupported() {
-    sdm_feature_version version{};
-    hsic_ranges r{};
+    sdm_feature_version version;
+    hsic_ranges r;
     uint32_t flags = 0;
     static int supported = -1;
 
@@ -57,8 +44,8 @@ bool PictureAdjustment::isSupported() {
         goto out;
     }
 
-    if (disp_api_get_feature_version == nullptr ||
-        disp_api_get_feature_version(mCookie, PICTURE_ADJUSTMENT_FEATURE, &version, &flags) != 0) {
+    if (mController->get_feature_version(mCookie, PICTURE_ADJUSTMENT_FEATURE, &version, &flags) !=
+        0) {
         supported = 0;
         goto out;
     }
@@ -68,8 +55,7 @@ bool PictureAdjustment::isSupported() {
         goto out;
     }
 
-    if (disp_api_get_global_pa_range == nullptr ||
-        disp_api_get_global_pa_range(mCookie, 0, &r) != 0) {
+    if (mController->get_global_pa_range(mCookie, 0, &r) != 0) {
         supported = 0;
         goto out;
     }
@@ -82,18 +68,15 @@ out:
 }
 
 HSIC PictureAdjustment::getPictureAdjustmentInternal() {
-    hsic_config config{};
+    hsic_config config;
     uint32_t enable = 0;
 
-    if (disp_api_get_global_pa_config != nullptr) {
-        if (disp_api_get_global_pa_config(mCookie, 0, &enable, &config) == 0) {
-            return HSIC{static_cast<float>(config.data.hue), config.data.saturation,
-                        config.data.intensity, config.data.contrast,
-                        config.data.saturationThreshold};
-        }
+    if (mController->get_global_pa_config(mCookie, 0, &enable, &config) == 0) {
+        return HSIC{static_cast<float>(config.data.hue), config.data.saturation,
+                    config.data.intensity, config.data.contrast, config.data.saturationThreshold};
     }
 
-    return HSIC{};
+    return HSIC();
 }
 
 void PictureAdjustment::updateDefaultPictureAdjustment() {
@@ -104,15 +87,13 @@ void PictureAdjustment::updateDefaultPictureAdjustment() {
 
 // Methods from ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment follow.
 Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
-    FloatRange range{};
-    hsic_ranges r{};
-
-    if (disp_api_get_global_pa_range != nullptr) {
-        if (disp_api_get_global_pa_range(mCookie, 0, &r) == 0) {
-            range.max = r.hue.max;
-            range.min = r.hue.min;
-            range.step = r.hue.step;
-        }
+    FloatRange range;
+    hsic_ranges r;
+
+    if (mController->get_global_pa_range(mCookie, 0, &r) == 0) {
+        range.max = r.hue.max;
+        range.min = r.hue.min;
+        range.step = r.hue.step;
     }
 
     _hidl_cb(range);
@@ -120,15 +101,13 @@ Return<void> PictureAdjustment::getHueRange(getHueRange_cb _hidl_cb) {
 }
 
 Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb _hidl_cb) {
-    FloatRange range{};
-    hsic_ranges r{};
-
-    if (disp_api_get_global_pa_range != nullptr) {
-        if (disp_api_get_global_pa_range(mCookie, 0, &r) == 0) {
-            range.max = r.saturation.max;
-            range.min = r.saturation.min;
-            range.step = r.saturation.step;
-        }
+    FloatRange range;
+    hsic_ranges r;
+
+    if (mController->get_global_pa_range(mCookie, 0, &r) == 0) {
+        range.max = r.saturation.max;
+        range.min = r.saturation.min;
+        range.step = r.saturation.step;
     }
 
     _hidl_cb(range);
@@ -136,15 +115,13 @@ Return<void> PictureAdjustment::getSaturationRange(getSaturationRange_cb _hidl_c
 }
 
 Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb _hidl_cb) {
-    FloatRange range{};
-    hsic_ranges r{};
-
-    if (disp_api_get_global_pa_range != nullptr) {
-        if (disp_api_get_global_pa_range(mCookie, 0, &r) == 0) {
-            range.max = r.intensity.max;
-            range.min = r.intensity.min;
-            range.step = r.intensity.step;
-        }
+    FloatRange range;
+    hsic_ranges r;
+
+    if (mController->get_global_pa_range(mCookie, 0, &r) == 0) {
+        range.max = r.intensity.max;
+        range.min = r.intensity.min;
+        range.step = r.intensity.step;
     }
 
     _hidl_cb(range);
@@ -152,15 +129,13 @@ Return<void> PictureAdjustment::getIntensityRange(getIntensityRange_cb _hidl_cb)
 }
 
 Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb _hidl_cb) {
-    FloatRange range{};
-    hsic_ranges r{};
-
-    if (disp_api_get_global_pa_range != nullptr) {
-        if (disp_api_get_global_pa_range(mCookie, 0, &r) == 0) {
-            range.max = r.contrast.max;
-            range.min = r.contrast.min;
-            range.step = r.contrast.step;
-        }
+    FloatRange range;
+    hsic_ranges r;
+
+    if (mController->get_global_pa_range(mCookie, 0, &r) == 0) {
+        range.max = r.contrast.max;
+        range.min = r.contrast.min;
+        range.step = r.contrast.step;
     }
 
     _hidl_cb(range);
@@ -169,15 +144,13 @@ Return<void> PictureAdjustment::getContrastRange(getContrastRange_cb _hidl_cb) {
 
 Return<void> PictureAdjustment::getSaturationThresholdRange(
     getSaturationThresholdRange_cb _hidl_cb) {
-    FloatRange range{};
-    hsic_ranges r{};
-
-    if (disp_api_get_global_pa_range != nullptr) {
-        if (disp_api_get_global_pa_range(mCookie, 0, &r) == 0) {
-            range.max = r.saturationThreshold.max;
-            range.min = r.saturationThreshold.min;
-            range.step = r.saturationThreshold.step;
-        }
+    FloatRange range;
+    hsic_ranges r;
+
+    if (mController->get_global_pa_range(mCookie, 0, &r) == 0) {
+        range.max = r.saturationThreshold.max;
+        range.min = r.saturationThreshold.min;
+        range.step = r.saturationThreshold.step;
     }
 
     _hidl_cb(range);
@@ -201,11 +174,7 @@ Return<bool> PictureAdjustment::setPictureAdjustment(
                           {static_cast<int32_t>(hsic.hue), hsic.saturation, hsic.intensity,
                            hsic.contrast, hsic.saturationThreshold}};
 
-    if (disp_api_set_global_pa_config != nullptr) {
-        return disp_api_set_global_pa_config(mCookie, 0, 1, &config) == 0;
-    }
-
-    return false;
+    return mController->set_global_pa_config(mCookie, 0, 1, &config) == 0;
 }
 
 }  // namespace sdm
diff --git a/sdm/PictureAdjustment.h b/sdm/PictureAdjustment.h
index 6eec20c..c2e4902 100644
--- a/sdm/PictureAdjustment.h
+++ b/sdm/PictureAdjustment.h
@@ -19,6 +19,8 @@
 
 #include <vendor/lineage/livedisplay/2.0/IPictureAdjustment.h>
 
+#include "SDMController.h"
+
 namespace vendor {
 namespace lineage {
 namespace livedisplay {
@@ -31,7 +33,7 @@ using ::android::hardware::Void;
 
 class PictureAdjustment : public IPictureAdjustment {
    public:
-    PictureAdjustment(void* libHandle, uint64_t cookie);
+    PictureAdjustment(std::shared_ptr<SDMController> controller, uint64_t cookie);
 
     bool isSupported();
 
@@ -49,17 +51,11 @@ class PictureAdjustment : public IPictureAdjustment {
     static void updateDefaultPictureAdjustment();
 
    private:
-    void* mLibHandle;
+    std::shared_ptr<SDMController> mController;
     uint64_t mCookie;
-
-    int32_t (*disp_api_get_feature_version)(uint64_t, uint32_t, void*, uint32_t*);
-    int32_t (*disp_api_get_global_pa_range)(uint64_t, uint32_t, void*);
-    int32_t (*disp_api_get_global_pa_config)(uint64_t, uint32_t, uint32_t*, void*);
-    int32_t (*disp_api_set_global_pa_config)(uint64_t, uint32_t, uint32_t, void*);
+    HSIC mDefaultPictureAdjustment;
 
     HSIC getPictureAdjustmentInternal();
-
-    HSIC mDefaultPictureAdjustment;
 };
 
 }  // namespace sdm
diff --git a/sdm/SDMController.cpp b/sdm/SDMController.cpp
new file mode 100644
index 0000000..049890a
--- /dev/null
+++ b/sdm/SDMController.cpp
@@ -0,0 +1,173 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <android-base/logging.h>
+#include <dlfcn.h>
+
+#include "SDMController.h"
+
+#define LOAD_SDM_FUNCTION(name) \
+    mFn_##name = loadFunction<disp_api_##name>(mHandle, "disp_api_" #name);
+
+#define CLOSE_SDM_FUNCTION(name) mFn_##name = nullptr;
+
+#define FOR_EACH_FUNCTION(MACRO)          \
+    MACRO(init)                           \
+    MACRO(deinit)                         \
+    MACRO(get_global_color_balance_range) \
+    MACRO(set_global_color_balance)       \
+    MACRO(get_global_color_balance)       \
+    MACRO(get_num_display_modes)          \
+    MACRO(get_display_modes)              \
+    MACRO(get_active_display_mode)        \
+    MACRO(set_active_display_mode)        \
+    MACRO(set_default_display_mode)       \
+    MACRO(get_default_display_mode)       \
+    MACRO(get_global_pa_range)            \
+    MACRO(get_global_pa_config)           \
+    MACRO(set_global_pa_config)           \
+    MACRO(get_feature_version)
+
+#define CONTROLLER_CHECK(function, ...)    \
+    if (mFn_##function == nullptr) {       \
+        return -1;                         \
+    }                                      \
+    int err = mFn_##function(__VA_ARGS__); \
+    if (err != 0) {                        \
+        return err;                        \
+    }                                      \
+    return 0;
+
+namespace {
+#ifdef LIVES_IN_SYSTEM
+constexpr char kFilename[] = "libsdm-disp-apis.so";
+#else
+constexpr char kFilename[] = "libsdm-disp-vndapis.so";
+#endif
+
+template <typename Function>
+Function loadFunction(std::shared_ptr<void> handle, const char* name) {
+    void* fn = dlsym(handle.get(), name);
+    if (fn == nullptr) {
+        LOG(ERROR) << "loadFunction -- failed to load function " << name;
+    }
+    return reinterpret_cast<Function>(fn);
+}
+}  // anonymous namespace
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace sdm {
+
+SDMController::SDMController() {
+    std::shared_ptr<void> handle(dlopen(kFilename, RTLD_NOW), [this](void* p) {
+        FOR_EACH_FUNCTION(CLOSE_SDM_FUNCTION)
+        if (p != nullptr) {
+            int err = dlclose(p);
+            p = nullptr;
+            if (err != 0) {
+                LOG(ERROR) << "DLCLOSE failed for " << kFilename;
+            }
+        }
+    });
+    if (handle == nullptr) {
+        LOG(ERROR) << "DLOPEN failed for " << kFilename << " (" << dlerror() << ")";
+        return;
+    }
+    mHandle = handle;
+
+    FOR_EACH_FUNCTION(LOAD_SDM_FUNCTION)
+}
+
+int32_t SDMController::init(uint64_t* hctx, uint32_t flags) {
+    CONTROLLER_CHECK(init, hctx, flags);
+}
+
+int32_t SDMController::deinit(uint64_t hctx, uint32_t flags) {
+    CONTROLLER_CHECK(deinit, hctx, flags);
+}
+
+int32_t SDMController::get_global_color_balance_range(uint64_t hctx, uint32_t disp_id,
+                                                      void* range) {
+    CONTROLLER_CHECK(get_global_color_balance_range, hctx, disp_id, range);
+}
+
+int32_t SDMController::set_global_color_balance(uint64_t hctx, uint32_t disp_id, int32_t warmness,
+                                                uint32_t flags) {
+    CONTROLLER_CHECK(set_global_color_balance, hctx, disp_id, warmness, flags);
+}
+
+int32_t SDMController::get_global_color_balance(uint64_t hctx, uint32_t disp_id, int32_t* warmness,
+                                                uint32_t* flags) {
+    CONTROLLER_CHECK(get_global_color_balance, hctx, disp_id, warmness, flags);
+}
+
+int32_t SDMController::get_num_display_modes(uint64_t hctx, uint32_t disp_id, uint32_t mode_type,
+                                             int32_t* mode_cnt, uint32_t* flags) {
+    CONTROLLER_CHECK(get_num_display_modes, hctx, disp_id, mode_type, mode_cnt, flags);
+}
+
+int32_t SDMController::get_display_modes(uint64_t hctx, uint32_t disp_id, uint32_t mode_type,
+                                         void* modes, int32_t mode_cnt, uint32_t* flags) {
+    CONTROLLER_CHECK(get_display_modes, hctx, disp_id, mode_type, modes, mode_cnt, flags);
+}
+
+int32_t SDMController::get_active_display_mode(uint64_t hctx, uint32_t disp_id, int32_t* mode_id,
+                                               uint32_t* mask, uint32_t* flags) {
+    CONTROLLER_CHECK(get_active_display_mode, hctx, disp_id, mode_id, mask, flags);
+}
+
+int32_t SDMController::set_active_display_mode(uint64_t hctx, uint32_t disp_id, int32_t mode_id,
+                                               uint32_t flags) {
+    CONTROLLER_CHECK(set_active_display_mode, hctx, disp_id, mode_id, flags);
+}
+
+int32_t SDMController::set_default_display_mode(uint64_t hctx, uint32_t disp_id, int32_t mode_id,
+                                                uint32_t flags) {
+    CONTROLLER_CHECK(set_default_display_mode, hctx, disp_id, mode_id, flags);
+}
+
+int32_t SDMController::get_default_display_mode(uint64_t hctx, uint32_t disp_id, int32_t* mode_id,
+                                                uint32_t* flags) {
+    CONTROLLER_CHECK(get_default_display_mode, hctx, disp_id, mode_id, flags);
+}
+
+int32_t SDMController::get_global_pa_range(uint64_t hctx, uint32_t disp_id, void* range) {
+    CONTROLLER_CHECK(get_global_pa_range, hctx, disp_id, range);
+}
+
+int32_t SDMController::get_global_pa_config(uint64_t hctx, uint32_t disp_id, uint32_t* enable,
+                                            void* cfg) {
+    CONTROLLER_CHECK(get_global_pa_config, hctx, disp_id, enable, cfg);
+}
+
+int32_t SDMController::set_global_pa_config(uint64_t hctx, uint32_t disp_id, uint32_t enable,
+                                            void* cfg) {
+    CONTROLLER_CHECK(set_global_pa_config, hctx, disp_id, enable, cfg);
+}
+
+int32_t SDMController::get_feature_version(uint64_t hctx, uint32_t feature_id, void* ver,
+                                           uint32_t* flags) {
+    CONTROLLER_CHECK(get_feature_version, hctx, feature_id, ver, flags);
+}
+
+}  // namespace sdm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
diff --git a/sdm/SDMController.h b/sdm/SDMController.h
new file mode 100644
index 0000000..b0a1e3d
--- /dev/null
+++ b/sdm/SDMController.h
@@ -0,0 +1,102 @@
+/*
+ * Copyright (C) 2018-2019 The LineageOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SDMCONTROLLER_H
+#define VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SDMCONTROLLER_H
+
+#include <memory>
+
+#include <stdint.h>
+
+namespace vendor {
+namespace lineage {
+namespace livedisplay {
+namespace V2_0 {
+namespace sdm {
+
+class SDMController {
+   public:
+    SDMController();
+
+    int32_t init(uint64_t* hctx, uint32_t flags);
+    int32_t deinit(uint64_t hctx, uint32_t flags);
+    int32_t get_global_color_balance_range(uint64_t hctx, uint32_t disp_id, void* range);
+    int32_t set_global_color_balance(uint64_t hctx, uint32_t disp_id, int32_t warmness,
+                                     uint32_t flags);
+    int32_t get_global_color_balance(uint64_t hctx, uint32_t disp_id, int32_t* warmness,
+                                     uint32_t* flags);
+    int32_t get_num_display_modes(uint64_t hctx, uint32_t disp_id, uint32_t mode_type,
+                                  int32_t* mode_cnt, uint32_t* flags);
+    int32_t get_display_modes(uint64_t hctx, uint32_t disp_id, uint32_t mode_type, void* modes,
+                              int32_t mode_cnt, uint32_t* flags);
+    int32_t get_active_display_mode(uint64_t hctx, uint32_t disp_id, int32_t* mode_id,
+                                    uint32_t* mask, uint32_t* flags);
+    int32_t set_active_display_mode(uint64_t hctx, uint32_t disp_id, int32_t mode_id,
+                                    uint32_t flags);
+    int32_t set_default_display_mode(uint64_t hctx, uint32_t disp_id, int32_t mode_id,
+                                     uint32_t flags);
+    int32_t get_default_display_mode(uint64_t hctx, uint32_t disp_id, int32_t* mode_id,
+                                     uint32_t* flags);
+    int32_t get_global_pa_range(uint64_t hctx, uint32_t disp_id, void* range);
+    int32_t get_global_pa_config(uint64_t hctx, uint32_t disp_id, uint32_t* enable, void* cfg);
+    int32_t set_global_pa_config(uint64_t hctx, uint32_t disp_id, uint32_t enable, void* cfg);
+    int32_t get_feature_version(uint64_t hctx, uint32_t feature_id, void* ver, uint32_t* flags);
+
+   private:
+    typedef int32_t (*disp_api_init)(uint64_t*, uint32_t);
+    typedef int32_t (*disp_api_deinit)(uint64_t, uint32_t);
+    typedef int32_t (*disp_api_get_global_color_balance_range)(uint64_t, uint32_t, void*);
+    typedef int32_t (*disp_api_set_global_color_balance)(uint64_t, uint32_t, int32_t, uint32_t);
+    typedef int32_t (*disp_api_get_global_color_balance)(uint64_t, uint32_t, int32_t*, uint32_t*);
+    typedef int32_t (*disp_api_get_num_display_modes)(uint64_t, uint32_t, int32_t, int32_t*,
+                                                      uint32_t*);
+    typedef int32_t (*disp_api_get_display_modes)(uint64_t, uint32_t, int32_t, void*, int32_t,
+                                                  uint32_t*);
+    typedef int32_t (*disp_api_get_active_display_mode)(uint64_t, uint32_t, int32_t*, uint32_t*,
+                                                        uint32_t*);
+    typedef int32_t (*disp_api_set_active_display_mode)(uint64_t, uint32_t, int32_t, uint32_t);
+    typedef int32_t (*disp_api_set_default_display_mode)(uint64_t, uint32_t, int32_t, uint32_t);
+    typedef int32_t (*disp_api_get_default_display_mode)(uint64_t, uint32_t, int32_t*, uint32_t*);
+    typedef int32_t (*disp_api_get_global_pa_range)(uint64_t, uint32_t, void*);
+    typedef int32_t (*disp_api_get_global_pa_config)(uint64_t, uint32_t, uint32_t*, void*);
+    typedef int32_t (*disp_api_set_global_pa_config)(uint64_t, uint32_t, uint32_t, void*);
+    typedef int32_t (*disp_api_get_feature_version)(uint64_t, uint32_t, void*, uint32_t*);
+
+    std::shared_ptr<void> mHandle;
+    disp_api_init mFn_init;
+    disp_api_deinit mFn_deinit;
+    disp_api_get_global_color_balance_range mFn_get_global_color_balance_range;
+    disp_api_set_global_color_balance mFn_set_global_color_balance;
+    disp_api_get_global_color_balance mFn_get_global_color_balance;
+    disp_api_get_num_display_modes mFn_get_num_display_modes;
+    disp_api_get_display_modes mFn_get_display_modes;
+    disp_api_get_active_display_mode mFn_get_active_display_mode;
+    disp_api_set_active_display_mode mFn_set_active_display_mode;
+    disp_api_set_default_display_mode mFn_set_default_display_mode;
+    disp_api_get_default_display_mode mFn_get_default_display_mode;
+    disp_api_get_global_pa_range mFn_get_global_pa_range;
+    disp_api_get_global_pa_config mFn_get_global_pa_config;
+    disp_api_set_global_pa_config mFn_set_global_pa_config;
+    disp_api_get_feature_version mFn_get_feature_version;
+};
+
+}  // namespace sdm
+}  // namespace V2_0
+}  // namespace livedisplay
+}  // namespace lineage
+}  // namespace vendor
+
+#endif  // VENDOR_LINEAGE_LIVEDISPLAY_V2_0_SDMCONTROLLER_H
diff --git a/sdm/service.cpp b/sdm/service.cpp
index b5699c5..1f08425 100644
--- a/sdm/service.cpp
+++ b/sdm/service.cpp
@@ -29,12 +29,7 @@
 #include "AdaptiveBacklight.h"
 #include "DisplayModes.h"
 #include "PictureAdjustment.h"
-
-#ifdef LIVES_IN_SYSTEM
-#define SDM_DISP_LIB "libsdm-disp-apis.so"
-#else
-#define SDM_DISP_LIB "libsdm-disp-vndapis.so"
-#endif
+#include "SDMController.h"
 
 using android::OK;
 using android::sp;
@@ -48,12 +43,11 @@ using ::vendor::lineage::livedisplay::V2_0::IPictureAdjustment;
 using ::vendor::lineage::livedisplay::V2_0::sdm::AdaptiveBacklight;
 using ::vendor::lineage::livedisplay::V2_0::sdm::DisplayModes;
 using ::vendor::lineage::livedisplay::V2_0::sdm::PictureAdjustment;
+using ::vendor::lineage::livedisplay::V2_0::sdm::SDMController;
 
 int main() {
     // Vendor backend
-    void* libHandle = nullptr;
-    int32_t (*disp_api_init)(uint64_t*, uint32_t) = nullptr;
-    int32_t (*disp_api_deinit)(uint64_t, uint32_t) = nullptr;
+    std::shared_ptr<SDMController> controller;
     uint64_t cookie = 0;
 
     // HIDL frontend
@@ -75,30 +69,15 @@ int main() {
 
     LOG(INFO) << "LiveDisplay HAL service is starting.";
 
-    libHandle = dlopen(SDM_DISP_LIB, RTLD_NOW);
-    if (libHandle == nullptr) {
-        LOG(ERROR) << "Can not get " << SDM_DISP_LIB << " (" << dlerror() << ")";
-        goto shutdown;
-    }
-
-    disp_api_init =
-        reinterpret_cast<int32_t (*)(uint64_t*, uint32_t)>(dlsym(libHandle, "disp_api_init"));
-    if (disp_api_init == nullptr) {
-        LOG(ERROR) << "Can not get disp_api_init from " << SDM_DISP_LIB << " (" << dlerror() << ")";
+    controller = std::make_unique<SDMController>();
+    if (controller == nullptr) {
+        LOG(ERROR) << "Failed to create SDMController";
         goto shutdown;
     }
 
-    disp_api_deinit =
-        reinterpret_cast<int32_t (*)(uint64_t, uint32_t)>(dlsym(libHandle, "disp_api_deinit"));
-    if (disp_api_deinit == nullptr) {
-        LOG(ERROR) << "Can not get disp_api_deinit from " << SDM_DISP_LIB << " (" << dlerror()
-                   << ")";
-        goto shutdown;
-    }
-
-    status = disp_api_init(&cookie, 0);
+    status = controller->init(&cookie, 0);
     if (status != OK) {
-        LOG(ERROR) << "Can not initialize " << SDM_DISP_LIB << " (" << status << ")";
+        LOG(ERROR) << "Failed to initialize SDMController";
         goto shutdown;
     }
 
@@ -109,13 +88,13 @@ int main() {
         goto shutdown;
     }
 
-    dm = new DisplayModes(libHandle, cookie);
+    dm = new DisplayModes(controller, cookie);
     if (dm == nullptr) {
         LOG(ERROR) << "Can not create an instance of LiveDisplay HAL DisplayModes Iface, exiting.";
         goto shutdown;
     }
 
-    pa = new PictureAdjustment(libHandle, cookie);
+    pa = new PictureAdjustment(controller, cookie);
     if (pa == nullptr) {
         LOG(ERROR)
             << "Can not create an instance of LiveDisplay HAL PictureAdjustment Iface, exiting.";
@@ -162,13 +141,7 @@ int main() {
 
 shutdown:
     // Cleanup what we started
-    if (disp_api_deinit != nullptr) {
-        disp_api_deinit(cookie, 0);
-    }
-
-    if (libHandle != nullptr) {
-        dlclose(libHandle);
-    }
+    controller->deinit(cookie, 0);
 
     // In normal operation, we don't expect the thread pool to shutdown
     LOG(ERROR) << "LiveDisplay HAL service is shutting down.";
-- 
2.17.1

