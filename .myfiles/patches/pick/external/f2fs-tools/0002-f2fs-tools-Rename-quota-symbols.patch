From e67161235bf193107a7364563f0848e5111b2138 Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm.code@gmail.com>
Date: Wed, 14 Feb 2018 21:40:12 +0100
Subject: [PATCH 2/4] f2fs-tools: Rename quota symbols

The quota code seems to be copypasta from libext2_quota and the symbols
clash when linked into the same binary (in recovery).  Rename quota_*
to f2fs_quota_* to allow linkage.

Change-Id: I7f7dcd0f6b0516ec134f17557a859feefd6123fe
---
 fsck/fsck.c         | 10 +++++-----
 fsck/main.c         |  2 +-
 fsck/mkquota.c      | 30 +++++++++++++++---------------
 fsck/quotaio.c      | 14 +++++++-------
 fsck/quotaio.h      | 28 ++++++++++++++--------------
 fsck/quotaio_tree.c |  6 +++---
 6 files changed, 45 insertions(+), 45 deletions(-)

diff --git a/fsck/fsck.c b/fsck/fsck.c
index 05a6301..8f73afe 100644
--- a/fsck/fsck.c
+++ b/fsck/fsck.c
@@ -531,7 +531,7 @@ int fsck_chk_node_blk(struct f2fs_sb_info *sbi, struct f2fs_inode *inode,
 		struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
 
 		fsck_chk_inode_blk(sbi, nid, ftype, node_blk, blk_cnt, &ni, child);
-		quota_add_inode_usage(fsck->qctx, nid, &node_blk->i);
+		f2fs_quota_add_inode_usage(fsck->qctx, nid, &node_blk->i);
 	} else {
 		switch (ntype) {
 		case TYPE_DIRECT_NODE:
@@ -1701,7 +1701,7 @@ int fsck_chk_quota_files(struct f2fs_sb_info *sbi)
 
 	        DBG(1, "Checking Quota file ([%3d] ino [0x%x])\n", qtype, ino);
 		needs_writeout = 0;
-		ret = quota_compare_and_update(sbi, qtype, &needs_writeout,
+		ret = f2fs_quota_compare_and_update(sbi, qtype, &needs_writeout,
 						c.preserve_limits);
 		if (ret == 0 && needs_writeout == 0) {
 			DBG(1, "OK\n");
@@ -1713,7 +1713,7 @@ int fsck_chk_quota_files(struct f2fs_sb_info *sbi)
 			DBG(0, "Fixing Quota file ([%3d] ino [0x%x])\n",
 							qtype, ino);
 			f2fs_filesize_update(sbi, ino, 0);
-			ret = quota_write_inode(sbi, qtype);
+			ret = f2fs_quota_write_inode(sbi, qtype);
 			if (!ret) {
 				c.bug_on = 1;
 				DBG(1, "OK\n");
@@ -2408,7 +2408,7 @@ static int fsck_reconnect_file(struct f2fs_sb_info *sbi)
 				continue;
 			}
 
-			quota_add_inode_usage(fsck->qctx, nid, &node->i);
+			f2fs_quota_add_inode_usage(fsck->qctx, nid, &node->i);
 
 			DBG(1, "Reconnected inode [0x%x] to lost+found\n", nid);
 			cnt++;
@@ -2598,7 +2598,7 @@ void fsck_free(struct f2fs_sb_info *sbi)
 	struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
 
 	if (fsck->qctx)
-		quota_release_context(&fsck->qctx);
+		f2fs_quota_release_context(&fsck->qctx);
 
 	if (fsck->main_area_bitmap)
 		free(fsck->main_area_bitmap);
diff --git a/fsck/main.c b/fsck/main.c
index bbf82c3..b10a0c4 100644
--- a/fsck/main.c
+++ b/fsck/main.c
@@ -555,7 +555,7 @@ static void do_fsck(struct f2fs_sb_info *sbi)
 	blk_cnt = 1;
 
 	if (c.feature & cpu_to_le32(F2FS_FEATURE_QUOTA_INO)) {
-		ret = quota_init_context(sbi);
+		ret = f2fs_quota_init_context(sbi);
 		if (ret) {
 			ASSERT_MSG("quota_init_context failure: %d", ret);
 			return;
diff --git a/fsck/mkquota.c b/fsck/mkquota.c
index b54be08..e097697 100644
--- a/fsck/mkquota.c
+++ b/fsck/mkquota.c
@@ -52,13 +52,13 @@ static void write_dquots(dict_t *dict, struct quota_handle *qh)
 		if (dq) {
 			print_dquot("write", dq);
 			dq->dq_h = qh;
-			update_grace_times(dq);
+			f2fs_update_grace_times(dq);
 			qh->qh_ops->commit_dquot(dq);
 		}
 	}
 }
 
-errcode_t quota_write_inode(struct f2fs_sb_info *sbi, enum quota_type qtype)
+errcode_t f2fs_quota_write_inode(struct f2fs_sb_info *sbi, enum quota_type qtype)
 {
 	struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
 	struct f2fs_super_block *sb = F2FS_RAW_SUPER(sbi);
@@ -78,12 +78,12 @@ errcode_t quota_write_inode(struct f2fs_sb_info *sbi, enum quota_type qtype)
 
 	dict = qctx->quota_dict[qtype];
 	if (dict) {
-		retval = quota_file_create(sbi, h, qtype);
+		retval = f2fs_quota_file_create(sbi, h, qtype);
 		if (retval) {
 			log_debug("Cannot initialize io on quotafile");
 		} else {
 			write_dquots(dict, h);
-			quota_file_close(sbi, h, 1);
+			f2fs_quota_file_close(sbi, h, 1);
 		}
 	}
 out:
@@ -138,7 +138,7 @@ static void quota_dnode_free(dnode_t *node, void *UNUSED(context))
 /*
  * Set up the quota tracking data structures.
  */
-errcode_t quota_init_context(struct f2fs_sb_info *sbi)
+errcode_t f2fs_quota_init_context(struct f2fs_sb_info *sbi)
 {
 	struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
 	struct f2fs_super_block *sb = F2FS_RAW_SUPER(sbi);
@@ -162,7 +162,7 @@ errcode_t quota_init_context(struct f2fs_sb_info *sbi)
 		err = quota_get_mem(sizeof(dict_t), &dict);
 		if (err) {
 			log_debug("Failed to allocate dictionary");
-			quota_release_context(&ctx);
+			f2fs_quota_release_context(&ctx);
 			return err;
 		}
 		ctx->quota_dict[qtype] = dict;
@@ -174,7 +174,7 @@ errcode_t quota_init_context(struct f2fs_sb_info *sbi)
 	return 0;
 }
 
-void quota_release_context(quota_ctx_t *qctx)
+void f2fs_quota_release_context(quota_ctx_t *qctx)
 {
 	dict_t	*dict;
 	enum quota_type	qtype;
@@ -220,7 +220,7 @@ static struct dquot *get_dq(dict_t *dict, __u32 key)
 /*
  * Called to update the blocks used by a particular inode
  */
-void quota_data_add(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
+void f2fs_quota_data_add(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
 {
 	struct dquot	*dq;
 	dict_t		*dict;
@@ -242,7 +242,7 @@ void quota_data_add(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
 /*
  * Called to remove some blocks used by a particular inode
  */
-void quota_data_sub(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
+void f2fs_quota_data_sub(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
 {
 	struct dquot	*dq;
 	dict_t		*dict;
@@ -263,7 +263,7 @@ void quota_data_sub(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space)
 /*
  * Called to count the files used by an inode's user/group
  */
-void quota_data_inodes(quota_ctx_t qctx, struct f2fs_inode *inode, int adjust)
+void f2fs_quota_data_inodes(quota_ctx_t qctx, struct f2fs_inode *inode, int adjust)
 {
 	struct dquot	*dq;
 	dict_t		*dict; enum quota_type	qtype;
@@ -283,7 +283,7 @@ void quota_data_inodes(quota_ctx_t qctx, struct f2fs_inode *inode, int adjust)
 /*
  * Called from fsck to count quota.
  */
-void quota_add_inode_usage(quota_ctx_t qctx, f2fs_ino_t ino,
+void f2fs_quota_add_inode_usage(quota_ctx_t qctx, f2fs_ino_t ino,
 		struct f2fs_inode* inode)
 {
 	if (qctx) {
@@ -298,8 +298,8 @@ void quota_add_inode_usage(quota_ctx_t qctx, f2fs_ino_t ino,
 		}
 
 		qsize_t space = (inode->i_blocks - 1) * BLOCK_SZ;
-		quota_data_add(qctx, inode, space);
-		quota_data_inodes(qctx, inode, +1);
+		f2fs_quota_data_add(qctx, inode, space);
+		f2fs_quota_data_inodes(qctx, inode, +1);
 	}
 }
 
@@ -354,7 +354,7 @@ static int scan_dquots_callback(struct dquot *dquot, void *cb_data)
  * on disk and updates the limits in qctx->quota_dict. 'usage_inconsistent' is
  * set to 1 if the supplied and on-disk quota usage values are not identical.
  */
-errcode_t quota_compare_and_update(struct f2fs_sb_info *sbi,
+errcode_t f2fs_quota_compare_and_update(struct f2fs_sb_info *sbi,
 		enum quota_type qtype, int *usage_inconsistent,
 		int preserve_limits)
 {
@@ -370,7 +370,7 @@ errcode_t quota_compare_and_update(struct f2fs_sb_info *sbi,
 	if (!dict)
 		goto out;
 
-	err = quota_file_open(sbi, &qh, qtype, 0);
+	err = f2fs_quota_file_open(sbi, &qh, qtype, 0);
 	if (err) {
 		log_debug("Open quota file failed");
 		goto out;
diff --git a/fsck/quotaio.c b/fsck/quotaio.c
index afadf56..7070f7c 100644
--- a/fsck/quotaio.c
+++ b/fsck/quotaio.c
@@ -36,7 +36,7 @@ struct disk_dqheader {
 /**
  * Convert type of quota to written representation
  */
-const char *quota_type2name(enum quota_type qtype)
+const char *f2fs_quota_type2name(enum quota_type qtype)
 {
 	if (qtype >= MAXQUOTAS)
 		return "unknown";
@@ -46,7 +46,7 @@ const char *quota_type2name(enum quota_type qtype)
 /*
  * Set grace time if needed
  */
-void update_grace_times(struct dquot *q)
+void f2fs_update_grace_times(struct dquot *q)
 {
 	time_t now;
 
@@ -93,7 +93,7 @@ static unsigned int quota_read_nomount(struct quota_file *qf, long offset,
 /*
  * Detect quota format and initialize quota IO
  */
-errcode_t quota_file_open(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_open(struct f2fs_sb_info *sbi, struct quota_handle *h,
 			  enum quota_type qtype, int flags)
 {
 	struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
@@ -111,7 +111,7 @@ errcode_t quota_file_open(struct f2fs_sb_info *sbi, struct quota_handle *h,
 	if (!h) {
 		if (qctx->quota_file[qtype]) {
 			h = qctx->quota_file[qtype];
-			(void) quota_file_close(sbi, h, 0);
+			(void) f2fs_quota_file_close(sbi, h, 0);
 		}
 		err = quota_get_mem(sizeof(struct quota_handle), &h);
 		if (err) {
@@ -153,7 +153,7 @@ errout:
 /*
  * Create new quotafile of specified format on given filesystem
  */
-errcode_t quota_file_create(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_create(struct f2fs_sb_info *sbi, struct quota_handle *h,
 		enum quota_type qtype)
 {
 	struct f2fs_super_block *sb = F2FS_RAW_SUPER(sbi);
@@ -183,7 +183,7 @@ errcode_t quota_file_create(struct f2fs_sb_info *sbi, struct quota_handle *h,
 /*
  * Close quotafile and release handle
  */
-errcode_t quota_file_close(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_close(struct f2fs_sb_info *sbi, struct quota_handle *h,
 		int update_filesize)
 {
 	struct f2fs_fsck *fsck = F2FS_FSCK(sbi);
@@ -207,7 +207,7 @@ errcode_t quota_file_close(struct f2fs_sb_info *sbi, struct quota_handle *h,
 /*
  * Create empty quota structure
  */
-struct dquot *get_empty_dquot(void)
+struct dquot *f2fs_get_empty_dquot(void)
 {
 	struct dquot *dquot;
 
diff --git a/fsck/quotaio.h b/fsck/quotaio.h
index 8087309..d5adfbd 100644
--- a/fsck/quotaio.h
+++ b/fsck/quotaio.h
@@ -190,32 +190,32 @@ struct quotafile_ops {
 
 /* Open existing quotafile of given type (and verify its format) on given
  * filesystem. */
-errcode_t quota_file_open(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_open(struct f2fs_sb_info *sbi, struct quota_handle *h,
 			  enum quota_type qtype, int flags);
 
 /* Create new quotafile of specified format on given filesystem */
-errcode_t quota_file_create(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_create(struct f2fs_sb_info *sbi, struct quota_handle *h,
 		enum quota_type qtype);
 
 /* Close quotafile */
-errcode_t quota_file_close(struct f2fs_sb_info *sbi, struct quota_handle *h,
+errcode_t f2fs_quota_file_close(struct f2fs_sb_info *sbi, struct quota_handle *h,
 		int update_filesize);
 
 /* Get empty quota structure */
-struct dquot *get_empty_dquot(void);
-const char *quota_type2name(enum quota_type qtype);
-void update_grace_times(struct dquot *q);
+struct dquot *f2fs_get_empty_dquot(void);
+const char *f2fs_quota_type2name(enum quota_type qtype);
+void f2fs_update_grace_times(struct dquot *q);
 
 /* In mkquota.c */
-errcode_t quota_init_context(struct f2fs_sb_info *sbi);
-void quota_data_inodes(quota_ctx_t qctx, struct f2fs_inode *inode, int adjust);
-void quota_data_add(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space);
-void quota_data_sub(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space);
-errcode_t quota_write_inode(struct f2fs_sb_info *sbi, enum quota_type qtype);
-void quota_add_inode_usage(quota_ctx_t qctx, f2fs_ino_t ino,
+errcode_t f2fs_quota_init_context(struct f2fs_sb_info *sbi);
+void f2fs_quota_data_inodes(quota_ctx_t qctx, struct f2fs_inode *inode, int adjust);
+void f2fs_quota_data_add(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space);
+void f2fs_quota_data_sub(quota_ctx_t qctx, struct f2fs_inode *inode, qsize_t space);
+errcode_t f2fs_quota_write_inode(struct f2fs_sb_info *sbi, enum quota_type qtype);
+void f2fs_quota_add_inode_usage(quota_ctx_t qctx, f2fs_ino_t ino,
 		struct f2fs_inode* inode);
-void quota_release_context(quota_ctx_t *qctx);
-errcode_t quota_compare_and_update(struct f2fs_sb_info *sbi,
+void f2fs_quota_release_context(quota_ctx_t *qctx);
+errcode_t f2fs_quota_compare_and_update(struct f2fs_sb_info *sbi,
 		enum quota_type qtype, int *usage_inconsistent,
 		int preserve_limits);
 
diff --git a/fsck/quotaio_tree.c b/fsck/quotaio_tree.c
index 5aef228..4c7a99e 100644
--- a/fsck/quotaio_tree.c
+++ b/fsck/quotaio_tree.c
@@ -512,7 +512,7 @@ struct dquot *qtree_read_dquot(struct quota_handle *h, qid_t id)
 	long offset;
 	unsigned int ret;
 	char *ddquot;
-	struct dquot *dquot = get_empty_dquot();
+	struct dquot *dquot = f2fs_get_empty_dquot();
 
 	if (!dquot)
 		return NULL;
@@ -591,7 +591,7 @@ static int check_reference(struct quota_handle *h, unsigned int blk)
 			"Please run fsck (8) to fix it.",
 			blk,
 			h->qh_info.u.v2_mdqi.dqi_qtree.dqi_blocks,
-			quota_type2name(h->qh_type));
+			f2fs_quota_type2name(h->qh_type));
 		return -1;
 	}
 	return 0;
@@ -650,7 +650,7 @@ int qtree_scan_dquots(struct quota_handle *h,
 {
 	struct v2_mem_dqinfo *v2info = &h->qh_info.u.v2_mdqi;
 	struct qtree_mem_dqinfo *info = &v2info->dqi_qtree;
-	struct dquot *dquot = get_empty_dquot();
+	struct dquot *dquot = f2fs_get_empty_dquot();
 	char *bitmap = NULL;
 	int ret = -1;
 	int entries = 0;
-- 
2.17.1

