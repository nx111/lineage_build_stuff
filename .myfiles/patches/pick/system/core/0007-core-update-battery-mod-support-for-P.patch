From b5d433b5eb039262c92d803524e2ae94d5f48d36 Mon Sep 17 00:00:00 2001
From: Vachounet <vachounet@live.fr>
Date: Sat, 8 Dec 2018 12:38:27 +0100
Subject: [PATCH 07/11] core: update battery mod support for P

Change-Id: I6fa06cdb9f95c50f9d5e994450776472148c05a3
Signed-off-by: Erfan Abdi <erfangplus@gmail.com>
---
 healthd/BatteryMonitor.cpp               | 154 +++--------------------
 healthd/include/healthd/BatteryMonitor.h |   1 +
 healthd/include/healthd/healthd.h        |   7 --
 init/devices.cpp                         |  19 ++-
 4 files changed, 33 insertions(+), 148 deletions(-)

diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 45457e404..ff8e1092e 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -37,7 +37,6 @@
 #include <utils/Errors.h>
 #include <utils/String8.h>
 #include <utils/Vector.h>
-#include <sys/system_properties.h>
 
 #define POWER_SUPPLY_SUBSYSTEM "power_supply"
 #define POWER_SUPPLY_SYSFS_PATH "/sys/class/" POWER_SUPPLY_SUBSYSTEM
@@ -46,21 +45,6 @@
 #define MILLION 1.0e6
 #define DEFAULT_VBUS_VOLTAGE 5000000
 
-#define POWER_SUPPLY_MOD "gb_battery"
-#define POWER_SUPPLY_MOD_BATTERY_MODE_PROP "sys.mod.batterymode"
-#define POWER_SUPPLY_MOD_TYPE_PATH "/sys/class/power_supply/gb_ptp/internal_send"
-#define POWER_SUPPLY_MOD_RECHRG_START_SOC "/sys/module/qpnp_smbcharger_mmi/parameters/eb_rechrg_start_soc"
-#define POWER_SUPPLY_MOD_RECHRG_STOP_SOC "/sys/module/qpnp_smbcharger_mmi/parameters/eb_rechrg_stop_soc"
-#define POWER_SUPPLY_MOD_TYPE_UNKNOWN      0
-#define POWER_SUPPLY_MOD_TYPE_REMOTE       1
-#define POWER_SUPPLY_MOD_TYPE_SUPPLEMENTAL 2
-#define POWER_SUPPLY_MOD_TYPE_EMERGENCY    3
-
-// the following defines should be consistent with those defined in:
-// motorola/frameworks/base/motomods/service/core/src/com/motorola/modservice/ui/Constants.java	
-#define POWER_SUPPLY_MOD_BATTERY_MODE_TOPOFF       0
-#define POWER_SUPPLY_MOD_BATTERY_MODE_EFFICIENCY   1
-
 namespace android {
 
 struct sysfsStringEnumMap {
@@ -180,6 +164,7 @@ BatteryMonitor::PowerSupplyType BatteryMonitor::readPowerSupplyType(const String
             { "USB_PD_DRP", ANDROID_POWER_SUPPLY_TYPE_USB },
             { "Wireless", ANDROID_POWER_SUPPLY_TYPE_WIRELESS },
             { "DASH", ANDROID_POWER_SUPPLY_TYPE_AC },
+            { "BMS", ANDROID_POWER_SUPPLY_TYPE_BMS }, //Motorola, drmn68, 05/16/2017, IKSWN-51081
             { NULL, 0 },
     };
 
@@ -338,76 +323,6 @@ bool BatteryMonitor::update(void) {
         }
     }
 
-    props.modLevel = -1;
-    props.modStatus = BATTERY_STATUS_UNKNOWN;
-    props.modType = POWER_SUPPLY_MOD_TYPE_UNKNOWN;
-    props.modFlag = 0;
-
-    // get mod battery status
-    if (access(mHealthdConfig->modStatusPath.string(), R_OK) == 0) {
-        if (readFromFile(mHealthdConfig->modStatusPath, &buf) > 0) {
-            props.modStatus = getBatteryStatus(buf.c_str());
-        }
-    }
-
-    // don't bother to read other mod values when it not attached
-    if (props.modStatus != BATTERY_STATUS_UNKNOWN) {
-
-        // get mod battery level
-        if (access(mHealthdConfig->modCapacityPath.string(), R_OK) == 0) {
-            props.modLevel = getIntField(mHealthdConfig->modCapacityPath);
-        }
-
-        // get mod type
-        if (access(mHealthdConfig->modTypePath.string(), R_OK) == 0) {
-            props.modType = getIntField(mHealthdConfig->modTypePath);
-        }
-
-        // attempt to hack battery level for non-empty supplemental mod
-        if ((props.modType == POWER_SUPPLY_MOD_TYPE_SUPPLEMENTAL) &&
-            (props.modLevel > 0)) {
-
-            // get battery mode from system properties
-            char value[PROP_VALUE_MAX];
-
-            property_get(POWER_SUPPLY_MOD_BATTERY_MODE_PROP, value, "0");
-
-            int batteryMode = atoi(value);
-            if (batteryMode == POWER_SUPPLY_MOD_BATTERY_MODE_TOPOFF) {
-                if (props.batteryLevel == 99) {
-                    props.batteryLevel = 100;
-                    props.modFlag = 1;
-                }
-            } else if (batteryMode == POWER_SUPPLY_MOD_BATTERY_MODE_EFFICIENCY) {
-
-                int startLevel = -1, stopLevel = -1;
-                if (access(mHealthdConfig->modRechargeStartLevelPath.string(), R_OK) == 0) {
-                    startLevel = getIntField(mHealthdConfig->modRechargeStartLevelPath);
-                }
-                if (access(mHealthdConfig->modRechargeStopLevelPath.string(), R_OK) == 0) {
-                    stopLevel = getIntField(mHealthdConfig->modRechargeStopLevelPath);
-                }
-                if ((startLevel >= 0) && (stopLevel > 0) && (startLevel < stopLevel)) {
-                    if (props.batteryLevel == startLevel) {
-                        props.batteryLevel = stopLevel;
-                        props.modFlag = stopLevel - startLevel;
-                    }
-                }
-            }
-        }
-    }
-
-    // mod attach/detach can cause mod sys file ready/destory in different time. Make sure
-    // mod value reported consistent
-    if (props.modLevel < 0 ||
-        props.modStatus == BATTERY_STATUS_UNKNOWN ||
-        props.modType == POWER_SUPPLY_MOD_TYPE_UNKNOWN) {
-        props.modLevel = -1;
-        props.modStatus = BATTERY_STATUS_UNKNOWN;
-        props.modType = POWER_SUPPLY_MOD_TYPE_UNKNOWN;
-        props.modFlag = 0;
-    }
-
     logthis = !healthd_board_battery_update(&props);
 
     if (logthis) {
@@ -437,16 +352,6 @@ bool BatteryMonitor::update(void) {
                 len += snprintf(dmesgline + len, sizeof(dmesgline) - len,
                                 " cc=%d", props.batteryCycleCount);
             }
-
-            char b[20];
-            snprintf(b, sizeof(b), " ml=%d", props.modLevel);
-            strlcat(dmesgline, b, sizeof(dmesgline));
-            snprintf(b, sizeof(b), " mst=%d", props.modStatus);
-            strlcat(dmesgline, b, sizeof(dmesgline));
-            snprintf(b, sizeof(b), " mf=%d", props.modFlag);
-            strlcat(dmesgline, b, sizeof(dmesgline));
-            snprintf(b, sizeof(b), " mt=%d", props.modType);
-            strlcat(dmesgline, b, sizeof(dmesgline));
         } else {
             len = snprintf(dmesgline, sizeof(dmesgline),
                  "battery none");
@@ -528,24 +433,7 @@ status_t BatteryMonitor::getProperty(int id, struct BatteryProperty *val) {
             ret = NAME_NOT_FOUND;
         }
         break;
-    case BATTERY_PROP_CHARGE_FULL:
-        if (!mHealthdConfig->batteryFullChargePath.isEmpty() &&
-            (access(mHealthdConfig->batteryFullChargePath.string(), R_OK) == 0)) {
-            val->valueInt64 = getIntField(mHealthdConfig->batteryFullChargePath);
-            ret = NO_ERROR;
-        } else {
-            ret = NAME_NOT_FOUND;
-        }
-        break;
-    case BATTERY_PROP_MOD_CHARGE_FULL:
-        if (!mHealthdConfig->modChargeFullPath.isEmpty() &&
-            (access(mHealthdConfig->modChargeFullPath.string(), R_OK) == 0)) {
-            val->valueInt64 = getIntField(mHealthdConfig->modChargeFullPath);
-            ret = NO_ERROR;
-        } else {
-            ret = NAME_NOT_FOUND;
-        }
-        break;
+
     case BATTERY_PROP_BATTERY_STATUS:
         val->valueInt64 = getChargeStatus();
         ret = NO_ERROR;
@@ -625,8 +513,6 @@ void BatteryMonitor::init(struct healthd_config *hc) {
             if (!strcmp(name, ".") || !strcmp(name, ".."))
                 continue;
 
-            if (!strcmp(name, POWER_SUPPLY_MOD)) continue;
-
             // Look for "type" file in each subdirectory
             path.clear();
             path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH, name);
@@ -743,36 +629,24 @@ void BatteryMonitor::init(struct healthd_config *hc) {
 
                 break;
 
+            // Begin Motorola, drmn68, 05/16/2017, IKSWN-51081
+            case ANDROID_POWER_SUPPLY_TYPE_BMS:
+                if (mHealthdConfig->batteryFullChargePath.isEmpty()) {
+                    path.clear();
+                    path.appendFormat("%s/%s/charge_full",
+                                      POWER_SUPPLY_SYSFS_PATH, name);
+                    if (access(path, R_OK) == 0) {
+                        mHealthdConfig->batteryFullChargePath = path;
+                    }
+                }
+                break;
+            // End IKSWN-51081
             case ANDROID_POWER_SUPPLY_TYPE_UNKNOWN:
                 break;
             }
         }
     }
 
-    // mod battery level path
-    path.clear();
-    path.appendFormat("%s/%s/capacity", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
-    mHealthdConfig->modCapacityPath = path;
-
-    // mod battery status path
-    path.clear();
-    path.appendFormat("%s/%s/status", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
-    mHealthdConfig->modStatusPath = path;
-
-    // mod battery full capacity path
-    path.clear();
-    path.appendFormat("%s/%s/charge_full_design", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
-    mHealthdConfig->modChargeFullPath = path;
-
-    // mod type path
-    mHealthdConfig->modTypePath = POWER_SUPPLY_MOD_TYPE_PATH;
-
-    // efficiency mode recharge start path
-    mHealthdConfig->modRechargeStartLevelPath = POWER_SUPPLY_MOD_RECHRG_START_SOC;
-
-    // efficiency mode recharge stop path
-    mHealthdConfig->modRechargeStopLevelPath = POWER_SUPPLY_MOD_RECHRG_STOP_SOC;
-
     // Typically the case for devices which do not have a battery and
     // and are always plugged into AC mains.
     if (!mBatteryDevicePresent) {
diff --git a/healthd/include/healthd/BatteryMonitor.h b/healthd/include/healthd/BatteryMonitor.h
index 4d1d53f2c..26a690c40 100644
--- a/healthd/include/healthd/BatteryMonitor.h
+++ b/healthd/include/healthd/BatteryMonitor.h
@@ -33,6 +33,7 @@ class BatteryMonitor {
         ANDROID_POWER_SUPPLY_TYPE_AC,
         ANDROID_POWER_SUPPLY_TYPE_USB,
         ANDROID_POWER_SUPPLY_TYPE_WIRELESS,
+        ANDROID_POWER_SUPPLY_TYPE_BMS,
         ANDROID_POWER_SUPPLY_TYPE_BATTERY
     };
 
diff --git a/healthd/include/healthd/healthd.h b/healthd/include/healthd/healthd.h
index 1364e45bc..c01e8d747 100644
--- a/healthd/include/healthd/healthd.h
+++ b/healthd/include/healthd/healthd.h
@@ -68,13 +68,6 @@ struct healthd_config {
     android::String8 batteryFullChargePath;
     android::String8 batteryCycleCountPath;
 
-    android::String8 modChargeFullPath;
-    android::String8 modCapacityPath;
-    android::String8 modStatusPath;
-    android::String8 modTypePath;
-    android::String8 modRechargeStartLevelPath;
-    android::String8 modRechargeStopLevelPath;
-
     int (*energyCounter)(int64_t *);
     int boot_min_cap;
     bool (*screen_on)(android::BatteryProperties *props);
diff --git a/init/devices.cpp b/init/devices.cpp
index ada1e2870..7b71bc1c3 100644
--- a/init/devices.cpp
+++ b/init/devices.cpp
@@ -20,6 +20,8 @@
 #include <fnmatch.h>
 #include <sys/sysmacros.h>
 #include <unistd.h>
+#include <fts.h>
+#include <fcntl.h>
 
 #include <memory>
 
@@ -379,12 +381,27 @@ void DeviceHandler::HandleDeviceEvent(const Uevent& uevent) {
     }
 
     // if it's not a /dev device, nothing to do
-    if (uevent.major < 0 || uevent.minor < 0) return;
+    if ((uevent.major < 0 || uevent.minor < 0) &&
+        (uevent.subsystem != "mods_interfaces"))
+            return;
 
     std::string devpath;
     std::vector<std::string> links;
     bool block = false;
 
+    /* specially handle uevent of "mods_interface" to fix race with ModManager */
+    if (uevent.subsystem == "mods_interfaces" && uevent.action == "online") {
+        std::string uevent_path = StringPrintf("%s/%s/uevent", "/sys", uevent.path.c_str());
+        int fd = open(uevent_path.c_str(), O_WRONLY);
+        if (fd >= 0) {
+            write(fd, "add\n", 4);
+            close(fd);
+            PLOG(INFO) << "sent uevent \"add\" by " << uevent_path;
+        } else
+            PLOG(ERROR) << "failed to open " << uevent_path;
+        return;
+    }
+
     if (uevent.subsystem == "block") {
         block = true;
         devpath = "/dev/block/" + Basename(uevent.path);
-- 
2.17.1

