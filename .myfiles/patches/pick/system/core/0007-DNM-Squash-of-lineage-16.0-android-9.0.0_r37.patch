From b3de93ae67df79c70e9a1dcb2e8f57a37531b9d3 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 7 May 2019 19:58:15 +0200
Subject: [PATCH 7/8] [DNM] Squash of lineage-16.0-android-9.0.0_r37

Squashed commit of the following:

commit e6ef013d2c8c1201540128d9961b73450257ab90
Merge: 66d9e9231 6f2198b33
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Thu Jan 24 05:16:51 2019 +0000

    Snap for 5255085 from 6f2198b33cd4de28f98f8a834e4c0bd98a954c74 to pi-qpr3-release

    Change-Id: Ibdb184f79923aeeb54811889905269a700414868

commit 6f2198b33cd4de28f98f8a834e4c0bd98a954c74
Author: Wei Wang <wvw@google.com>
Date:   Wed Nov 21 00:11:44 2018 -0800

    lmkd: bump process priority and set to FOREGROUND group before kill

    This should help speed up reclaim memory.

    Bug: 118468011
    Bug: 121439388
    Test: run mem-pressure with lmkd
    Change-Id: Iae7aa35483eb0e8bbeccaa425559c6021c845ee1
    Merged-In: Iae7aa35483eb0e8bbeccaa425559c6021c845ee1

commit 66d9e9231e3b76f89f9b440766e3e0fbf2c85609
Author: Branden Archer <brarcher@google.com>
Date:   Thu Nov 15 08:43:48 2018 -0800

    Run BoringSSL self test during startup

    NIAP certification requires that all cryptographic functions
    undergo a self-test during startup to demonstrate correct
    operation. This change adds such a check.

    If the check fails, it will prevent the device from booting
    by rebooting into the bootloader.

    Bug: 119826244
    Test: Built for walleye. After device booted examined dmesg and
          observed logs from init showing that the new task did
          start. Further, when BoringSSL is built to fail its self
          check the device did stop during a normal boot and enter
          the bootloader, and did so before the boot animation stopped.
    Change-Id: I4df375cfcdbadcae7f67b01441fef6e729312807
    Merged-In: I07a5dc73a314502c87de566bb26f4d73499d2675

commit f11c98bc4013014de3ea773c79cd43a11eb6f4ea
Merge: 08ba9b141 c9455b474
Author: Martijn Coenen <maco@google.com>
Date:   Mon Jan 7 04:33:12 2019 -0800

    [automerger skipped] Export maximum number of fds/ints in a native_handle. am: c1cea05b5f -s ours am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history am: 479b8544c6 -s ours am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history
    am: c9455b4740 -s ours
    am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history

    Change-Id: I685d84c532ebd165914abb016e8c9d1601208680

commit c9455b47402ff0f256d06c168e81faa2cdde6f71
Merge: 5fa570802 479b8544c
Author: Martijn Coenen <maco@google.com>
Date:   Mon Jan 7 04:29:02 2019 -0800

    [automerger skipped] Export maximum number of fds/ints in a native_handle. am: c1cea05b5f -s ours am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history
    am: 479b8544c6 -s ours
    am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history

    Change-Id: If4f1b92e9ed89bfd50fc0621ded802255165b2de

commit 479b8544c6ecfe812f6fcd274a03116b86cc4224
Merge: 02debfa2d c1cea05b5
Author: Martijn Coenen <maco@google.com>
Date:   Mon Jan 7 04:23:56 2019 -0800

    [automerger skipped] Export maximum number of fds/ints in a native_handle.
    am: c1cea05b5f -s ours
    am skip reason: change_id I0eafff70d3a7e4d732fe600a0052efb90108208d with SHA1 02debfa2df is in history

    Change-Id: I64ce50c8c687a849a2e2acdcacda42c98d3a4115

commit 08ba9b1412f0bbf381b7069bf15e536ef5c4ba64
Merge: 883a07d72 5fa570802
Author: Martijn Coenen <maco@google.com>
Date:   Fri Jan 4 10:53:26 2019 -0800

    Export maximum number of fds/ints in a native_handle. am: 02debfa2df
    am: 5fa5708025

    Change-Id: I7812acbfd43811e332513b9945432d23fba94187

commit 5fa5708025843fe24566401025d830f05a3a39e2
Merge: 4e13bf0e7 02debfa2d
Author: Martijn Coenen <maco@google.com>
Date:   Fri Jan 4 10:46:21 2019 -0800

    Export maximum number of fds/ints in a native_handle.
    am: 02debfa2df

    Change-Id: I36da3de7dcad006ee647163a62b0d5c8819b994e

commit c1cea05b5f052474d3df90adbe40f5796d950a6e
Author: Martijn Coenen <maco@google.com>
Date:   Wed Dec 5 09:42:25 2018 +0100

    Export maximum number of fds/ints in a native_handle.

    So we can deserialize it consisently and safely.

    Bug: 120084106
    Test: builds
    Change-Id: I0eafff70d3a7e4d732fe600a0052efb90108208d
    Merged-In: I0eafff70d3a7e4d732fe600a0052efb90108208d

commit 02debfa2df1589c2f8e35cc2db93dd131f43f2db
Author: Martijn Coenen <maco@google.com>
Date:   Wed Dec 5 09:42:25 2018 +0100

    Export maximum number of fds/ints in a native_handle.

    So we can deserialize it consisently and safely.

    Bug: 120084106
    Test: builds
    Change-Id: I0eafff70d3a7e4d732fe600a0052efb90108208d

commit 883a07d7202b2e4a1bd6f7a6ea08c8d13814e020
Merge: b94cc0094 f123d45ce
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Thu Dec 6 18:49:10 2018 +0000

    Merge "usbd: Do not join the thread pool" into pi-dev

commit f123d45ce15601f446eaac487431cd59e2cdccf5
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Wed Oct 17 18:26:37 2018 -0700

    usbd: Do not join the thread pool

    Work around for the following crash:
    02-08 05:34:20.968  root   990   990 F DEBUG   :     #00 pc 000000000001447c  /system/lib64/libhwbinder.so (android::hardware::IPCThreadState::joinThreadPool(bool)+28)
    02-08 05:34:20.968  root   990   990 F DEBUG   :     #01 pc 000000000001c174  /system/lib64/libhwbinder.so (android::hardware::PoolThread::threadLoop()+24)
    02-08 05:34:20.968  root   990   990 F DEBUG   :     #02 pc 000000000000f934  /system/lib64/libutils.so (android::Thread::_threadLoop(void*)+280)
    02-08 05:34:20.968  root   990   990 F DEBUG   :     #03 pc 00000000000821e0  /system/lib64/libc.so (__pthread_start(void*)+36)
    02-08 05:34:20.968  root   990   990 F DEBUG   :     #04 pc 0000000000023178  /system/lib64/libc.so (__start_thread+68)

    Bug: 117470462
    Change-Id: I1e8f28a7d0f3041d9be8138a3dc9ed9c74419f91

Change-Id: Ia2558eb66b0bafa5b673532c012dde83f46c2c27
---
 init/Android.bp              |  1 +
 init/boringssl_self_test.cpp | 56 ++++++++++++++++++++++++++++++++++++
 init/boringssl_self_test.h   | 28 ++++++++++++++++++
 init/init.cpp                |  4 +++
 lmkd/lmkd.c                  | 42 +++++++++++++++++++++++++++
 usbd/usbd.cpp                |  5 ++++
 6 files changed, 136 insertions(+)
 create mode 100644 init/boringssl_self_test.cpp
 create mode 100644 init/boringssl_self_test.h

diff --git a/init/Android.bp b/init/Android.bp
index e4f89b607..2469d27be 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -95,6 +95,7 @@ cc_library_static {
         "action.cpp",
         "action_manager.cpp",
         "action_parser.cpp",
+        "boringssl_self_test.cpp",
         "bootchart.cpp",
         "builtins.cpp",
         "capabilities.cpp",
diff --git a/init/boringssl_self_test.cpp b/init/boringssl_self_test.cpp
new file mode 100644
index 000000000..850f1aa73
--- /dev/null
+++ b/init/boringssl_self_test.cpp
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "boringssl_self_test.h"
+
+#include <android-base/logging.h>
+#include <cutils/android_reboot.h>
+#include <openssl/crypto.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+namespace android {
+namespace init {
+
+Result<Success> StartBoringSslSelfTest(const BuiltinArguments&) {
+    pid_t id = fork();
+
+    if (id == 0) {
+        if (BORINGSSL_self_test() != 1) {
+            LOG(INFO) << "BoringSSL crypto self tests failed";
+
+            // This check has failed, so the device should refuse
+            // to boot. Rebooting to bootloader to wait for
+            // further action from the user.
+
+            int result =
+                android_reboot(ANDROID_RB_RESTART2, 0, "bootloader,boringssl-self-check-failed");
+            if (result != 0) {
+                LOG(ERROR) << "Failed to reboot into bootloader";
+            }
+        }
+
+        _exit(0);
+    } else if (id == -1) {
+        // Failed to fork, so cannot run the test. Refuse to continue.
+        PLOG(FATAL) << "Failed to fork for BoringSSL self test";
+    }
+
+    return Success();
+}
+
+}  // namespace init
+}  // namespace android
diff --git a/init/boringssl_self_test.h b/init/boringssl_self_test.h
new file mode 100644
index 000000000..b21fc7883
--- /dev/null
+++ b/init/boringssl_self_test.h
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include "builtin_arguments.h"
+#include "result.h"
+
+namespace android {
+namespace init {
+
+Result<Success> StartBoringSslSelfTest(const BuiltinArguments&);
+
+}  // namespace init
+}  // namespace android
diff --git a/init/init.cpp b/init/init.cpp
index 74e81e4b5..eb9dd755b 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -47,6 +47,7 @@
 #include <optional>
 
 #include "action_parser.h"
+#include "boringssl_self_test.h"
 #include "import_parser.h"
 #include "init_first_stage.h"
 #include "keychords.h"
@@ -734,6 +735,9 @@ int main(int argc, char** argv) {
     // Trigger all the boot actions to get us started.
     am.QueueEventTrigger("init");
 
+    // Starting the BoringSSL self test, for NIAP certification compliance.
+    am.QueueBuiltinAction(StartBoringSslSelfTest, "StartBoringSslSelfTest");
+
     // Repeat mix_hwrng_into_linux_rng in case /dev/hw_random or /dev/random
     // wasn't ready immediately after wait_for_coldboot_done
     am.QueueBuiltinAction(MixHwrngIntoLinuxRngAction, "MixHwrngIntoLinuxRng");
diff --git a/lmkd/lmkd.c b/lmkd/lmkd.c
index ef1bf10ea..92cdaa0e7 100644
--- a/lmkd/lmkd.c
+++ b/lmkd/lmkd.c
@@ -16,6 +16,7 @@
 
 #define LOG_TAG "lowmemorykiller"
 
+#include <dirent.h>
 #include <errno.h>
 #include <inttypes.h>
 #include <sched.h>
@@ -26,15 +27,19 @@
 #include <sys/epoll.h>
 #include <sys/eventfd.h>
 #include <sys/mman.h>
+#include <sys/resource.h>
 #include <sys/socket.h>
 #include <sys/sysinfo.h>
+#include <sys/time.h>
 #include <sys/types.h>
 #include <unistd.h>
 
 #include <cutils/properties.h>
+#include <cutils/sched_policy.h>
 #include <cutils/sockets.h>
 #include <lmkd.h>
 #include <log/log.h>
+#include <system/thread_defs.h>
 
 #ifdef LMKD_LOG_STATS
 #include "statslog.h"
@@ -1029,6 +1034,40 @@ static struct proc *proc_get_heaviest(int oomadj) {
     return maxprocp;
 }
 
+static void set_process_group_and_prio(int pid, SchedPolicy sp, int prio) {
+    DIR* d;
+    char proc_path[PATH_MAX];
+    struct dirent* de;
+
+    snprintf(proc_path, sizeof(proc_path), "/proc/%d/task", pid);
+    if (!(d = opendir(proc_path))) {
+        ALOGW("Failed to open %s; errno=%d: process pid(%d) might have died", proc_path, errno, pid);
+        return;
+    }
+
+    while ((de = readdir(d))) {
+        int t_pid;
+
+        if (de->d_name[0] == '.') continue;
+        t_pid = atoi(de->d_name);
+
+        if (!t_pid) {
+            ALOGW("Failed to get t_pid for '%s' of pid(%d)", de->d_name, pid);
+            continue;
+        }
+
+        if (setpriority(PRIO_PROCESS, t_pid, prio) && errno != ESRCH) {
+            ALOGW("Unable to raise priority of killing t_pid (%d): errno=%d", t_pid, errno);
+        }
+
+        if (set_cpuset_policy(t_pid, sp)) {
+            ALOGW("Failed to set_cpuset_policy on pid(%d) t_pid(%d) to %d", pid, t_pid, (int)sp);
+            continue;
+        }
+    }
+    closedir(d);
+}
+
 static int last_killed_pid = -1;
 
 /* Kill one process specified by procp.  Returns the size of the process killed */
@@ -1069,6 +1108,9 @@ static int kill_one_process(struct proc* procp) {
 
     /* CAP_KILL required */
     r = kill(pid, SIGKILL);
+
+    set_process_group_and_prio(pid, SP_FOREGROUND, ANDROID_PRIORITY_HIGHEST);
+
     ALOGI("Kill '%s' (%d), uid %d, oom_adj %d to free %ldkB",
         taskname, pid, uid, procp->oomadj, tasksize * page_k);
 
diff --git a/usbd/usbd.cpp b/usbd/usbd.cpp
index 41cd8dd9b..191fb92fb 100644
--- a/usbd/usbd.cpp
+++ b/usbd/usbd.cpp
@@ -22,15 +22,20 @@
 #include <android-base/properties.h>
 #include <android/hardware/usb/gadget/1.0/IUsbGadget.h>
 
+#include <hidl/HidlTransportSupport.h>
+
 #define PERSISTENT_USB_CONFIG "persist.sys.usb.config"
 
 using android::base::GetProperty;
 using android::base::SetProperty;
+using android::hardware::configureRpcThreadpool;
 using android::hardware::usb::gadget::V1_0::GadgetFunction;
 using android::hardware::usb::gadget::V1_0::IUsbGadget;
 using android::hardware::Return;
 
 int main(int /*argc*/, char** /*argv*/) {
+    configureRpcThreadpool(1, true /*callerWillJoin*/);
+
     android::sp<IUsbGadget> gadget = IUsbGadget::getService();
     Return<void> ret;
 
-- 
2.17.1

