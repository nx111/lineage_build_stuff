From 52dc05faaa07d35f4b502e71abdf75332300d47d Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 7 May 2019 19:58:33 +0200
Subject: [PATCH 2/2] [DNM] Squash of lineage-16.0-android-9.0.0_r37

Squashed commit of the following:

commit 2901ff5e4e69a0581fa3c11adee192fce658b8f0
Merge: 0a1c98b cfe00de
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Wed Feb 27 04:10:40 2019 +0000

    Snap for 5339334 from cfe00de661cedfad6295fc8713a5da3b48031cb2 to pi-qpr3-release

    Change-Id: I9916a94201eafab7d209fa08c0343b550dff7830

commit cfe00de661cedfad6295fc8713a5da3b48031cb2
Author: Branden Archer <brarcher@google.com>
Date:   Fri Feb 22 08:13:33 2019 -0800

    Grant VTS tests all permissions in keystore on userdebug/eng

    Tests for bluetooth are being created. The test
    is run as root and attempts various operations that directly
    use the Keystore service. By default that test will not be
    able to perform necessary actions such as creating keys for tests.

    This change will enable the root user to perform all key
    operations, but only on userdebug and eng builds.

    Bug: 117993149
    Test: Bluetooth tests pass

    Change-Id: I7ac09562851a7dd8c275fd5606bbc99acb5f210e
    Merged-In: Ic6eb5748e0e19b64a44c4bdf88a7074f7367db3d

commit 82640d48ff8ff2669eecbffc9192ac09092fffaa
Author: Branden Archer <brarcher@google.com>
Date:   Thu Feb 21 13:16:11 2019 -0800

    Give some permissions to bluetooth

    The bluetooth user will need to encrypt and decrypt data to ensure
    that the integrity of passwords can be verified. These provide
    the needed permissions to create/remove keys and sign/verify using them.

    Bug: 117993149
    Test: Bluetooth operations from the UI work

    Change-Id: I52fda2ec78c1b390ae668b8a3f37fc4dbb35e857
    Merged-In: I9092c2c282f26b40cd15da84125e6e11354ec48b

commit cb77797d66523188e0b9929274b290c0c8db3083
Author: Branden Archer <brarcher@google.com>
Date:   Wed Nov 21 14:58:01 2018 -0800

    Fix KeyStoreClientImpl::doesKeyExist to return correct result

    The KeyStoreService returns NO_ERROR if the key was found,
    and another response code otherwise. All of these are
    mapped to non-zero values. As a result, if a key's
    existence was queried it would always respond "true",
    regardless if it exists or not or if there was a permissions
    error.

    Bug: 117993149
    Test: Manual test forthcoming

    Change-Id: Ib3488c6b125304fa300029e78a218f86f33d4412
    Merged-In: Iffc2e155a61354f1fbffbece093b19e5cbc537fd

commit 0a1c98b7f47abdb861d7615d5103981d3735c450
Merge: f8feed6 b7ff91b
Author: android-build-team Robot <android-build-team-robot@google.com>
Date:   Wed Jan 30 04:04:58 2019 +0000

    Snap for 5268384 from b7ff91bc0018848aa310bde61728264fe28c0274 to pi-qpr3-release

    Change-Id: I8a86f3f9651115c5da63ae78095f3039142f2ae0

commit b7ff91bc0018848aa310bde61728264fe28c0274
Author: Branden Archer <brarcher@google.com>
Date:   Thu Jan 10 15:01:49 2019 -0800

    Increase the master key size to 256 bits

    NIAP certification finds that the 128 bit key size is insufficient
    and requires a 256 bit key size. This change increases the
    size of new master keys to 256 bits. Any existing master keys are
    not changed and continue to be supported.

    A new BlobType, TYPE_MASTER_KEY_AES256, is used to signal when a
    key is the new larger size.

    Bug: 121272336
    Test: (1) Ran Keystore CTS tests against Walleye,
              no new test failures observed.
          (2) Created keys in build without change, moved to build
              with change and verified old key could be loaded and
    	  used. Also, a new key could be created with the
    	  increased size and could be reloaded after a reboot.
    Change-Id: Ie120f514bc1db7a8a9eeaaf842178bafe128ee19
    Merged-In: If00331c303e6cc7bc95a2ab624d0e19bec4e587e

commit a7a29fab4003c5eecc47e0280583f4abd50b0186
Author: Branden Archer <brarcher@google.com>
Date:   Thu Jan 10 09:24:14 2019 -0800

    Use vector to pass around keys

    In the future the key size for new master keys will increase.
    To maintain backwards compatibility the size of the key
    can no longer be assumed. To help communicate the actual
    size of the key, it will be passed around in a vector.

    Bug: 121272336
    Test: Ran Keystore CTS tests against Walleye,
          no new test failures observed
    Change-Id: Ie74eaf5226398e2300eb266ddda269473593e9d4
    Merged-In: I4c05acb15b77959f2bf89abbdc325904fffb497a

commit 020d5352592bde6dced40c96512bc1b01a6496fb
Author: Branden Archer <brarcher@google.com>
Date:   Fri Dec 28 12:24:53 2018 -0800

    Use SHA256 for 32 byte keys

    For NIAP certification keys need to be generated using SHA256 or
    higher. Presently SHA1 is used. To satisfy this requirement,
    SHA256 will be used for new keys. As the master key has recently
    increased in size, the key size is used to determine if SHA1 is used
    (for older keys) or SHA256.

    Bug: 121272336
    Test: Ran Keystore CTS tests against Walleye,
          no new test failures observed
    Change-Id: Ic5f7840e60817d02b62dca7221f5cc703558db44
    Merged-In: I6099156173e04b22c6edafd9fb0e072f7201c5ee

commit e489a0371ed8251bc80d0a0328767d568cb1da30
Author: Branden Archer <brarcher@google.com>
Date:   Fri Dec 28 09:10:49 2018 -0800

    Replace Entropy with RAND_bytes

    /dev/urandom is not an approved random number generator
    for NIAP certification. Changing to use BoringSSL's
    RAND_bytes(), which is approved.

    Bug: 121272336
    Test: Ran Keystore CTS tests against Walleye, no new
          test failures observed.
    Change-Id: I0fb87c955512074fa714c1986ce99063ab430470
    Merged-In: I579d140ef56c90b477b0d8989e3b02375681aee8

Change-Id: I93fcb4e5d8586aaf875f71b5922697f6c32fc29f
---
 keystore/entropy.cpp | 49 --------------------------------------------
 keystore/entropy.h   | 34 ------------------------------
 2 files changed, 83 deletions(-)
 delete mode 100644 keystore/entropy.cpp
 delete mode 100644 keystore/entropy.h

diff --git a/keystore/entropy.cpp b/keystore/entropy.cpp
deleted file mode 100644
index 1bfe9a1..0000000
--- a/keystore/entropy.cpp
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#define LOG_TAG "keystore"
-
-#include "entropy.h"
-
-#include <errno.h>
-#include <fcntl.h>
-#include <stdio.h>
-#include <string.h>
-#include <unistd.h>
-
-#include <cutils/log.h>
-
-#include "keystore_utils.h"
-
-Entropy::~Entropy() {
-    if (mRandom >= 0) {
-        close(mRandom);
-    }
-}
-
-bool Entropy::open() {
-    const char* randomDevice = "/dev/urandom";
-    mRandom = TEMP_FAILURE_RETRY(::open(randomDevice, O_RDONLY));
-    if (mRandom < 0) {
-        ALOGE("open: %s: %s", randomDevice, strerror(errno));
-        return false;
-    }
-    return true;
-}
-
-bool Entropy::generate_random_data(uint8_t* data, size_t size) const {
-    return (readFully(mRandom, data, size) == size);
-}
diff --git a/keystore/entropy.h b/keystore/entropy.h
deleted file mode 100644
index 0e4d1b2..0000000
--- a/keystore/entropy.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#ifndef KEYSTORE_ENTROPY_H_
-#define KEYSTORE_ENTROPY_H_
-
-#include <stdint.h>
-
-class Entropy {
-  public:
-    Entropy() : mRandom(-1) {}
-    ~Entropy();
-
-    bool open();
-    bool generate_random_data(uint8_t* data, size_t size) const;
-
-  private:
-    int mRandom;
-};
-
-#endif  // KEYSTORE_ENTROPY_H_
-- 
2.17.1

