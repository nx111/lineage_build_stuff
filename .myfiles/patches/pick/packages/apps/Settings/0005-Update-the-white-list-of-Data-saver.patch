From c5d626fbf8186fb93f88d6ec218cbc04422870d0 Mon Sep 17 00:00:00 2001
From: "xiyuan.wang" <xiyuan.wang@sony.com>
Date: Thu, 19 Oct 2017 18:30:51 +0800
Subject: [PATCH 05/18] Update the white list of Data saver

The number of "xx apps allowed..." in explanation
sentence is not updated.

Bug: 70655634
Test: RunSettingsRoboTests
Change-Id: Id46a8a50884cd9d120be67c24174cbcaebe7926a
---
 .../settings/datausage/DataSaverBackend.java  |  6 ++
 .../datausage/DataSaverBackendTest.java       | 82 +++++++++++++++++++
 2 files changed, 88 insertions(+)
 create mode 100644 tests/robotests/src/com/android/settings/datausage/DataSaverBackendTest.java

diff --git a/src/com/android/settings/datausage/DataSaverBackend.java b/src/com/android/settings/datausage/DataSaverBackend.java
index b59da9d7ff..eb34bb90d2 100644
--- a/src/com/android/settings/datausage/DataSaverBackend.java
+++ b/src/com/android/settings/datausage/DataSaverBackend.java
@@ -77,6 +77,7 @@ public class DataSaverBackend {
     }
 
     public void refreshWhitelist() {
+        mWhitelistInitialized = false;
         loadWhitelist();
     }
 
@@ -109,6 +110,11 @@ public class DataSaverBackend {
     private void loadWhitelist() {
         if (mWhitelistInitialized) return;
 
+        for (int i = mUidPolicies.size() - 1; i >= 0; i--) {
+            if (mUidPolicies.valueAt(i) == POLICY_ALLOW_METERED_BACKGROUND) {
+                mUidPolicies.removeAt(i);
+            }
+        }
         for (int uid : mPolicyManager.getUidsWithPolicy(POLICY_ALLOW_METERED_BACKGROUND)) {
             mUidPolicies.put(uid, POLICY_ALLOW_METERED_BACKGROUND);
         }
diff --git a/tests/robotests/src/com/android/settings/datausage/DataSaverBackendTest.java b/tests/robotests/src/com/android/settings/datausage/DataSaverBackendTest.java
new file mode 100644
index 0000000000..ef735f5994
--- /dev/null
+++ b/tests/robotests/src/com/android/settings/datausage/DataSaverBackendTest.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings.datausage;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import android.content.Context;
+import android.net.NetworkPolicyManager;
+import android.util.SparseIntArray;
+
+import com.android.settings.TestConfig;
+import com.android.settings.testutils.SettingsRobolectricTestRunner;
+
+import org.junit.Before;
+import org.junit.runner.RunWith;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.util.ReflectionHelpers;
+
+@RunWith(SettingsRobolectricTestRunner.class)
+@Config(manifest = TestConfig.MANIFEST_PATH, sdk = TestConfig.SDK_VERSION)
+public class DataSaverBackendTest {
+    private NetworkPolicyManager mNetworkPolicyManager;
+    private Context mContext;
+    private DataSaverBackend mBackend;
+
+    @Before
+    public void setUp() {
+        MockitoAnnotations.initMocks(this);
+        ShadowApplication shadowContext = ShadowApplication.getInstance();
+        mNetworkPolicyManager = mock(NetworkPolicyManager.class);
+        shadowContext.setSystemService(Context.NETWORK_POLICY_SERVICE, mNetworkPolicyManager);
+        mContext = shadowContext.getApplicationContext();
+        mBackend = new DataSaverBackend(mContext);
+    }
+
+    @Test
+    public void refreshWhitelist_shouldUpdateWhitelistedCount() {
+        SparseIntArray uidPolicies = new SparseIntArray();
+        final int policy = NetworkPolicyManager.POLICY_ALLOW_METERED_BACKGROUND;
+        ReflectionHelpers.setField(mBackend, "mPolicyManager", mNetworkPolicyManager);
+        ReflectionHelpers.setField(mBackend, "mUidPolicies", uidPolicies);
+
+        int testUidNull[] = {};
+        when(mNetworkPolicyManager.getUidsWithPolicy(policy)).thenReturn(testUidNull);
+        mBackend.refreshWhitelist();
+        assertThat(uidPolicies.size()).isEqualTo(0);
+
+        int testAddUid[] = {123123,123126};
+        when(mNetworkPolicyManager.getUidsWithPolicy(policy)).thenReturn(testAddUid);
+        mBackend.refreshWhitelist();
+        assertThat(uidPolicies.size()).isEqualTo(testAddUid.length);
+
+        int testRemoveUid[] = {123123};
+        when(mNetworkPolicyManager.getUidsWithPolicy(policy)).thenReturn(testRemoveUid);
+        mBackend.refreshWhitelist();
+        assertThat(uidPolicies.size()).isEqualTo(testRemoveUid.length);
+    }
+
+}
+
-- 
2.17.1

