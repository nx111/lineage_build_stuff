From 998f73ab5ebe9ad10efc882b1939c61db6136234 Mon Sep 17 00:00:00 2001
From: Luca Stefani <luca.stefani.ge1@gmail.com>
Date: Tue, 8 Jan 2019 18:47:15 +0100
Subject: [PATCH 2/6] LineageParts: Migrate to vendor.lineage.touch

Change-Id: I905aa27243504f82a6a443309bb90fc6ec6bef87
---
 Android.mk                                    |  3 +-
 .../gestures/TouchscreenGestureSettings.java  | 86 +++++++++++--------
 .../lineageparts/input/ButtonSettings.java    | 22 +++--
 3 files changed, 63 insertions(+), 48 deletions(-)

diff --git a/Android.mk b/Android.mk
index 84fc198..0daba24 100644
--- a/Android.mk
+++ b/Android.mk
@@ -17,7 +17,8 @@ LOCAL_STATIC_ANDROID_LIBRARIES := \
 
 LOCAL_STATIC_JAVA_LIBRARIES := \
     jsr305 \
-    org.lineageos.platform.internal
+    org.lineageos.platform.internal \
+    vendor.lineage.touch-V1.0-java
 
 LOCAL_RESOURCE_DIR := \
     $(LOCAL_PATH)/res
diff --git a/src/org/lineageos/lineageparts/gestures/TouchscreenGestureSettings.java b/src/org/lineageos/lineageparts/gestures/TouchscreenGestureSettings.java
index c74f772..5488483 100644
--- a/src/org/lineageos/lineageparts/gestures/TouchscreenGestureSettings.java
+++ b/src/org/lineageos/lineageparts/gestures/TouchscreenGestureSettings.java
@@ -1,6 +1,6 @@
 /**
- * Copyright (C) 2016 The CyanogenMod project
- *               2017 The LineageOS Project
+ * Copyright (C) 2016 The CyanogenMod Project
+ * Copyright (C) 2017-2019 The LineageOS Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,24 +21,27 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
+import android.os.RemoteException;
 import android.os.UserHandle;
 import android.support.v7.preference.ListPreference;
 import android.support.v7.preference.PreferenceManager;
 
-import lineageos.hardware.LineageHardwareManager;
-import lineageos.hardware.TouchscreenGesture;
-
 import org.lineageos.lineageparts.R;
 import org.lineageos.lineageparts.SettingsPreferenceFragment;
 import org.lineageos.lineageparts.utils.ResourceUtils;
 
+import vendor.lineage.touch.V1_0.Gesture;
+import vendor.lineage.touch.V1_0.ITouchscreenGesture;
+
 import java.lang.System;
+import java.util.ArrayList;
+import java.util.NoSuchElementException;
 
 public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
     private static final String KEY_TOUCHSCREEN_GESTURE = "touchscreen_gesture";
     private static final String TOUCHSCREEN_GESTURE_TITLE = KEY_TOUCHSCREEN_GESTURE + "_%s_title";
 
-    private TouchscreenGesture[] mTouchscreenGestures;
+    private ArrayList<Gesture> mGestures;
 
     @Override
     public void onCreate(final Bundle savedInstanceState) {
@@ -46,16 +49,19 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
 
         addPreferencesFromResource(R.xml.touchscreen_gesture_settings);
 
-        if (isTouchscreenGesturesSupported(getContext())) {
-            initTouchscreenGestures();
-        }
+        initTouchscreenGestures();
     }
 
     private void initTouchscreenGestures() {
-        final LineageHardwareManager manager = LineageHardwareManager.getInstance(getContext());
-        mTouchscreenGestures = manager.getTouchscreenGestures();
-        final int[] actions = getDefaultGestureActions(getContext(), mTouchscreenGestures);
-        for (final TouchscreenGesture gesture : mTouchscreenGestures) {
+        try {
+            ITouchscreenGesture touchscreenGesture =
+                    ITouchscreenGesture.getService(true /* retry */);
+            mGestures = touchscreenGesture.getSupportedGestures();
+        } catch (NoSuchElementException | RemoteException e) {
+            return;
+        }
+        final int[] actions = getDefaultGestureActions(getContext(), mGestures);
+        for (final Gesture gesture : mGestures) {
             getPreferenceScreen().addPreference(new TouchscreenGesturePreference(
                     getContext(), gesture, actions[gesture.id]));
         }
@@ -63,10 +69,10 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
 
     private class TouchscreenGesturePreference extends ListPreference {
         private final Context mContext;
-        private final TouchscreenGesture mGesture;
+        private final Gesture mGesture;
 
         public TouchscreenGesturePreference(final Context context,
-                                            final TouchscreenGesture gesture,
+                                            final Gesture gesture,
                                             final int defaultAction) {
             super(context);
             mContext = context;
@@ -87,8 +93,11 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
         @Override
         public boolean callChangeListener(final Object newValue) {
             final int action = Integer.parseInt(String.valueOf(newValue));
-            final LineageHardwareManager manager = LineageHardwareManager.getInstance(mContext);
-            if (!manager.setTouchscreenGestureEnabled(mGesture, action > 0)) {
+            try {
+                ITouchscreenGesture touchscreenGesture =
+                        ITouchscreenGesture.getService(true /* retry */);
+                touchscreenGesture.setGestureEnabled(mGesture, action > 0);
+            } catch (NoSuchElementException | RemoteException e) {
                 return false;
             }
             return super.callChangeListener(newValue);
@@ -101,7 +110,7 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
             }
             final int action = Integer.parseInt(String.valueOf(value));
             setIcon(getIconDrawableResourceForAction(action));
-            sendUpdateBroadcast(mContext, mTouchscreenGestures);
+            sendUpdateBroadcast(mContext, mGestures);
             return true;
         }
 
@@ -137,44 +146,45 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
     }
 
     public static void restoreTouchscreenGestureStates(final Context context) {
-        if (!isTouchscreenGesturesSupported(context)) {
+        ITouchscreenGesture touchscreenGesture;
+        final ArrayList<Gesture> gestures;
+        try {
+            touchscreenGesture = ITouchscreenGesture.getService(true /* retry */);
+            gestures = touchscreenGesture.getSupportedGestures();
+        } catch (NoSuchElementException | RemoteException e) {
             return;
         }
 
-        final LineageHardwareManager manager = LineageHardwareManager.getInstance(context);
-        final TouchscreenGesture[] gestures = manager.getTouchscreenGestures();
         final int[] actionList = buildActionList(context, gestures);
-        for (final TouchscreenGesture gesture : gestures) {
-            manager.setTouchscreenGestureEnabled(gesture, actionList[gesture.id] > 0);
+        for (final Gesture gesture : gestures) {
+            try {
+                touchscreenGesture.setGestureEnabled(gesture, actionList[gesture.id] > 0);
+            } catch (RemoteException e) {
+            }
         }
 
         sendUpdateBroadcast(context, gestures);
     }
 
-    private static boolean isTouchscreenGesturesSupported(final Context context) {
-        final LineageHardwareManager manager = LineageHardwareManager.getInstance(context);
-        return manager.isSupported(LineageHardwareManager.FEATURE_TOUCHSCREEN_GESTURES);
-    }
-
     private static int[] getDefaultGestureActions(final Context context,
-            final TouchscreenGesture[] gestures) {
+            final ArrayList<Gesture> gestures) {
         final int[] defaultActions = context.getResources().getIntArray(
                 R.array.config_defaultTouchscreenGestureActions);
-        if (defaultActions.length >= gestures.length) {
+        if (defaultActions.length >= gestures.size()) {
             return defaultActions;
         }
 
-        final int[] filledDefaultActions = new int[gestures.length];
+        final int[] filledDefaultActions = new int[gestures.size()];
         System.arraycopy(defaultActions, 0, filledDefaultActions, 0, defaultActions.length);
         return filledDefaultActions;
     }
 
     private static int[] buildActionList(final Context context,
-            final TouchscreenGesture[] gestures) {
-        final int[] result = new int[gestures.length];
+            final ArrayList<Gesture> gestures) {
+        final int[] result = new int[gestures.size()];
         final int[] defaultActions = getDefaultGestureActions(context, gestures);
         final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        for (final TouchscreenGesture gesture : gestures) {
+        for (final Gesture gesture : gestures) {
             final String key = buildPreferenceKey(gesture);
             final String defaultValue = String.valueOf(defaultActions[gesture.id]);
             result[gesture.id] = Integer.parseInt(prefs.getString(key, defaultValue));
@@ -182,16 +192,16 @@ public class TouchscreenGestureSettings extends SettingsPreferenceFragment {
         return result;
     }
 
-    private static String buildPreferenceKey(final TouchscreenGesture gesture) {
+    private static String buildPreferenceKey(final Gesture gesture) {
         return "touchscreen_gesture_" + gesture.id;
     }
 
     private static void sendUpdateBroadcast(final Context context,
-            final TouchscreenGesture[] gestures) {
+            final ArrayList<Gesture> gestures) {
         final Intent intent = new Intent(TouchscreenGestureConstants.UPDATE_PREFS_ACTION);
-        final int[] keycodes = new int[gestures.length];
+        final int[] keycodes = new int[gestures.size()];
         final int[] actions = buildActionList(context, gestures);
-        for (final TouchscreenGesture gesture : gestures) {
+        for (final Gesture gesture : gestures) {
             keycodes[gesture.id] = gesture.keycode;
         }
         intent.putExtra(TouchscreenGestureConstants.UPDATE_EXTRA_KEYCODE_MAPPING, keycodes);
diff --git a/src/org/lineageos/lineageparts/input/ButtonSettings.java b/src/org/lineageos/lineageparts/input/ButtonSettings.java
index 9b3b013..dd8fcf2 100644
--- a/src/org/lineageos/lineageparts/input/ButtonSettings.java
+++ b/src/org/lineageos/lineageparts/input/ButtonSettings.java
@@ -1,6 +1,6 @@
 /*
- * Copyright (C) 2016 The CyanogenMod project
- * Copyright (C) 2017-2018 The LineageOS project
+ * Copyright (C) 2016 The CyanogenMod Project
+ * Copyright (C) 2017-2019 The LineageOS Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,6 +43,8 @@ import android.view.KeyCharacterMap;
 import android.view.KeyEvent;
 import android.view.WindowManagerGlobal;
 
+import lineageos.providers.LineageSettings;
+
 import org.lineageos.lineageparts.R;
 import org.lineageos.lineageparts.SettingsPreferenceFragment;
 import org.lineageos.lineageparts.utils.DeviceUtils;
@@ -51,10 +53,10 @@ import org.lineageos.internal.util.ScreenType;
 
 import static org.lineageos.internal.util.DeviceKeysConstants.*;
 
-import java.util.List;
+import vendor.lineage.touch.V1_0.IKeyDisabler;
 
-import lineageos.hardware.LineageHardwareManager;
-import lineageos.providers.LineageSettings;
+import java.util.List;
+import java.util.NoSuchElementException;
 
 public class ButtonSettings extends SettingsPreferenceFragment implements
         Preference.OnPreferenceChangeListener {
@@ -222,8 +224,6 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
         mNavigationAppSwitchLongPressAction = initList(KEY_NAVIGATION_APP_SWITCH_LONG_PRESS,
                 appSwitchLongPressAction);
 
-        final LineageHardwareManager hardware = LineageHardwareManager.getInstance(getActivity());
-
         // Only visible on devices that does not have a navigation bar already
         boolean hasNavigationBar = true;
         boolean supportsKeyDisabler = isKeyDisablerSupported(getActivity());
@@ -635,8 +635,12 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
     }
 
     private static boolean isKeyDisablerSupported(Context context) {
-        final LineageHardwareManager hardware = LineageHardwareManager.getInstance(context);
-        return hardware.isSupported(LineageHardwareManager.FEATURE_KEY_DISABLE);
+        try {
+            IKeyDisabler keyDisabler = IKeyDisabler.getService(true /* retry */);
+            return true;
+        } catch (NoSuchElementException | RemoteException e) {
+            return false;
+        }
     }
 
     public static void restoreKeyDisabler(Context context) {
-- 
2.17.1

