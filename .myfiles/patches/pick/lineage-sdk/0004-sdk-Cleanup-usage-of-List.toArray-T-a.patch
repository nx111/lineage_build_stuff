From 88f4a6752aa997ddc0fb4e8f2e1739d31f363d24 Mon Sep 17 00:00:00 2001
From: Paul Keith <javelinanddart@gmail.com>
Date: Sun, 17 Feb 2019 05:20:04 +0100
Subject: [PATCH 4/4] sdk: Cleanup usage of List.toArray(T[] a)

* The parameter here only has to have the type you want it to return,
  so creating an array of size > 0 is unnecessary and wasteful

Change-Id: I28e490fb6fa3703d7edca21b29d640105072947b
---
 host/migration/src/AdbCommand.java                          | 2 +-
 host/migration/src/InsertCommand.java                       | 2 +-
 host/migration/src/QueryCommand.java                        | 2 +-
 .../platform/internal/LineageWeatherManagerService.java     | 3 +--
 .../platform/internal/PerformanceManagerService.java        | 3 +--
 .../lineageos/platform/internal/ProfileManagerService.java  | 4 ++--
 .../internal/display/DisplayHardwareController.java         | 2 +-
 sdk/src/java/lineageos/app/Profile.java                     | 6 +++---
 sdk/src/java/lineageos/hardware/LineageHardwareManager.java | 2 +-
 sdk/src/java/lineageos/util/palette/Palette.java            | 2 +-
 10 files changed, 13 insertions(+), 15 deletions(-)

diff --git a/host/migration/src/AdbCommand.java b/host/migration/src/AdbCommand.java
index 54cdb7b..bdc5464 100644
--- a/host/migration/src/AdbCommand.java
+++ b/host/migration/src/AdbCommand.java
@@ -54,7 +54,7 @@ public class AdbCommand extends Command {
         List<String> commandList = new ArrayList<String>(
                 baseCommand.length + 1);
         commandList.addAll(Arrays.asList(baseCommand));
-        String[] commands = commandList.toArray(new String[commandList.size()]);
+        String[] commands = commandList.toArray(new String[0]);
 
         if (MigrationTest.DEBUG) {
             System.out.println("Using commands: " + Arrays.toString(commands));
diff --git a/host/migration/src/InsertCommand.java b/host/migration/src/InsertCommand.java
index 0e43557..db2acd0 100644
--- a/host/migration/src/InsertCommand.java
+++ b/host/migration/src/InsertCommand.java
@@ -59,7 +59,7 @@ public class InsertCommand extends Command {
         commandList.add("--bind name:" + setting.getKeyType() + ":" + setting.getKey());
         commandList.add("--bind value:" + setting.getValueType() + ":"
                 + "\"" + setting.getValue() + "\"");
-        commands = commandList.toArray(new String[commandList.size()]);
+        commands = commandList.toArray(new String[0]);
         if (MigrationTest.DEBUG) {
             System.out.println("Using commands: " + Arrays.toString(commands));
         }
diff --git a/host/migration/src/QueryCommand.java b/host/migration/src/QueryCommand.java
index 6d5c1dc..69be0b2 100644
--- a/host/migration/src/QueryCommand.java
+++ b/host/migration/src/QueryCommand.java
@@ -63,7 +63,7 @@ public class QueryCommand extends Command {
         commandList.add(PROJECTION);
         commandList.add("--show-type"); //this is totally awesomely lineage specific
         commandList.add("true");
-        commands = commandList.toArray(new String[commandList.size()]);
+        commands = commandList.toArray(new String[0]);
         if (MigrationTest.DEBUG) {
             System.out.println("Using commands: " + Arrays.toString(commands));
         }
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/LineageWeatherManagerService.java b/lineage/lib/main/java/org/lineageos/platform/internal/LineageWeatherManagerService.java
index 6515fb8..54ba407 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/LineageWeatherManagerService.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/LineageWeatherManagerService.java
@@ -375,10 +375,9 @@ public class LineageWeatherManagerService extends LineageSystemService {
             contentValuesList.add(contentValues);
         }
 
-        ContentValues[] updateValues = new ContentValues[contentValuesList.size()];
         if (size != getContext().getContentResolver().bulkInsert(
                 WeatherColumns.CURRENT_AND_FORECAST_WEATHER_URI,
-                contentValuesList.toArray(updateValues))) {
+                contentValuesList.toArray(new ContentValues[0]))) {
             Slog.w(TAG, "Failed to update the weather content provider");
             return false;
         }
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/PerformanceManagerService.java b/lineage/lib/main/java/org/lineageos/platform/internal/PerformanceManagerService.java
index 9545dc3..5c17d92 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/PerformanceManagerService.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/PerformanceManagerService.java
@@ -378,8 +378,7 @@ public class PerformanceManagerService extends LineageSystemService {
         @Override
         public PerformanceProfile[] getPowerProfiles() throws RemoteException {
             synchronized (mLock) {
-                return mProfiles.values().toArray(
-                        new PerformanceProfile[mProfiles.size()]);
+                return mProfiles.values().toArray(new PerformanceProfile[0]);
             }
         }
 
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/ProfileManagerService.java b/lineage/lib/main/java/org/lineageos/platform/internal/ProfileManagerService.java
index a46c783..d2ac06f 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/ProfileManagerService.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/ProfileManagerService.java
@@ -410,7 +410,7 @@ public class ProfileManagerService extends LineageSystemService {
 
         @Override
         public Profile[] getProfiles() {
-            Profile[] profiles = getProfileList().toArray(new Profile[mProfiles.size()]);
+            Profile[] profiles = getProfileList().toArray(new Profile[0]);
             Arrays.sort(profiles);
             return profiles;
         }
@@ -492,7 +492,7 @@ public class ProfileManagerService extends LineageSystemService {
 
         @Override
         public NotificationGroup[] getNotificationGroups() {
-            return mGroups.values().toArray(new NotificationGroup[mGroups.size()]);
+            return mGroups.values().toArray(new NotificationGroup[0]);
         }
 
         @Override
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/display/DisplayHardwareController.java b/lineage/lib/main/java/org/lineageos/platform/internal/display/DisplayHardwareController.java
index 85fe9a3..3f4bd45 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/display/DisplayHardwareController.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/display/DisplayHardwareController.java
@@ -136,7 +136,7 @@ public class DisplayHardwareController extends LiveDisplayFeature {
             return;
         }
 
-        registerSettings(settings.toArray(new Uri[settings.size()]));
+        registerSettings(settings.toArray(new Uri[0]));
     }
 
     @Override
diff --git a/sdk/src/java/lineageos/app/Profile.java b/sdk/src/java/lineageos/app/Profile.java
index 9b02b8d..5ca5fcf 100755
--- a/sdk/src/java/lineageos/app/Profile.java
+++ b/sdk/src/java/lineageos/app/Profile.java
@@ -507,7 +507,7 @@ public final class Profile implements Parcelable, Comparable {
      * @hide
      */
     public ProfileGroup[] getProfileGroups() {
-        return profileGroups.values().toArray(new ProfileGroup[profileGroups.size()]);
+        return profileGroups.values().toArray(new ProfileGroup[0]);
     }
 
     /**
@@ -566,7 +566,7 @@ public final class Profile implements Parcelable, Comparable {
                 uuids.add(new ParcelUuid(u));
             }
             dest.writeInt(1);
-            dest.writeParcelableArray(uuids.toArray(new Parcelable[uuids.size()]), flags);
+            dest.writeParcelableArray(uuids.toArray(new Parcelable[0]), flags);
         } else {
             dest.writeInt(0);
         }
@@ -766,7 +766,7 @@ public final class Profile implements Parcelable, Comparable {
      * @return the secondary uuids for the Profile
      */
     public UUID[] getSecondaryUuids() {
-        return mSecondaryUuids.toArray(new UUID[mSecondaryUuids.size()]);
+        return mSecondaryUuids.toArray(new UUID[0]);
     }
 
     /**
diff --git a/sdk/src/java/lineageos/hardware/LineageHardwareManager.java b/sdk/src/java/lineageos/hardware/LineageHardwareManager.java
index 33a62cd..4543ad9 100644
--- a/sdk/src/java/lineageos/hardware/LineageHardwareManager.java
+++ b/sdk/src/java/lineageos/hardware/LineageHardwareManager.java
@@ -679,7 +679,7 @@ public final class LineageHardwareManager {
                     remapped.add(r);
                 }
             }
-            return remapped.toArray(new DisplayMode[remapped.size()]);
+            return remapped.toArray(new DisplayMode[0]);
         }
     }
 
diff --git a/sdk/src/java/lineageos/util/palette/Palette.java b/sdk/src/java/lineageos/util/palette/Palette.java
index cf960dd..ca78889 100644
--- a/sdk/src/java/lineageos/util/palette/Palette.java
+++ b/sdk/src/java/lineageos/util/palette/Palette.java
@@ -567,7 +567,7 @@ public final class Palette {
                 scaledBitmap.getPixels(pixels, 0, width, 0, 0, width, height);
 
                 final ColorCutQuantizer quantizer = new ColorCutQuantizer(pixels, mMaxColors,
-                        mFilters.isEmpty() ? null : mFilters.toArray(new Filter[mFilters.size()]));
+                        mFilters.isEmpty() ? null : mFilters.toArray(new Filter[0]));
 
                 // If created a new bitmap, recycle it
                 if (scaledBitmap != mBitmap) {
-- 
2.17.1

