From 47bee1ac9bd013fc35e032b7af4cbc849aba556e Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <olteanv@gmail.com>
Date: Tue, 1 May 2018 03:38:15 +0300
Subject: [PATCH 08/28] roomservice: non-depsonly: bootstrap first device repo
 from Hudson

This patch simplifies the way the script finds the initial device
repository name and location, given its singular input of ${device},
extracted from the lunch combo.

Previously a Github API search was performed on the LineageOS repository,
along with a regular expression to perform a match on a
"android_device_*_${device}" form.

This imposed certain restrictions on what can/cannot represent a valid
device repository name for ${device}.

This also had no way of controlling what happened if there were
multiple matches on the regular expression above (the first match in
alphabetical order was always chosen).

Most importantly, this imposed the limitation that for a ${device},
its corresponding android_device_${oem}_${device} repo had to exist.
This negates the value of having multiple device targets defined in
the same common repository, since roomservice would have no way to
know it needs to fetch the common device repo and not the _${device} one.

The updated script works by looking up "repository" and "target_path"
for the ${device} it's supplied at input, in a JSON file stored in the
LineageOS/Hudson Github repository (roomservice-main-device-repos.json).

Change-Id: I25ffa893db4e0b93e510181fa9c94de7fa3116b2
Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
---
 build/tools/roomservice.py | 160 ++++++++++++++++++-------------------
 1 file changed, 80 insertions(+), 80 deletions(-)

diff --git a/build/tools/roomservice.py b/build/tools/roomservice.py
index f19f1214..67bd4003 100755
--- a/build/tools/roomservice.py
+++ b/build/tools/roomservice.py
@@ -61,11 +61,8 @@ from xml.etree import ElementTree
 #       - The device repository is not there. The roomservice script has the additional task of
 #         finding it. Therefore, the "if not depsonly" conditions present in the code below
 #         should be taken as synonymous with "if device makefile isn't there".
-#       - An attempt is made to use the Github Search API for repositories that have ${device} in
-#         their name, for the LineageOS user.
-#       - Of all repositories that are found via Github Search API, the first one taken to be
-#         the true device repository is the first one that will match the (simplified)
-#         regular expression "android_device_*_${device}".
+#       - The device's repo_path and repo_name are looked up on github.com/LineageOS/Hudson,
+#         in the roomservice-initial-lunch-repo.json file.
 #       - After the above step is over, case (b) de-generates into case (a) - depsonly, as the
 #         device repository was found.
 #
@@ -87,8 +84,7 @@ except:
 if not depsonly:
     print("Device %s not found. Attempting to retrieve device repository from LineageOS Github (http://github.com/LineageOS)." % device)
 
-repositories = []
-
+# Register the Github API authentication token
 try:
     authtuple = netrc.netrc().authenticators("api.github.com")
 
@@ -104,20 +100,6 @@ def add_auth(githubreq):
     if githubauth:
         githubreq.add_header("Authorization","Basic %s" % githubauth)
 
-if not depsonly:
-    githubreq = urllib.request.Request("https://api.github.com/search/repositories?q=%s+user:LineageOS+in:name+fork:true" % device)
-    add_auth(githubreq)
-    try:
-        result = json.loads(urllib.request.urlopen(githubreq).read().decode())
-    except urllib.error.URLError:
-        print("Failed to search GitHub")
-        sys.exit()
-    except ValueError:
-        print("Failed to parse return data from GitHub")
-        sys.exit()
-    for res in result.get('items', []):
-        repositories.append(res)
-
 local_manifests = r'.repo/local_manifests'
 if not os.path.exists(local_manifests): os.makedirs(local_manifests)
 
@@ -308,7 +290,7 @@ if depsonly:
         # in build/envsetup.sh. Should definitely not end up here.
         print("Trying dependencies-only mode on a non-existing device tree?")
 
-    sys.exit()
+    sys.exit(0)
 
 else:
     # Not depsonly => device repository isn't here => we need to find it.
@@ -316,63 +298,81 @@ else:
     #
     # What we're trying to do is find the damn device repository, so the code paths
     # (depsonly and not depsonly) can converge back, by calling fetch_dependencies.
-    for repository in repositories:
-        repo_name = repository['name']
-        if re.match(r"^android_device_[^_]*_" + device + "$", repo_name):
-            # We have a winner. Found on Github via searching by ${device} only!!
-            print("Found repository: %s" % repository['name'])
-
-            # We don't know what manufacturer we're looking at (the script was only given ${device}).
-            # Assume that the manufacturer is what's left after stripping away
-            # "android_device_" and "_${device}".
-            manufacturer = repo_name.replace("android_device_", "").replace("_" + device, "")
-
-            # This is the default_revision of our repo manifest, not of the Github remote repository.
-            default_revision = get_default_revision()
-            print("Default revision: %s" % default_revision)
-            print("Checking branch info")
-            githubreq = urllib.request.Request(repository['branches_url'].replace('{/branch}', ''))
-            add_auth(githubreq)
-            result = json.loads(urllib.request.urlopen(githubreq).read().decode())
-
-            ## Try tags, too, since that's what releases use
-            if not has_branch(result, default_revision):
-                githubreq = urllib.request.Request(repository['tags_url'].replace('{/tag}', ''))
-                add_auth(githubreq)
-                result.extend (json.loads(urllib.request.urlopen(githubreq).read().decode()))
-
-            # The script was also not told where to put the device repository that it was
-            # supposed to find in non-depsonly mode.
-            # Just assume its place is in device/${manufacturer}/${device}.
-            repo_path = "device/%s/%s" % (manufacturer, device)
-            adding = {'repository':repo_name,'target_path':repo_path}
-
-            fallback_branch = None
-            if not has_branch(result, default_revision):
-                if os.getenv('ROOMSERVICE_BRANCHES'):
-                    fallbacks = list(filter(bool, os.getenv('ROOMSERVICE_BRANCHES').split(' ')))
-                    for fallback in fallbacks:
-                        if has_branch(result, fallback):
-                            print("Using fallback branch: %s" % fallback)
-                            fallback_branch = fallback
-                            break
-
-                if not fallback_branch:
-                    print("Default revision %s not found in %s. Bailing." % (default_revision, repo_name))
-                    print("Branches found:")
-                    for branch in [branch['name'] for branch in result]:
-                        print(branch)
-                    print("Use the ROOMSERVICE_BRANCHES environment variable to specify a list of fallback branches.")
-                    sys.exit()
-
-            add_to_manifest([adding], fallback_branch)
-
-            print("Syncing repository to retrieve project.")
-            os.system('repo sync --force-sync %s' % repo_path)
-            print("Repository synced!")
-
-            fetch_dependencies(repo_path, fallback_branch)
-            print("Done")
-            sys.exit()
+    githubreq = urllib.request.Request("https://raw.githubusercontent.com/LineageOS/hudson/master/roomservice-initial-lunch-repo.json")
+    add_auth(githubreq)
+    try:
+        result = urllib.request.urlopen(githubreq)
+        body = result.read().decode("utf-8")
+        json_data = json.loads(body)
+    except urllib.error.URLError as ex:
+        print("Failed to search GitHub")
+        print(ex)
+        sys.exit(1)
+    except ValueError as ex:
+        print("Failed to parse returned data from GitHub")
+        print(ex)
+        sys.exit(1)
+
+    try:
+        repo_name = json_data[device]["repository"]
+        repo_path = json_data[device]["target_path"]
+    except KeyError as ex:
+        print("Failed to find info about device %s in github.com/LineageOS/hudson!" % device)
+        sys.exit(1)
+    except ValueError as ex:
+        print("Failed to parse repository and target_path data for device %s!" % device)
+        print(ex)
+        sys.exit(1)
+    # repo_name and repo_path now contain the device's
+    # repository and target_path as specified by Hudson
+
+    print("Found repository: %s" % repo_name)
+
+    # This is the default_revision of our repo manifest, not of the Github remote repository.
+    default_revision = get_default_revision()
+    print("Default revision: %s" % default_revision)
+
+    # We have to check that the remote repository has any
+    # branch or tag to match our default revision
+    print("Checking branch info")
+    githubreq = urllib.request.Request("https://api.github.com/repos/LineageOS/%s/branches" % repo_name)
+    add_auth(githubreq)
+    result = json.loads(urllib.request.urlopen(githubreq).read().decode())
+
+    ## Try tags, too, since that's what releases use
+    if not has_branch(result, default_revision):
+        githubreq = urllib.request.Request("https://api.github.com/repos/LineageOS/%s/tags" % repo_name)
+        add_auth(githubreq)
+        result.extend (json.loads(urllib.request.urlopen(githubreq).read().decode()))
+
+    fallback_branch = None
+    if not has_branch(result, default_revision):
+        if os.getenv('ROOMSERVICE_BRANCHES'):
+            fallbacks = list(filter(bool, os.getenv('ROOMSERVICE_BRANCHES').split(' ')))
+            for fallback in fallbacks:
+                if has_branch(result, fallback):
+                    print("Using fallback branch: %s" % fallback)
+                    fallback_branch = fallback
+                    break
+
+        if not fallback_branch:
+            print("Default revision %s not found in %s. Bailing." % (default_revision, repo_name))
+            print("Branches found:")
+            for branch in [branch['name'] for branch in result]:
+                print(branch)
+            print("Use the ROOMSERVICE_BRANCHES environment variable to specify a list of fallback branches.")
+            sys.exit(1)
+
+    # fallback_branch is None if default_revision exists on remote
+    adding = { "repository": repo_name, "target_path": repo_path }
+    add_to_manifest([adding], fallback_branch)
+
+    print("Syncing repository to retrieve project.")
+    os.system('repo sync --force-sync %s' % repo_path)
+    print("Repository synced!")
+
+    fetch_dependencies(repo_path, fallback_branch)
+    print("Done")
+    sys.exit(0)
 
 print("Repository for %s not found in the LineageOS Github repository list. If this is in error, you may need to manually add it to your local_manifests/roomservice.xml." % device)
-- 
2.17.1

