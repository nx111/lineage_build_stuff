From 9ad81d9cd0d4c9e5a1b70edf622fe446ef113b19 Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <olteanv@gmail.com>
Date: Tue, 1 May 2018 13:17:28 +0300
Subject: [PATCH 10/37] roomservice: depsonly: do not look up device repo by
 name in the manifest

This change drastically reduces the occurrence of the error message
"Trying dependencies-only mode on a non-existing device tree?".

It is based on the observation that, if depsonly is True, we already
have a known way to get to the lineage.mk that triggered it.

It therefore leads to more predictable results if we set repo_path to
be the git repository top-level of the path that contains lineage.mk.

This also fixes the case where the device repo name does not contain
${device} (so it's not in the manifest), but ${device} is somewhere along
the path "*/${device}/lineage.mk" (basically lineage.mk is in a subfolder).
This is a valid use case for the build system (both AOSP and Lineage),
as explained in the links below:

* https://review.lineageos.org/c/LineageOS/android_build/+/208737
* https://review.lineageos.org/c/LineageOS/android_build/+/208856

Change-Id: I8156fceb33a780c7c138705171eadd1a88879c11
Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
---
 build/tools/roomservice.py | 45 ++++++++++++++++++--------------------
 1 file changed, 21 insertions(+), 24 deletions(-)

diff --git a/build/tools/roomservice.py b/build/tools/roomservice.py
index 67bd4003..352ff1b7 100755
--- a/build/tools/roomservice.py
+++ b/build/tools/roomservice.py
@@ -16,6 +16,7 @@
 
 from __future__ import print_function
 
+import subprocess
 import base64
 import json
 import netrc
@@ -131,19 +132,6 @@ def get_default_revision():
     r = d.get('revision')
     return r.replace('refs/heads/', '').replace('refs/tags/', '')
 
-def get_from_manifest(devicename):
-    try:
-        lm = ElementTree.parse(".repo/local_manifests/roomservice.xml")
-        lm = lm.getroot()
-    except:
-        lm = ElementTree.Element("manifest")
-
-    for localpath in lm.findall("project"):
-        if re.search("android_device_.*_%s$" % device, localpath.get("name")):
-            return localpath.get("path")
-
-    return None
-
 def is_in_manifest(projectpath):
     try:
         lm = ElementTree.parse(".repo/local_manifests/roomservice.xml")
@@ -277,19 +265,28 @@ if depsonly:
     # depsonly was set if the lineage.mk file was found. Therefore, the
     # device repository definitely exists, it's just a matter of finding it.
     #
-    # Search local_manifests.xml for all projects that contain "android_device_"
-    # and end in "_${device}". Function returns first such occurrence.
-    repo_path = get_from_manifest(device)
-    if repo_path:
-        fetch_dependencies(repo_path)
-    else:
-        # This error typically means that although we know the device repo
-        # should have been there (because depsonly == true), we weren't able
-        # to find it (because the search in local_manifests.xml was too
-        # restrictive). Or perhaps depsonly was triggered by a false positive
-        # in build/envsetup.sh. Should definitely not end up here.
+    # Use the same logic as build/core/product_config.mk who originally found
+    # the device repo. It cannot provide different results when ran twice.
+    makefile_paths = ["*/{}/lineage.mk".format(device), "*/{}/cm.mk".format(device)]
+    found_makefile = False
+
+    for makefile_path in makefile_paths:
+        try:
+            repo_path = subprocess.check_output(["cd $(dirname $(find $ANDROID_BUILD_TOP/device " +
+                                                 "-path " + makefile_path + ")) && " +
+                                                 "git rev-parse --show-toplevel"],
+                                                 env=os.environ, shell=True).replace('\n', '')
+            if repo_path is not None:
+                found_makefile = True
+                break
+        except CalledProcessError as ex:
+            print(ex)
+
+    if found_makefile is False:
         print("Trying dependencies-only mode on a non-existing device tree?")
+        sys.exit(1)
 
+    fetch_dependencies(repo_path)
     sys.exit(0)
 
 else:
-- 
2.17.1

