From 07f4494cb3cdd9abde2276ba7ead05c25289045c Mon Sep 17 00:00:00 2001
From: Vladimir Oltean <olteanv@gmail.com>
Date: Tue, 9 Oct 2018 02:50:13 +0300
Subject: [PATCH 11/28] roomservice: adapt to lineage-16.0 realities

ANDROID_BUILD_TOP is deprecated at the build system level. Compute
this variable based on the path of the ".repo" folder.

Stop trying to find the lineage.mk files and instead use a GNU Makefile
that parses the AndroidProducts.mk (code borrowed from the main build
system) and returns the makefile path associated with a build target.

Change-Id: Ib2dbc8624e4a88f6178fea2c1964e111436f749d
Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
---
 build/tools/product_mk_finder.mk | 98 ++++++++++++++++++++++++++++++++
 build/tools/roomservice.py       | 45 +++++++++++----
 2 files changed, 132 insertions(+), 11 deletions(-)
 create mode 100644 build/tools/product_mk_finder.mk

diff --git a/build/tools/product_mk_finder.mk b/build/tools/product_mk_finder.mk
new file mode 100644
index 00000000..0859aa98
--- /dev/null
+++ b/build/tools/product_mk_finder.mk
@@ -0,0 +1,98 @@
+#
+# Copyright (C) 2007 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+empty :=
+space := $(empty) $(empty)
+$(eval SRC_TARGET_DIR := $(ANDROID_BUILD_TOP)/build/target)
+
+#
+# Functions for including AndroidProducts.mk files
+# PRODUCT_MAKEFILES is set up in AndroidProducts.mks.
+# Format of PRODUCT_MAKEFILES:
+# <product_name>:<path_to_the_product_makefile>
+# If the <product_name> is the same as the base file name (without dir
+# and the .mk suffix) of the product makefile, "<product_name>:" can be
+# omitted.
+
+# Search for AndroidProducts.mks in the given dir.
+# $(1): the path to the dir
+define _search-android-products-files-in-dir
+$(sort $(shell test -d $(1) && find -L $(1) \
+  -maxdepth 6 \
+  -name .git -prune \
+  -o -name AndroidProducts.mk -print))
+endef
+
+#
+# Returns the list of all AndroidProducts.mk files.
+# $(call ) isn't necessary.
+#
+define _find-android-products-files
+$(foreach d, device vendor product,$(call _search-android-products-files-in-dir,$(addprefix $(ANDROID_BUILD_TOP)/, $(d)))) \
+  $(SRC_TARGET_DIR)/product/AndroidProducts.mk
+endef
+
+#
+# Returns the sorted concatenation of PRODUCT_MAKEFILES
+# variables set in the given AndroidProducts.mk files.
+# $(1): the list of AndroidProducts.mk files.
+#
+define get-product-makefiles
+$(sort \
+  $(foreach f,$(1), \
+    $(eval PRODUCT_MAKEFILES :=) \
+    $(eval LOCAL_DIR := $(patsubst %/,%,$(dir $(f)))) \
+    $(eval include $(f)) \
+    $(PRODUCT_MAKEFILES) \
+   ) \
+  $(eval PRODUCT_MAKEFILES :=) \
+  $(eval LOCAL_DIR :=) \
+ )
+endef
+
+#
+# Returns the sorted concatenation of all PRODUCT_MAKEFILES
+# variables set in all AndroidProducts.mk files.
+# $(call ) isn't necessary.
+#
+define get-all-product-makefiles
+$(call get-product-makefiles,$(_find-android-products-files))
+endef
+
+# Read in all of the product definitions specified by the AndroidProducts.mk
+# files in the tree.
+all_product_configs := $(get-all-product-makefiles)
+
+# $(1): product
+# $(2): makefile path
+define create-product-makefile-rule
+$(strip $(1)):
+	@echo "$(strip $(2))"
+endef
+
+# Find the product config makefile for the current product.
+# all_product_configs consists items like:
+# <product_name>:<path_to_the_product_makefile>
+# or just <path_to_the_product_makefile> in case the product name is the
+# same as the base filename of the product config makefile.
+$(foreach f, $(all_product_configs),\
+    $(eval _cpm_words := $(subst :,$(space),$(f)))\
+    $(eval _cpm_word1 := $(word 1,$(_cpm_words)))\
+    $(eval _cpm_word2 := $(word 2,$(_cpm_words)))\
+    $(if $(_cpm_word2),\
+        $(eval $(call create-product-makefile-rule, $(_cpm_word1), $(_cpm_word2))),\
+        $(eval $(call create-product-makefile-rule, $(basename $(notdir $(f))), $(_cpm_word1)))))
+
diff --git a/build/tools/roomservice.py b/build/tools/roomservice.py
index 23944dce..3430e0b9 100755
--- a/build/tools/roomservice.py
+++ b/build/tools/roomservice.py
@@ -40,16 +40,39 @@ except ImportError:
 
 from xml.etree import ElementTree
 
+# Utility function for finding the .repo top directory,
+# borrowed from the Google repo tool itself
+def _FindRepo():
+  """Look for a repo installation, starting at the current directory.
+  """
+  curdir = os.getcwd()
+  repo = None
+
+  olddir = None
+  while curdir != '/' \
+          and curdir != olddir \
+          and not repo:
+    repo = os.path.join(curdir, '.repo', 'repo/main.py')  # main script
+    if not os.path.isfile(repo):
+      repo = None
+      olddir = curdir
+      curdir = os.path.dirname(curdir)
+  return curdir
+
+android_build_top = _FindRepo()
+product_mk_finder = os.path.join(android_build_top, "vendor", "lineage", "build", "tools", "product_mk_finder.mk")
+os.environ["ANDROID_BUILD_TOP"] = android_build_top # For the product_mk_finder
+
 #
 # The purpose of this script is to import repositories (in addition to the ones
 # already specified in .repo/default.xml and .repo/manifests/snippets/lineage.xml),
 # in order to satisfy the needs of a build for the lunch combo given as argument ($1).
 #
-# There are 2 scenarios, differentiated by the value of the depsonly parameter ($2).
-# The build/envsetup.sh will try to find a lineage.mk file, placed in a ${product} folder,
-# anywhere in the device/ subfolders.
+# There are 2 scenarios, differentiated by the value of the depsonly parameter
+# ($2). The build/envsetup.sh will try to find a AndroidProducts.mk file,
+# placed in a ${product} folder, anywhere in the device/ subfolders.
 #
-# (a) If it finds such a ${product}/lineage.mk file ("depsonly" is supplied as true):
+# (a) If it finds such a ${product}/AndroidProducts.mk file ("depsonly" is supplied as true):
 #       - The device repository is already there. Just its dependencies need to be downloaded.
 #         The "depsonly" parameter is supplied as "true".
 #       - To the end of fetching repositories, it will collect them from the dependencies files
@@ -58,7 +81,7 @@ from xml.etree import ElementTree
 #         populates roomservice.xml with all new findings.
 #       - After this process is over, all new projects in roomservice.xml are force-synced.
 #
-# (b) If no such ${product}/lineage.mk file is to be found ("depsonly" is not supplied):
+# (b) If no such ${product}/AndroidProducts.mk file is to be found ("depsonly" is not supplied):
 #       - The device repository is not there. The roomservice script has the additional task of
 #         finding it. Therefore, the "if not depsonly" conditions present in the code below
 #         should be taken as synonymous with "if device makefile isn't there".
@@ -262,22 +285,22 @@ def has_branch(branches, revision):
     return revision in [branch['name'] for branch in branches]
 
 if depsonly:
-    # depsonly was set if the lineage.mk file was found. Therefore, the
+    # depsonly was set if the AndroidProducts.mk file was found. Therefore, the
     # device repository definitely exists, it's just a matter of finding it.
     #
     # Use the same logic as build/core/product_config.mk who originally found
     # the device repo. It cannot provide different results when ran twice.
-    makefile_path = "*/{}/lineage.mk".format(device)
     found_makefile = False
 
     try:
-        repo_path = subprocess.check_output(["cd $(dirname $(find $ANDROID_BUILD_TOP/device " +
-                                             "-path " + makefile_path + ")) && " +
-                                             "git rev-parse --show-toplevel"],
+        makefile_path = subprocess.check_output(["make -f " + product_mk_finder + " lineage_{}".format(device)],
+                                                env=os.environ, shell=True).replace('\n', '')
+        repo_path = subprocess.check_output(["git -C " + os.path.dirname(makefile_path) +
+                                             " rev-parse --show-toplevel"],
                                              env=os.environ, shell=True).replace('\n', '')
         if repo_path is not None:
             found_makefile = True
-    except CalledProcessError as ex:
+    except subprocess.CalledProcessError as ex:
         print(ex)
 
     if found_makefile is False:
-- 
2.17.1

