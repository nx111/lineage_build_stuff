From 9e39afd1918af528bb4d791d61327ab021c455d1 Mon Sep 17 00:00:00 2001
From: Dileep Marchya <dmarchya@codeaurora.org>
Date: Thu, 6 Dec 2018 10:58:14 +0530
Subject: [PATCH 1/3] display: Add APIs to manage power states, hdr, layer mask
 and debug properties

Add interface to
- override SurfaceFlinger to HWC power states flow and manage it
  using private path.
- check if underlying implementation supports HDR.
- set layer as a mask layer indicating that the specified layer is
  just a mask layer such as round corner, notch etc.
- query values corresponding to a specified property identified
  by a unique string.

CRs-Fixed: 2362214
Change-Id: I2845cce9ca6c0d9536eb9e1318363e545f3ffa38
---
 display/config/1.7/IDisplayConfig.hal | 101 ++++++++++++++++++++++++++
 display/current.txt                   |   1 +
 2 files changed, 102 insertions(+)
 create mode 100644 display/config/1.7/IDisplayConfig.hal

diff --git a/display/config/1.7/IDisplayConfig.hal b/display/config/1.7/IDisplayConfig.hal
new file mode 100644
index 0000000..3e6b661
--- /dev/null
+++ b/display/config/1.7/IDisplayConfig.hal
@@ -0,0 +1,101 @@
+/*
+* Copyright (c) 2018 The Linux Foundation. All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+*    * Redistributions of source code must retain the above copyright
+*      notice, this list of conditions and the following disclaimer.
+*    * Redistributions in binary form must reproduce the above
+*      copyright notice, this list of conditions and the following
+*      disclaimer in the documentation and/or other materials provided
+*      with the distribution.
+*    * Neither the name of The Linux Foundation. nor the names of its
+*      contributors may be used to endorse or promote products derived
+*      from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+package vendor.display.config@1.7;
+
+import @1.6::IDisplayConfig;
+import @1.2::IDisplayConfig;
+
+interface IDisplayConfig extends @1.6::IDisplayConfig {
+    enum PowerMode : int32_t {
+        Off = 0,
+        Doze = 1,
+        On = 2,
+        DozeSuspend = 3,
+    };
+
+    /*
+     * Sets new power mode on the specificied display.
+     *
+     * @param disp_type display type
+     * @param power_mode new power mode
+     * @return error is NONE upon success
+     */
+    @callflow(next="*")
+    setPowerMode(DisplayTypeExt disp_type, PowerMode power_mode) generates (int32_t error);
+
+    /*
+     * Query if power mode override is supported by underlying implementation
+     * for the specified display.
+     *
+     * @param disp_type display type
+     * @return supported true if supported
+     */
+    @callflow(next="*")
+    isPowerModeOverrideSupported(DisplayTypeExt disp_type) generates (bool supported);
+
+    /*
+     * Query if hdr is supported by the underlying implementation for the specified display.
+     *
+     * @param disp_type display type
+     * @return supported true if supported
+     */
+    @callflow(next="*")
+    isHDRSupported(DisplayTypeExt disp_type) generates (bool supported);
+
+    /*
+     * Query if wide color gamut is supported by the underlying implementation
+     * for the specified display.
+     *
+     * @param disp_type display type
+     * @return supported true if supported
+     */
+    @callflow(next="*")
+    isWCGSupported(DisplayTypeExt disp_type) generates (bool supported);
+
+    /*
+     * Sets layer as a mask type (e.g. round corner) identified by the layer id.
+     *
+     * @param disp_type display type
+     * @param layer_id layer id used for communication with hwc
+     * @return error is NONE upon success
+     */
+    @callflow(next="*")
+    setLayerAsMask(DisplayTypeExt disp_type, uint64_t layer_id) generates (int32_t error);
+
+    /*
+     * Gets value corresponding to the specified property string from hwc.
+     *
+     * @param prop_name name of the property
+     * @param value value corresponding to the property
+     * @return error is NONE upon success
+     */
+    @callflow(next="*")
+    getDebugProperty(string prop_name) generates (string value, int32_t error);
+};
diff --git a/display/current.txt b/display/current.txt
index f9385df..51a1a53 100644
--- a/display/current.txt
+++ b/display/current.txt
@@ -41,3 +41,4 @@ e89567ed6383dc0e5fd168babaf046352962b571f47fba26804c2c7690256b1f vendor.display.
 cbdb70cc5999b9537497b1e56955278ce1c3510245c82f861bf847ed1609f05b vendor.display.config@1.4::IDisplayConfig
 f852a7cf003eaf02a26784dff919ea1f334308df888f406962bfdb08ab51b59e vendor.display.config@1.5::IDisplayConfig
 bff30d77ca2327e719a4bd6938bad222c5f1a87f0517b8baf9ef5c3edd0bdc35 vendor.display.config@1.6::IDisplayConfig
+b506d7518e67005eda1a23a13db087f8eafa636485138f254308b6714eec6657 vendor.display.config@1.7::IDisplayConfig
-- 
2.17.1

